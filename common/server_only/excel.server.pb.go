// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.26.0
// source: excel.server.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Excel struct {
	state                      protoimpl.MessageState        `protogen:"open.v1"`
	CafeInfoExcelTableInfo     []*CafeInfoExcelTableInfo     `protobuf:"bytes,1,rep,name=CafeInfoExcelTableInfo,proto3" json:"CafeInfoExcelTableInfo,omitempty"`         // 咖啡馆信息
	DefaultCharacterExcelTable []*DefaultCharacterExcelTable `protobuf:"bytes,2,rep,name=DefaultCharacterExcelTable,proto3" json:"DefaultCharacterExcelTable,omitempty"` // 默认角色信息
	CharacterExcelTable        []*CharacterExcelTable        `protobuf:"bytes,3,rep,name=CharacterExcelTable,proto3" json:"CharacterExcelTable,omitempty"`               // 角色基本数据
	DefaultFurnitureExcelTable []*DefaultFurnitureExcelTable `protobuf:"bytes,4,rep,name=DefaultFurnitureExcelTable,proto3" json:"DefaultFurnitureExcelTable,omitempty"` // 默认家具
	DefaultEchelonExcelTable   []*DefaultEchelonExcelTable   `protobuf:"bytes,5,rep,name=DefaultEchelonExcelTable,proto3" json:"DefaultEchelonExcelTable,omitempty"`     // 默认队伍
	ShopExcelTable             []*ShopExcelTable             `protobuf:"bytes,6,rep,name=ShopExcelTable,proto3" json:"ShopExcelTable,omitempty"`                         // 商店数据
	ShopInfoExcelTable         []*ShopInfoExcelTable         `protobuf:"bytes,7,rep,name=ShopInfoExcelTable,proto3" json:"ShopInfoExcelTable,omitempty"`                 // 商店配置
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Excel) Reset() {
	*x = Excel{}
	mi := &file_excel_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Excel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Excel) ProtoMessage() {}

func (x *Excel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Excel.ProtoReflect.Descriptor instead.
func (*Excel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{0}
}

func (x *Excel) GetCafeInfoExcelTableInfo() []*CafeInfoExcelTableInfo {
	if x != nil {
		return x.CafeInfoExcelTableInfo
	}
	return nil
}

func (x *Excel) GetDefaultCharacterExcelTable() []*DefaultCharacterExcelTable {
	if x != nil {
		return x.DefaultCharacterExcelTable
	}
	return nil
}

func (x *Excel) GetCharacterExcelTable() []*CharacterExcelTable {
	if x != nil {
		return x.CharacterExcelTable
	}
	return nil
}

func (x *Excel) GetDefaultFurnitureExcelTable() []*DefaultFurnitureExcelTable {
	if x != nil {
		return x.DefaultFurnitureExcelTable
	}
	return nil
}

func (x *Excel) GetDefaultEchelonExcelTable() []*DefaultEchelonExcelTable {
	if x != nil {
		return x.DefaultEchelonExcelTable
	}
	return nil
}

func (x *Excel) GetShopExcelTable() []*ShopExcelTable {
	if x != nil {
		return x.ShopExcelTable
	}
	return nil
}

func (x *Excel) GetShopInfoExcelTable() []*ShopInfoExcelTable {
	if x != nil {
		return x.ShopInfoExcelTable
	}
	return nil
}

type CafeInfoExcelTableInfo struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CafeId                  int64                  `protobuf:"varint,1,opt,name=CafeId,proto3" json:"CafeId,omitempty"`
	IsDefault               bool                   `protobuf:"varint,2,opt,name=IsDefault,proto3" json:"IsDefault,omitempty"`
	OpenConditionCafeId     string                 `protobuf:"bytes,3,opt,name=OpenConditionCafeId,proto3" json:"OpenConditionCafeId,omitempty"`
	OpenConditionCafeInvite string                 `protobuf:"bytes,4,opt,name=OpenConditionCafeInvite,proto3" json:"OpenConditionCafeInvite,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CafeInfoExcelTableInfo) Reset() {
	*x = CafeInfoExcelTableInfo{}
	mi := &file_excel_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeInfoExcelTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeInfoExcelTableInfo) ProtoMessage() {}

func (x *CafeInfoExcelTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeInfoExcelTableInfo.ProtoReflect.Descriptor instead.
func (*CafeInfoExcelTableInfo) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{1}
}

func (x *CafeInfoExcelTableInfo) GetCafeId() int64 {
	if x != nil {
		return x.CafeId
	}
	return 0
}

func (x *CafeInfoExcelTableInfo) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *CafeInfoExcelTableInfo) GetOpenConditionCafeId() string {
	if x != nil {
		return x.OpenConditionCafeId
	}
	return ""
}

func (x *CafeInfoExcelTableInfo) GetOpenConditionCafeInvite() string {
	if x != nil {
		return x.OpenConditionCafeInvite
	}
	return ""
}

type DefaultCharacterExcelTable struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CharacterId            int64                  `protobuf:"varint,1,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`
	FavoriteCharacter      bool                   `protobuf:"varint,2,opt,name=FavoriteCharacter,proto3" json:"FavoriteCharacter,omitempty"`
	Level                  int32                  `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	Exp                    int64                  `protobuf:"varint,4,opt,name=Exp,proto3" json:"Exp,omitempty"`
	FavorExp               int64                  `protobuf:"varint,5,opt,name=FavorExp,proto3" json:"FavorExp,omitempty"`
	FavorRank              int32                  `protobuf:"varint,6,opt,name=FavorRank,proto3" json:"FavorRank,omitempty"`
	StarGrade              int32                  `protobuf:"varint,7,opt,name=StarGrade,proto3" json:"StarGrade,omitempty"`
	ExSkillLevel           int32                  `protobuf:"varint,8,opt,name=ExSkillLevel,proto3" json:"ExSkillLevel,omitempty"`
	PassiveSkillLevel      int32                  `protobuf:"varint,9,opt,name=PassiveSkillLevel,proto3" json:"PassiveSkillLevel,omitempty"`
	ExtraPassiveSkillLevel int32                  `protobuf:"varint,10,opt,name=ExtraPassiveSkillLevel,proto3" json:"ExtraPassiveSkillLevel,omitempty"`
	CommonSkillLevel       int32                  `protobuf:"varint,11,opt,name=CommonSkillLevel,proto3" json:"CommonSkillLevel,omitempty"`
	LeaderSkillLevel       int32                  `protobuf:"varint,12,opt,name=LeaderSkillLevel,proto3" json:"LeaderSkillLevel,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DefaultCharacterExcelTable) Reset() {
	*x = DefaultCharacterExcelTable{}
	mi := &file_excel_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultCharacterExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultCharacterExcelTable) ProtoMessage() {}

func (x *DefaultCharacterExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultCharacterExcelTable.ProtoReflect.Descriptor instead.
func (*DefaultCharacterExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{2}
}

func (x *DefaultCharacterExcelTable) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetFavoriteCharacter() bool {
	if x != nil {
		return x.FavoriteCharacter
	}
	return false
}

func (x *DefaultCharacterExcelTable) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetFavorExp() int64 {
	if x != nil {
		return x.FavorExp
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetFavorRank() int32 {
	if x != nil {
		return x.FavorRank
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetStarGrade() int32 {
	if x != nil {
		return x.StarGrade
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetExSkillLevel() int32 {
	if x != nil {
		return x.ExSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetPassiveSkillLevel() int32 {
	if x != nil {
		return x.PassiveSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetExtraPassiveSkillLevel() int32 {
	if x != nil {
		return x.ExtraPassiveSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetCommonSkillLevel() int32 {
	if x != nil {
		return x.CommonSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetLeaderSkillLevel() int32 {
	if x != nil {
		return x.LeaderSkillLevel
	}
	return 0
}

type CharacterExcelTable struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DevName                  string                 `protobuf:"bytes,2,opt,name=DevName,proto3" json:"DevName,omitempty"`
	CostumeGroupId           int64                  `protobuf:"varint,3,opt,name=CostumeGroupId,proto3" json:"CostumeGroupId,omitempty"`
	IsPlayable               bool                   `protobuf:"varint,4,opt,name=IsPlayable,proto3" json:"IsPlayable,omitempty"`
	ProductionStep_          string                 `protobuf:"bytes,5,opt,name=ProductionStep_,json=ProductionStep,proto3" json:"ProductionStep_,omitempty"`
	CollectionVisible        bool                   `protobuf:"varint,6,opt,name=CollectionVisible,proto3" json:"CollectionVisible,omitempty"`
	IsPlayableCharacter      bool                   `protobuf:"varint,7,opt,name=IsPlayableCharacter,proto3" json:"IsPlayableCharacter,omitempty"`
	LocalizeEtcId            int64                  `protobuf:"varint,8,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	Rarity_                  string                 `protobuf:"bytes,9,opt,name=Rarity_,json=Rarity,proto3" json:"Rarity_,omitempty"`
	IsNPC                    bool                   `protobuf:"varint,25,opt,name=IsNPC,proto3" json:"IsNPC,omitempty"`
	DefaultStarGrade         int32                  `protobuf:"varint,10,opt,name=DefaultStarGrade,proto3" json:"DefaultStarGrade,omitempty"`
	MaxStarGrade             int32                  `protobuf:"varint,11,opt,name=MaxStarGrade,proto3" json:"MaxStarGrade,omitempty"`
	Jumpable                 bool                   `protobuf:"varint,12,opt,name=Jumpable,proto3" json:"Jumpable,omitempty"`
	PersonalityId            int32                  `protobuf:"varint,13,opt,name=PersonalityId,proto3" json:"PersonalityId,omitempty"`
	CharacterAIId            int32                  `protobuf:"varint,14,opt,name=CharacterAIId,proto3" json:"CharacterAIId,omitempty"`
	ScenarioCharacter        string                 `protobuf:"bytes,15,opt,name=ScenarioCharacter,proto3" json:"ScenarioCharacter,omitempty"`
	FavorLevelupType         int32                  `protobuf:"varint,16,opt,name=FavorLevelupType,proto3" json:"FavorLevelupType,omitempty"`
	EquipmentSlot            []string               `protobuf:"bytes,17,rep,name=EquipmentSlot,proto3" json:"EquipmentSlot,omitempty"`
	HpBarHeight              float32                `protobuf:"fixed32,18,opt,name=HpBarHeight,proto3" json:"HpBarHeight,omitempty"`
	Tags                     []string               `protobuf:"bytes,19,rep,name=Tags,proto3" json:"Tags,omitempty"`
	SecretStoneItemId        int64                  `protobuf:"varint,20,opt,name=SecretStoneItemId,proto3" json:"SecretStoneItemId,omitempty"`
	SecretStoneItemAmount    int32                  `protobuf:"varint,21,opt,name=SecretStoneItemAmount,proto3" json:"SecretStoneItemAmount,omitempty"`
	CharacterPieceItemId     int64                  `protobuf:"varint,22,opt,name=CharacterPieceItemId,proto3" json:"CharacterPieceItemId,omitempty"`
	CharacterPieceItemAmount int32                  `protobuf:"varint,23,opt,name=CharacterPieceItemAmount,proto3" json:"CharacterPieceItemAmount,omitempty"`
	CombineRecipeId          int64                  `protobuf:"varint,24,opt,name=CombineRecipeId,proto3" json:"CombineRecipeId,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CharacterExcelTable) Reset() {
	*x = CharacterExcelTable{}
	mi := &file_excel_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterExcelTable) ProtoMessage() {}

func (x *CharacterExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterExcelTable.ProtoReflect.Descriptor instead.
func (*CharacterExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{3}
}

func (x *CharacterExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharacterExcelTable) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

func (x *CharacterExcelTable) GetCostumeGroupId() int64 {
	if x != nil {
		return x.CostumeGroupId
	}
	return 0
}

func (x *CharacterExcelTable) GetIsPlayable() bool {
	if x != nil {
		return x.IsPlayable
	}
	return false
}

func (x *CharacterExcelTable) GetProductionStep_() string {
	if x != nil {
		return x.ProductionStep_
	}
	return ""
}

func (x *CharacterExcelTable) GetCollectionVisible() bool {
	if x != nil {
		return x.CollectionVisible
	}
	return false
}

func (x *CharacterExcelTable) GetIsPlayableCharacter() bool {
	if x != nil {
		return x.IsPlayableCharacter
	}
	return false
}

func (x *CharacterExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *CharacterExcelTable) GetRarity_() string {
	if x != nil {
		return x.Rarity_
	}
	return ""
}

func (x *CharacterExcelTable) GetIsNPC() bool {
	if x != nil {
		return x.IsNPC
	}
	return false
}

func (x *CharacterExcelTable) GetDefaultStarGrade() int32 {
	if x != nil {
		return x.DefaultStarGrade
	}
	return 0
}

func (x *CharacterExcelTable) GetMaxStarGrade() int32 {
	if x != nil {
		return x.MaxStarGrade
	}
	return 0
}

func (x *CharacterExcelTable) GetJumpable() bool {
	if x != nil {
		return x.Jumpable
	}
	return false
}

func (x *CharacterExcelTable) GetPersonalityId() int32 {
	if x != nil {
		return x.PersonalityId
	}
	return 0
}

func (x *CharacterExcelTable) GetCharacterAIId() int32 {
	if x != nil {
		return x.CharacterAIId
	}
	return 0
}

func (x *CharacterExcelTable) GetScenarioCharacter() string {
	if x != nil {
		return x.ScenarioCharacter
	}
	return ""
}

func (x *CharacterExcelTable) GetFavorLevelupType() int32 {
	if x != nil {
		return x.FavorLevelupType
	}
	return 0
}

func (x *CharacterExcelTable) GetEquipmentSlot() []string {
	if x != nil {
		return x.EquipmentSlot
	}
	return nil
}

func (x *CharacterExcelTable) GetHpBarHeight() float32 {
	if x != nil {
		return x.HpBarHeight
	}
	return 0
}

func (x *CharacterExcelTable) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CharacterExcelTable) GetSecretStoneItemId() int64 {
	if x != nil {
		return x.SecretStoneItemId
	}
	return 0
}

func (x *CharacterExcelTable) GetSecretStoneItemAmount() int32 {
	if x != nil {
		return x.SecretStoneItemAmount
	}
	return 0
}

func (x *CharacterExcelTable) GetCharacterPieceItemId() int64 {
	if x != nil {
		return x.CharacterPieceItemId
	}
	return 0
}

func (x *CharacterExcelTable) GetCharacterPieceItemAmount() int32 {
	if x != nil {
		return x.CharacterPieceItemAmount
	}
	return 0
}

func (x *CharacterExcelTable) GetCombineRecipeId() int64 {
	if x != nil {
		return x.CombineRecipeId
	}
	return 0
}

type DefaultFurnitureExcelTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PositionX     float32                `protobuf:"fixed32,2,opt,name=PositionX,proto3" json:"PositionX,omitempty"`
	PositionY     float32                `protobuf:"fixed32,3,opt,name=PositionY,proto3" json:"PositionY,omitempty"`
	Rotation      float32                `protobuf:"fixed32,4,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	Location      string                 `protobuf:"bytes,5,opt,name=Location,proto3" json:"Location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultFurnitureExcelTable) Reset() {
	*x = DefaultFurnitureExcelTable{}
	mi := &file_excel_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultFurnitureExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultFurnitureExcelTable) ProtoMessage() {}

func (x *DefaultFurnitureExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultFurnitureExcelTable.ProtoReflect.Descriptor instead.
func (*DefaultFurnitureExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{4}
}

func (x *DefaultFurnitureExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetPositionX() float32 {
	if x != nil {
		return x.PositionX
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetPositionY() float32 {
	if x != nil {
		return x.PositionY
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetRotation() float32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type DefaultEchelonExcelTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EchlonId      int32                  `protobuf:"varint,1,opt,name=EchlonId,proto3" json:"EchlonId,omitempty"`
	LeaderId      int64                  `protobuf:"varint,2,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	MainId        []int64                `protobuf:"varint,3,rep,packed,name=MainId,proto3" json:"MainId,omitempty"`
	SupportId     []int64                `protobuf:"varint,4,rep,packed,name=SupportId,proto3" json:"SupportId,omitempty"`
	TssId         int64                  `protobuf:"varint,5,opt,name=TssId,proto3" json:"TssId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultEchelonExcelTable) Reset() {
	*x = DefaultEchelonExcelTable{}
	mi := &file_excel_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultEchelonExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultEchelonExcelTable) ProtoMessage() {}

func (x *DefaultEchelonExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultEchelonExcelTable.ProtoReflect.Descriptor instead.
func (*DefaultEchelonExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{5}
}

func (x *DefaultEchelonExcelTable) GetEchlonId() int32 {
	if x != nil {
		return x.EchlonId
	}
	return 0
}

func (x *DefaultEchelonExcelTable) GetLeaderId() int64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *DefaultEchelonExcelTable) GetMainId() []int64 {
	if x != nil {
		return x.MainId
	}
	return nil
}

func (x *DefaultEchelonExcelTable) GetSupportId() []int64 {
	if x != nil {
		return x.SupportId
	}
	return nil
}

func (x *DefaultEchelonExcelTable) GetTssId() int64 {
	if x != nil {
		return x.TssId
	}
	return 0
}

type ShopExcelTable struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Id                           int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	LocalizeEtcId                int64                  `protobuf:"varint,2,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	CategoryType                 string                 `protobuf:"bytes,3,opt,name=CategoryType,proto3" json:"CategoryType,omitempty"`
	IsLegacy                     bool                   `protobuf:"varint,4,opt,name=IsLegacy,proto3" json:"IsLegacy,omitempty"`
	GoodsId                      []int64                `protobuf:"varint,5,rep,packed,name=GoodsId,proto3" json:"GoodsId,omitempty"`
	DisplayOrder                 int64                  `protobuf:"varint,6,opt,name=DisplayOrder,proto3" json:"DisplayOrder,omitempty"`
	SalePeriodFrom               string                 `protobuf:"bytes,7,opt,name=SalePeriodFrom,proto3" json:"SalePeriodFrom,omitempty"`
	SalePeriodTo                 string                 `protobuf:"bytes,8,opt,name=SalePeriodTo,proto3" json:"SalePeriodTo,omitempty"`
	PurchaseCooltimeMin          int64                  `protobuf:"varint,9,opt,name=PurchaseCooltimeMin,proto3" json:"PurchaseCooltimeMin,omitempty"`
	PurchaseCountLimit           int64                  `protobuf:"varint,10,opt,name=PurchaseCountLimit,proto3" json:"PurchaseCountLimit,omitempty"`
	PurchaseCountResetType_      string                 `protobuf:"bytes,11,opt,name=PurchaseCountResetType_,json=PurchaseCountResetType,proto3" json:"PurchaseCountResetType_,omitempty"`
	BuyReportEventName           string                 `protobuf:"bytes,12,opt,name=BuyReportEventName,proto3" json:"BuyReportEventName,omitempty"`
	RestrictBuyWhenInventoryFull bool                   `protobuf:"varint,13,opt,name=RestrictBuyWhenInventoryFull,proto3" json:"RestrictBuyWhenInventoryFull,omitempty"`
	DisplayTag                   string                 `protobuf:"bytes,14,opt,name=DisplayTag,proto3" json:"DisplayTag,omitempty"`
	ShopUpdateGroupId            int64                  `protobuf:"varint,15,opt,name=ShopUpdateGroupId,proto3" json:"ShopUpdateGroupId,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ShopExcelTable) Reset() {
	*x = ShopExcelTable{}
	mi := &file_excel_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopExcelTable) ProtoMessage() {}

func (x *ShopExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopExcelTable.ProtoReflect.Descriptor instead.
func (*ShopExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{6}
}

func (x *ShopExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShopExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *ShopExcelTable) GetCategoryType() string {
	if x != nil {
		return x.CategoryType
	}
	return ""
}

func (x *ShopExcelTable) GetIsLegacy() bool {
	if x != nil {
		return x.IsLegacy
	}
	return false
}

func (x *ShopExcelTable) GetGoodsId() []int64 {
	if x != nil {
		return x.GoodsId
	}
	return nil
}

func (x *ShopExcelTable) GetDisplayOrder() int64 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *ShopExcelTable) GetSalePeriodFrom() string {
	if x != nil {
		return x.SalePeriodFrom
	}
	return ""
}

func (x *ShopExcelTable) GetSalePeriodTo() string {
	if x != nil {
		return x.SalePeriodTo
	}
	return ""
}

func (x *ShopExcelTable) GetPurchaseCooltimeMin() int64 {
	if x != nil {
		return x.PurchaseCooltimeMin
	}
	return 0
}

func (x *ShopExcelTable) GetPurchaseCountLimit() int64 {
	if x != nil {
		return x.PurchaseCountLimit
	}
	return 0
}

func (x *ShopExcelTable) GetPurchaseCountResetType_() string {
	if x != nil {
		return x.PurchaseCountResetType_
	}
	return ""
}

func (x *ShopExcelTable) GetBuyReportEventName() string {
	if x != nil {
		return x.BuyReportEventName
	}
	return ""
}

func (x *ShopExcelTable) GetRestrictBuyWhenInventoryFull() bool {
	if x != nil {
		return x.RestrictBuyWhenInventoryFull
	}
	return false
}

func (x *ShopExcelTable) GetDisplayTag() string {
	if x != nil {
		return x.DisplayTag
	}
	return ""
}

func (x *ShopExcelTable) GetShopUpdateGroupId() int64 {
	if x != nil {
		return x.ShopUpdateGroupId
	}
	return 0
}

type ShopInfoExcelTable struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CategoryType          string                 `protobuf:"bytes,1,opt,name=CategoryType,proto3" json:"CategoryType,omitempty"`
	IsRefresh             bool                   `protobuf:"varint,2,opt,name=IsRefresh,proto3" json:"IsRefresh,omitempty"`
	IsSoldOutDimmed       bool                   `protobuf:"varint,3,opt,name=IsSoldOutDimmed,proto3" json:"IsSoldOutDimmed,omitempty"`
	CostParcelType        []string               `protobuf:"bytes,4,rep,name=CostParcelType,proto3" json:"CostParcelType,omitempty"`
	CostParcelId          []int64                `protobuf:"varint,5,rep,packed,name=CostParcelId,proto3" json:"CostParcelId,omitempty"`
	AutoRefreshCoolTime   int64                  `protobuf:"varint,6,opt,name=AutoRefreshCoolTime,proto3" json:"AutoRefreshCoolTime,omitempty"`
	RefreshAbleCount      int64                  `protobuf:"varint,7,opt,name=RefreshAbleCount,proto3" json:"RefreshAbleCount,omitempty"`
	GoodsId               []int64                `protobuf:"varint,8,rep,packed,name=GoodsId,proto3" json:"GoodsId,omitempty"`
	OpenPeriodFrom        string                 `protobuf:"bytes,9,opt,name=OpenPeriodFrom,proto3" json:"OpenPeriodFrom,omitempty"`
	OpenPeriodTo          string                 `protobuf:"bytes,10,opt,name=OpenPeriodTo,proto3" json:"OpenPeriodTo,omitempty"`
	ShopProductUpdateTime string                 `protobuf:"bytes,11,opt,name=ShopProductUpdateTime,proto3" json:"ShopProductUpdateTime,omitempty"`
	DisplayParcelType     string                 `protobuf:"bytes,12,opt,name=DisplayParcelType,proto3" json:"DisplayParcelType,omitempty"`
	DisplayParcelId       int64                  `protobuf:"varint,13,opt,name=DisplayParcelId,proto3" json:"DisplayParcelId,omitempty"`
	IsShopVisible         bool                   `protobuf:"varint,14,opt,name=IsShopVisible,proto3" json:"IsShopVisible,omitempty"`
	DisplayOrder          int64                  `protobuf:"varint,15,opt,name=DisplayOrder,proto3" json:"DisplayOrder,omitempty"`
	ShopUpdateDate        int64                  `protobuf:"varint,16,opt,name=ShopUpdateDate,proto3" json:"ShopUpdateDate,omitempty"`
	ShopUpdateGroupId1    int64                  `protobuf:"varint,17,opt,name=ShopUpdateGroupId1,proto3" json:"ShopUpdateGroupId1,omitempty"`
	ShopUpdateGroupId2    int64                  `protobuf:"varint,18,opt,name=ShopUpdateGroupId2,proto3" json:"ShopUpdateGroupId2,omitempty"`
	ShopUpdateGroupId3    int64                  `protobuf:"varint,19,opt,name=ShopUpdateGroupId3,proto3" json:"ShopUpdateGroupId3,omitempty"`
	ShopUpdateGroupId4    int64                  `protobuf:"varint,20,opt,name=ShopUpdateGroupId4,proto3" json:"ShopUpdateGroupId4,omitempty"`
	ShopUpdateGroupId5    int64                  `protobuf:"varint,21,opt,name=ShopUpdateGroupId5,proto3" json:"ShopUpdateGroupId5,omitempty"`
	ShopUpdateGroupId6    int64                  `protobuf:"varint,22,opt,name=ShopUpdateGroupId6,proto3" json:"ShopUpdateGroupId6,omitempty"`
	ShopUpdateGroupId7    int64                  `protobuf:"varint,23,opt,name=ShopUpdateGroupId7,proto3" json:"ShopUpdateGroupId7,omitempty"`
	ShopUpdateGroupId8    int64                  `protobuf:"varint,24,opt,name=ShopUpdateGroupId8,proto3" json:"ShopUpdateGroupId8,omitempty"`
	ShopUpdateGroupId9    int64                  `protobuf:"varint,25,opt,name=ShopUpdateGroupId9,proto3" json:"ShopUpdateGroupId9,omitempty"`
	ShopUpdateGroupId10   int64                  `protobuf:"varint,26,opt,name=ShopUpdateGroupId10,proto3" json:"ShopUpdateGroupId10,omitempty"`
	ShopUpdateGroupId11   int64                  `protobuf:"varint,27,opt,name=ShopUpdateGroupId11,proto3" json:"ShopUpdateGroupId11,omitempty"`
	ShopUpdateGroupId12   int64                  `protobuf:"varint,28,opt,name=ShopUpdateGroupId12,proto3" json:"ShopUpdateGroupId12,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ShopInfoExcelTable) Reset() {
	*x = ShopInfoExcelTable{}
	mi := &file_excel_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopInfoExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopInfoExcelTable) ProtoMessage() {}

func (x *ShopInfoExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopInfoExcelTable.ProtoReflect.Descriptor instead.
func (*ShopInfoExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{7}
}

func (x *ShopInfoExcelTable) GetCategoryType() string {
	if x != nil {
		return x.CategoryType
	}
	return ""
}

func (x *ShopInfoExcelTable) GetIsRefresh() bool {
	if x != nil {
		return x.IsRefresh
	}
	return false
}

func (x *ShopInfoExcelTable) GetIsSoldOutDimmed() bool {
	if x != nil {
		return x.IsSoldOutDimmed
	}
	return false
}

func (x *ShopInfoExcelTable) GetCostParcelType() []string {
	if x != nil {
		return x.CostParcelType
	}
	return nil
}

func (x *ShopInfoExcelTable) GetCostParcelId() []int64 {
	if x != nil {
		return x.CostParcelId
	}
	return nil
}

func (x *ShopInfoExcelTable) GetAutoRefreshCoolTime() int64 {
	if x != nil {
		return x.AutoRefreshCoolTime
	}
	return 0
}

func (x *ShopInfoExcelTable) GetRefreshAbleCount() int64 {
	if x != nil {
		return x.RefreshAbleCount
	}
	return 0
}

func (x *ShopInfoExcelTable) GetGoodsId() []int64 {
	if x != nil {
		return x.GoodsId
	}
	return nil
}

func (x *ShopInfoExcelTable) GetOpenPeriodFrom() string {
	if x != nil {
		return x.OpenPeriodFrom
	}
	return ""
}

func (x *ShopInfoExcelTable) GetOpenPeriodTo() string {
	if x != nil {
		return x.OpenPeriodTo
	}
	return ""
}

func (x *ShopInfoExcelTable) GetShopProductUpdateTime() string {
	if x != nil {
		return x.ShopProductUpdateTime
	}
	return ""
}

func (x *ShopInfoExcelTable) GetDisplayParcelType() string {
	if x != nil {
		return x.DisplayParcelType
	}
	return ""
}

func (x *ShopInfoExcelTable) GetDisplayParcelId() int64 {
	if x != nil {
		return x.DisplayParcelId
	}
	return 0
}

func (x *ShopInfoExcelTable) GetIsShopVisible() bool {
	if x != nil {
		return x.IsShopVisible
	}
	return false
}

func (x *ShopInfoExcelTable) GetDisplayOrder() int64 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateDate() int64 {
	if x != nil {
		return x.ShopUpdateDate
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId1() int64 {
	if x != nil {
		return x.ShopUpdateGroupId1
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId2() int64 {
	if x != nil {
		return x.ShopUpdateGroupId2
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId3() int64 {
	if x != nil {
		return x.ShopUpdateGroupId3
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId4() int64 {
	if x != nil {
		return x.ShopUpdateGroupId4
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId5() int64 {
	if x != nil {
		return x.ShopUpdateGroupId5
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId6() int64 {
	if x != nil {
		return x.ShopUpdateGroupId6
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId7() int64 {
	if x != nil {
		return x.ShopUpdateGroupId7
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId8() int64 {
	if x != nil {
		return x.ShopUpdateGroupId8
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId9() int64 {
	if x != nil {
		return x.ShopUpdateGroupId9
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId10() int64 {
	if x != nil {
		return x.ShopUpdateGroupId10
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId11() int64 {
	if x != nil {
		return x.ShopUpdateGroupId11
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId12() int64 {
	if x != nil {
		return x.ShopUpdateGroupId12
	}
	return 0
}

var File_excel_server_proto protoreflect.FileDescriptor

var file_excel_server_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x04, 0x0a, 0x05,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x1a,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x4c, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x61, 0x0a,
	0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x5b, 0x0a, 0x18, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x63, 0x68, 0x65, 0x6c,
	0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x18, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x63, 0x68, 0x65,
	0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x0e, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68,
	0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x53, 0x68,
	0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x66, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x22, 0xce, 0x03, 0x0a, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x78, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xd1, 0x07, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x44, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x44, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x75,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4e, 0x50, 0x43,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x50, 0x43, 0x12, 0x2a, 0x0a,
	0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78,
	0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4a, 0x75, 0x6d, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x4a, 0x75, 0x6d, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x49, 0x49, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x41, 0x49, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x70, 0x42, 0x61, 0x72, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x48, 0x70, 0x42, 0x61,
	0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x50, 0x69, 0x65, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x50, 0x69, 0x65, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x58, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x59, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x59, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a,
	0x18, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x63, 0x68,
	0x6c, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x63, 0x68,
	0x6c, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x73, 0x73, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x73, 0x73, 0x49, 0x64, 0x22, 0xed, 0x04,
	0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x61,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f,
	0x12, 0x30, 0x0a, 0x13, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6f, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x37, 0x0a, 0x17, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x75, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x75, 0x79, 0x57, 0x68, 0x65, 0x6e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x75, 0x79, 0x57, 0x68,
	0x65, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67, 0x12,
	0x2c, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xd6, 0x09,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x53, 0x6f, 0x6c, 0x64,
	0x4f, 0x75, 0x74, 0x44, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x49, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x44, 0x69, 0x6d, 0x6d, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6f, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x41, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f,
	0x12, 0x34, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x70, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x70, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x31,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x32,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x33, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x33,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x34,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x35, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x35,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x36, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x36,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x37, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x37,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x38, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x38,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x39, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x39,
	0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x30, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x53,
	0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x31, 0x30, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x31, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x31, 0x31, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x31, 0x32, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_excel_server_proto_rawDescOnce sync.Once
	file_excel_server_proto_rawDescData = file_excel_server_proto_rawDesc
)

func file_excel_server_proto_rawDescGZIP() []byte {
	file_excel_server_proto_rawDescOnce.Do(func() {
		file_excel_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_excel_server_proto_rawDescData)
	})
	return file_excel_server_proto_rawDescData
}

var file_excel_server_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_excel_server_proto_goTypes = []any{
	(*Excel)(nil),                      // 0: proto.Excel
	(*CafeInfoExcelTableInfo)(nil),     // 1: proto.CafeInfoExcelTableInfo
	(*DefaultCharacterExcelTable)(nil), // 2: proto.DefaultCharacterExcelTable
	(*CharacterExcelTable)(nil),        // 3: proto.CharacterExcelTable
	(*DefaultFurnitureExcelTable)(nil), // 4: proto.DefaultFurnitureExcelTable
	(*DefaultEchelonExcelTable)(nil),   // 5: proto.DefaultEchelonExcelTable
	(*ShopExcelTable)(nil),             // 6: proto.ShopExcelTable
	(*ShopInfoExcelTable)(nil),         // 7: proto.ShopInfoExcelTable
}
var file_excel_server_proto_depIdxs = []int32{
	1, // 0: proto.Excel.CafeInfoExcelTableInfo:type_name -> proto.CafeInfoExcelTableInfo
	2, // 1: proto.Excel.DefaultCharacterExcelTable:type_name -> proto.DefaultCharacterExcelTable
	3, // 2: proto.Excel.CharacterExcelTable:type_name -> proto.CharacterExcelTable
	4, // 3: proto.Excel.DefaultFurnitureExcelTable:type_name -> proto.DefaultFurnitureExcelTable
	5, // 4: proto.Excel.DefaultEchelonExcelTable:type_name -> proto.DefaultEchelonExcelTable
	6, // 5: proto.Excel.ShopExcelTable:type_name -> proto.ShopExcelTable
	7, // 6: proto.Excel.ShopInfoExcelTable:type_name -> proto.ShopInfoExcelTable
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_excel_server_proto_init() }
func file_excel_server_proto_init() {
	if File_excel_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_excel_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_excel_server_proto_goTypes,
		DependencyIndexes: file_excel_server_proto_depIdxs,
		MessageInfos:      file_excel_server_proto_msgTypes,
	}.Build()
	File_excel_server_proto = out.File
	file_excel_server_proto_rawDesc = nil
	file_excel_server_proto_goTypes = nil
	file_excel_server_proto_depIdxs = nil
}
