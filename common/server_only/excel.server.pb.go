// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.26.0
// source: excel.server.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Excel struct {
	state                          protoimpl.MessageState            `protogen:"open.v1"`
	CafeInfoExcelTableInfo         []*CafeInfoExcelTableInfo         `protobuf:"bytes,1,rep,name=CafeInfoExcelTableInfo,proto3" json:"CafeInfoExcelTableInfo,omitempty"`                  // 咖啡馆信息
	DefaultCharacterExcelTable     []*DefaultCharacterExcelTable     `protobuf:"bytes,2,rep,name=DefaultCharacterExcelTable,proto3" json:"DefaultCharacterExcelTable,omitempty"`          // 默认角色信息
	CharacterExcelTable            []*CharacterExcelTable            `protobuf:"bytes,3,rep,name=CharacterExcelTable,proto3" json:"CharacterExcelTable,omitempty"`                        // 角色基本数据
	DefaultFurnitureExcelTable     []*DefaultFurnitureExcelTable     `protobuf:"bytes,4,rep,name=DefaultFurnitureExcelTable,proto3" json:"DefaultFurnitureExcelTable,omitempty"`          // 默认家具
	DefaultEchelonExcelTable       []*DefaultEchelonExcelTable       `protobuf:"bytes,5,rep,name=DefaultEchelonExcelTable,proto3" json:"DefaultEchelonExcelTable,omitempty"`              // 默认队伍
	ShopExcelTable                 []*ShopExcelTable                 `protobuf:"bytes,6,rep,name=ShopExcelTable,proto3" json:"ShopExcelTable,omitempty"`                                  // 商店数据
	ShopInfoExcelTable             []*ShopInfoExcelTable             `protobuf:"bytes,7,rep,name=ShopInfoExcelTable,proto3" json:"ShopInfoExcelTable,omitempty"`                          // 商店配置
	ItemExcelTable                 []*ItemExcelTable                 `protobuf:"bytes,8,rep,name=ItemExcelTable,proto3" json:"ItemExcelTable,omitempty"`                                  // 物品配置
	EmblemExcel                    []*EmblemExcel                    `protobuf:"bytes,9,rep,name=EmblemExcel,proto3" json:"EmblemExcel,omitempty"`                                        // 称号配置
	AcademyFavorScheduleExcelTable []*AcademyFavorScheduleExcelTable `protobuf:"bytes,10,rep,name=AcademyFavorScheduleExcelTable,proto3" json:"AcademyFavorScheduleExcelTable,omitempty"` // MomoTalk剧情配置
	AcademyMessangerExcelTable     []*AcademyMessangerExcelTable     `protobuf:"bytes,11,rep,name=AcademyMessangerExcelTable,proto3" json:"AcademyMessangerExcelTable,omitempty"`         // MomoTalk对话配置
	GuideMissionExcelTable         []*GuideMissionExcelTable         `protobuf:"bytes,12,rep,name=GuideMissionExcelTable,proto3" json:"GuideMissionExcelTable,omitempty"`                 // 成就配置
	ScenarioModeExcel              []*ScenarioModeExcel              `protobuf:"bytes,13,rep,name=ScenarioModeExcel,proto3" json:"ScenarioModeExcel,omitempty"`                           // 剧情配置
	ScenarioModeRewardExcel        []*ScenarioModeRewardExcel        `protobuf:"bytes,14,rep,name=ScenarioModeRewardExcel,proto3" json:"ScenarioModeRewardExcel,omitempty"`               // 剧情奖励配置
	CharacterWeaponExcelTable      []*CharacterWeaponExcelTable      `protobuf:"bytes,15,rep,name=CharacterWeaponExcelTable,proto3" json:"CharacterWeaponExcelTable,omitempty"`           // 角色武器配置
	CharacterSkillListExcelTable   []*CharacterSkillListExcelTable   `protobuf:"bytes,16,rep,name=CharacterSkillListExcelTable,proto3" json:"CharacterSkillListExcelTable,omitempty"`     // 角色技能配置表
	SkillExcelTable                []*SkillExcelTable                `protobuf:"bytes,17,rep,name=SkillExcelTable,proto3" json:"SkillExcelTable,omitempty"`                               // 全部技能配置
	RecipeIngredientExcelTable     []*RecipeIngredientExcelTable     `protobuf:"bytes,18,rep,name=RecipeIngredientExcelTable,proto3" json:"RecipeIngredientExcelTable,omitempty"`         // 材料配置
	CampaignStageExcelTable        []*CampaignStageExcelTable        `protobuf:"bytes,19,rep,name=CampaignStageExcelTable,proto3" json:"CampaignStageExcelTable,omitempty"`               // 任务关卡信息配置
	CampaignUnitExcelTable         []*CampaignUnitExcelTable         `protobuf:"bytes,20,rep,name=CampaignUnitExcelTable,proto3" json:"CampaignUnitExcelTable,omitempty"`                 // 任务关卡怪物信息
	WeekDungeonExcelTable          []*WeekDungeonExcelTable          `protobuf:"bytes,21,rep,name=WeekDungeonExcelTable,proto3" json:"WeekDungeonExcelTable,omitempty"`                   // 悬赏通缉关卡信息
	SchoolDungeonStageExcel        []*SchoolDungeonStageExcel        `protobuf:"bytes,22,rep,name=SchoolDungeonStageExcel,proto3" json:"SchoolDungeonStageExcel,omitempty"`               // 学院交流会关卡信息
	AccountLevelExcel              []*AccountLevelExcel              `protobuf:"bytes,23,rep,name=AccountLevelExcel,proto3" json:"AccountLevelExcel,omitempty"`                           // 账号等级配置
	EquipmentExcelTable            []*EquipmentExcelTable            `protobuf:"bytes,24,rep,name=EquipmentExcelTable,proto3" json:"EquipmentExcelTable,omitempty"`                       // 装备配置表
	EquipmentStatExcelTable        []*EquipmentStatExcelTable        `protobuf:"bytes,25,rep,name=EquipmentStatExcelTable,proto3" json:"EquipmentStatExcelTable,omitempty"`               // 装备详情表
	EquipmentLevelExcelTable       []*EquipmentLevelExcelTable       `protobuf:"bytes,26,rep,name=EquipmentLevelExcelTable,proto3" json:"EquipmentLevelExcelTable,omitempty"`             // 装备等级配置
	FurnitureExcelTable            []*FurnitureExcelTable            `protobuf:"bytes,27,rep,name=FurnitureExcelTable,proto3" json:"FurnitureExcelTable,omitempty"`                       // 家具配置
	CafeRankExcelTable             []*CafeRankExcelTable             `protobuf:"bytes,28,rep,name=CafeRankExcelTable,proto3" json:"CafeRankExcelTable,omitempty"`                         // 咖啡厅等级配置
	CafeProductionExcelTable       []*CafeProductionExcelTable       `protobuf:"bytes,29,rep,name=CafeProductionExcelTable,proto3" json:"CafeProductionExcelTable,omitempty"`             // 咖啡厅生产配置
	IdCardBackgroundExcel          []*IdCardBackgroundExcel          `protobuf:"bytes,30,rep,name=IdCardBackgroundExcel,proto3" json:"IdCardBackgroundExcel,omitempty"`                   // 账号背景配置
	WeekDungeonRewardExcelTable    []*WeekDungeonRewardExcelTable    `protobuf:"bytes,31,rep,name=WeekDungeonRewardExcelTable,proto3" json:"WeekDungeonRewardExcelTable,omitempty"`       // 悬赏通缉关卡奖励配置
	CharacterLevelExcelTable       []*CharacterLevelExcelTable       `protobuf:"bytes,32,rep,name=CharacterLevelExcelTable,proto3" json:"CharacterLevelExcelTable,omitempty"`             // 角色等级配置
	CharacterGearExcel             []*CharacterGearExcel             `protobuf:"bytes,33,rep,name=CharacterGearExcel,proto3" json:"CharacterGearExcel,omitempty"`                         // 角色爱用品配置
	CharacterPotentialExcel        []*CharacterPotentialExcel        `protobuf:"bytes,34,rep,name=CharacterPotentialExcel,proto3" json:"CharacterPotentialExcel,omitempty"`               // 角色能力解放配置
	CharacterPotentialStatExcel    []*CharacterPotentialStatExcel    `protobuf:"bytes,35,rep,name=CharacterPotentialStatExcel,proto3" json:"CharacterPotentialStatExcel,omitempty"`       // 角色能力解放升级配置
	AcademyTicketExcelTable        []*AcademyTicketExcelTable        `protobuf:"bytes,36,rep,name=AcademyTicketExcelTable,proto3" json:"AcademyTicketExcelTable,omitempty"`               // 课程表最大票信息
	AcademyLocationExcelTable      []*AcademyLocationExcelTable      `protobuf:"bytes,37,rep,name=AcademyLocationExcelTable,proto3" json:"AcademyLocationExcelTable,omitempty"`           // 课程表学院信息
	AcademyZoneExcelTable          []*AcademyZoneExcelTable          `protobuf:"bytes,38,rep,name=AcademyZoneExcelTable,proto3" json:"AcademyZoneExcelTable,omitempty"`                   // 课程表教室信息
	AcademyLocationRankExcelTable  []*AcademyLocationRankExcelTable  `protobuf:"bytes,39,rep,name=AcademyLocationRankExcelTable,proto3" json:"AcademyLocationRankExcelTable,omitempty"`   // 课程表等级配置
	AcademyRewardExcelTable        []*AcademyRewardExcelTable        `protobuf:"bytes,40,rep,name=AcademyRewardExcelTable,proto3" json:"AcademyRewardExcelTable,omitempty"`               // 课程表奖励配置
	SchoolDungeonRewardExcel       []*SchoolDungeonRewardExcel       `protobuf:"bytes,41,rep,name=SchoolDungeonRewardExcel,proto3" json:"SchoolDungeonRewardExcel,omitempty"`             // 学院交流会奖励配置
	RaidSeasonManageExcelTable     []*RaidSeasonManageExcelTable     `protobuf:"bytes,42,rep,name=RaidSeasonManageExcelTable,proto3" json:"RaidSeasonManageExcelTable,omitempty"`         // 总力战赛季配置
	RaidRankingRewardExcelTable    []*RaidRankingRewardExcelTable    `protobuf:"bytes,43,rep,name=RaidRankingRewardExcelTable,proto3" json:"RaidRankingRewardExcelTable,omitempty"`       // 总力战结算奖励配置
	RaidStageExcelTable            []*RaidStageExcelTable            `protobuf:"bytes,44,rep,name=RaidStageExcelTable,proto3" json:"RaidStageExcelTable,omitempty"`                       // 总力战关卡配置
	CharacterStatExcelTable        []*CharacterStatExcelTable        `protobuf:"bytes,45,rep,name=CharacterStatExcelTable,proto3" json:"CharacterStatExcelTable,omitempty"`               // 实体属性配置
	RaidStageRewardExcelTable      []*RaidStageRewardExcelTable      `protobuf:"bytes,46,rep,name=RaidStageRewardExcelTable,proto3" json:"RaidStageRewardExcelTable,omitempty"`           // 总力战关卡通过奖励配置
	MissionExcelTable              []*MissionExcelTable              `protobuf:"bytes,47,rep,name=MissionExcelTable,proto3" json:"MissionExcelTable,omitempty"`                           // 任务配置
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *Excel) Reset() {
	*x = Excel{}
	mi := &file_excel_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Excel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Excel) ProtoMessage() {}

func (x *Excel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Excel.ProtoReflect.Descriptor instead.
func (*Excel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{0}
}

func (x *Excel) GetCafeInfoExcelTableInfo() []*CafeInfoExcelTableInfo {
	if x != nil {
		return x.CafeInfoExcelTableInfo
	}
	return nil
}

func (x *Excel) GetDefaultCharacterExcelTable() []*DefaultCharacterExcelTable {
	if x != nil {
		return x.DefaultCharacterExcelTable
	}
	return nil
}

func (x *Excel) GetCharacterExcelTable() []*CharacterExcelTable {
	if x != nil {
		return x.CharacterExcelTable
	}
	return nil
}

func (x *Excel) GetDefaultFurnitureExcelTable() []*DefaultFurnitureExcelTable {
	if x != nil {
		return x.DefaultFurnitureExcelTable
	}
	return nil
}

func (x *Excel) GetDefaultEchelonExcelTable() []*DefaultEchelonExcelTable {
	if x != nil {
		return x.DefaultEchelonExcelTable
	}
	return nil
}

func (x *Excel) GetShopExcelTable() []*ShopExcelTable {
	if x != nil {
		return x.ShopExcelTable
	}
	return nil
}

func (x *Excel) GetShopInfoExcelTable() []*ShopInfoExcelTable {
	if x != nil {
		return x.ShopInfoExcelTable
	}
	return nil
}

func (x *Excel) GetItemExcelTable() []*ItemExcelTable {
	if x != nil {
		return x.ItemExcelTable
	}
	return nil
}

func (x *Excel) GetEmblemExcel() []*EmblemExcel {
	if x != nil {
		return x.EmblemExcel
	}
	return nil
}

func (x *Excel) GetAcademyFavorScheduleExcelTable() []*AcademyFavorScheduleExcelTable {
	if x != nil {
		return x.AcademyFavorScheduleExcelTable
	}
	return nil
}

func (x *Excel) GetAcademyMessangerExcelTable() []*AcademyMessangerExcelTable {
	if x != nil {
		return x.AcademyMessangerExcelTable
	}
	return nil
}

func (x *Excel) GetGuideMissionExcelTable() []*GuideMissionExcelTable {
	if x != nil {
		return x.GuideMissionExcelTable
	}
	return nil
}

func (x *Excel) GetScenarioModeExcel() []*ScenarioModeExcel {
	if x != nil {
		return x.ScenarioModeExcel
	}
	return nil
}

func (x *Excel) GetScenarioModeRewardExcel() []*ScenarioModeRewardExcel {
	if x != nil {
		return x.ScenarioModeRewardExcel
	}
	return nil
}

func (x *Excel) GetCharacterWeaponExcelTable() []*CharacterWeaponExcelTable {
	if x != nil {
		return x.CharacterWeaponExcelTable
	}
	return nil
}

func (x *Excel) GetCharacterSkillListExcelTable() []*CharacterSkillListExcelTable {
	if x != nil {
		return x.CharacterSkillListExcelTable
	}
	return nil
}

func (x *Excel) GetSkillExcelTable() []*SkillExcelTable {
	if x != nil {
		return x.SkillExcelTable
	}
	return nil
}

func (x *Excel) GetRecipeIngredientExcelTable() []*RecipeIngredientExcelTable {
	if x != nil {
		return x.RecipeIngredientExcelTable
	}
	return nil
}

func (x *Excel) GetCampaignStageExcelTable() []*CampaignStageExcelTable {
	if x != nil {
		return x.CampaignStageExcelTable
	}
	return nil
}

func (x *Excel) GetCampaignUnitExcelTable() []*CampaignUnitExcelTable {
	if x != nil {
		return x.CampaignUnitExcelTable
	}
	return nil
}

func (x *Excel) GetWeekDungeonExcelTable() []*WeekDungeonExcelTable {
	if x != nil {
		return x.WeekDungeonExcelTable
	}
	return nil
}

func (x *Excel) GetSchoolDungeonStageExcel() []*SchoolDungeonStageExcel {
	if x != nil {
		return x.SchoolDungeonStageExcel
	}
	return nil
}

func (x *Excel) GetAccountLevelExcel() []*AccountLevelExcel {
	if x != nil {
		return x.AccountLevelExcel
	}
	return nil
}

func (x *Excel) GetEquipmentExcelTable() []*EquipmentExcelTable {
	if x != nil {
		return x.EquipmentExcelTable
	}
	return nil
}

func (x *Excel) GetEquipmentStatExcelTable() []*EquipmentStatExcelTable {
	if x != nil {
		return x.EquipmentStatExcelTable
	}
	return nil
}

func (x *Excel) GetEquipmentLevelExcelTable() []*EquipmentLevelExcelTable {
	if x != nil {
		return x.EquipmentLevelExcelTable
	}
	return nil
}

func (x *Excel) GetFurnitureExcelTable() []*FurnitureExcelTable {
	if x != nil {
		return x.FurnitureExcelTable
	}
	return nil
}

func (x *Excel) GetCafeRankExcelTable() []*CafeRankExcelTable {
	if x != nil {
		return x.CafeRankExcelTable
	}
	return nil
}

func (x *Excel) GetCafeProductionExcelTable() []*CafeProductionExcelTable {
	if x != nil {
		return x.CafeProductionExcelTable
	}
	return nil
}

func (x *Excel) GetIdCardBackgroundExcel() []*IdCardBackgroundExcel {
	if x != nil {
		return x.IdCardBackgroundExcel
	}
	return nil
}

func (x *Excel) GetWeekDungeonRewardExcelTable() []*WeekDungeonRewardExcelTable {
	if x != nil {
		return x.WeekDungeonRewardExcelTable
	}
	return nil
}

func (x *Excel) GetCharacterLevelExcelTable() []*CharacterLevelExcelTable {
	if x != nil {
		return x.CharacterLevelExcelTable
	}
	return nil
}

func (x *Excel) GetCharacterGearExcel() []*CharacterGearExcel {
	if x != nil {
		return x.CharacterGearExcel
	}
	return nil
}

func (x *Excel) GetCharacterPotentialExcel() []*CharacterPotentialExcel {
	if x != nil {
		return x.CharacterPotentialExcel
	}
	return nil
}

func (x *Excel) GetCharacterPotentialStatExcel() []*CharacterPotentialStatExcel {
	if x != nil {
		return x.CharacterPotentialStatExcel
	}
	return nil
}

func (x *Excel) GetAcademyTicketExcelTable() []*AcademyTicketExcelTable {
	if x != nil {
		return x.AcademyTicketExcelTable
	}
	return nil
}

func (x *Excel) GetAcademyLocationExcelTable() []*AcademyLocationExcelTable {
	if x != nil {
		return x.AcademyLocationExcelTable
	}
	return nil
}

func (x *Excel) GetAcademyZoneExcelTable() []*AcademyZoneExcelTable {
	if x != nil {
		return x.AcademyZoneExcelTable
	}
	return nil
}

func (x *Excel) GetAcademyLocationRankExcelTable() []*AcademyLocationRankExcelTable {
	if x != nil {
		return x.AcademyLocationRankExcelTable
	}
	return nil
}

func (x *Excel) GetAcademyRewardExcelTable() []*AcademyRewardExcelTable {
	if x != nil {
		return x.AcademyRewardExcelTable
	}
	return nil
}

func (x *Excel) GetSchoolDungeonRewardExcel() []*SchoolDungeonRewardExcel {
	if x != nil {
		return x.SchoolDungeonRewardExcel
	}
	return nil
}

func (x *Excel) GetRaidSeasonManageExcelTable() []*RaidSeasonManageExcelTable {
	if x != nil {
		return x.RaidSeasonManageExcelTable
	}
	return nil
}

func (x *Excel) GetRaidRankingRewardExcelTable() []*RaidRankingRewardExcelTable {
	if x != nil {
		return x.RaidRankingRewardExcelTable
	}
	return nil
}

func (x *Excel) GetRaidStageExcelTable() []*RaidStageExcelTable {
	if x != nil {
		return x.RaidStageExcelTable
	}
	return nil
}

func (x *Excel) GetCharacterStatExcelTable() []*CharacterStatExcelTable {
	if x != nil {
		return x.CharacterStatExcelTable
	}
	return nil
}

func (x *Excel) GetRaidStageRewardExcelTable() []*RaidStageRewardExcelTable {
	if x != nil {
		return x.RaidStageRewardExcelTable
	}
	return nil
}

func (x *Excel) GetMissionExcelTable() []*MissionExcelTable {
	if x != nil {
		return x.MissionExcelTable
	}
	return nil
}

type CafeInfoExcelTableInfo struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CafeId                  int64                  `protobuf:"varint,1,opt,name=CafeId,proto3" json:"CafeId,omitempty"`
	IsDefault               bool                   `protobuf:"varint,2,opt,name=IsDefault,proto3" json:"IsDefault,omitempty"`
	OpenConditionCafeId     string                 `protobuf:"bytes,3,opt,name=OpenConditionCafeId,proto3" json:"OpenConditionCafeId,omitempty"`
	OpenConditionCafeInvite string                 `protobuf:"bytes,4,opt,name=OpenConditionCafeInvite,proto3" json:"OpenConditionCafeInvite,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CafeInfoExcelTableInfo) Reset() {
	*x = CafeInfoExcelTableInfo{}
	mi := &file_excel_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeInfoExcelTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeInfoExcelTableInfo) ProtoMessage() {}

func (x *CafeInfoExcelTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeInfoExcelTableInfo.ProtoReflect.Descriptor instead.
func (*CafeInfoExcelTableInfo) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{1}
}

func (x *CafeInfoExcelTableInfo) GetCafeId() int64 {
	if x != nil {
		return x.CafeId
	}
	return 0
}

func (x *CafeInfoExcelTableInfo) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *CafeInfoExcelTableInfo) GetOpenConditionCafeId() string {
	if x != nil {
		return x.OpenConditionCafeId
	}
	return ""
}

func (x *CafeInfoExcelTableInfo) GetOpenConditionCafeInvite() string {
	if x != nil {
		return x.OpenConditionCafeInvite
	}
	return ""
}

type DefaultCharacterExcelTable struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CharacterId            int64                  `protobuf:"varint,1,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`
	FavoriteCharacter      bool                   `protobuf:"varint,2,opt,name=FavoriteCharacter,proto3" json:"FavoriteCharacter,omitempty"`
	Level                  int32                  `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	Exp                    int64                  `protobuf:"varint,4,opt,name=Exp,proto3" json:"Exp,omitempty"`
	FavorExp               int64                  `protobuf:"varint,5,opt,name=FavorExp,proto3" json:"FavorExp,omitempty"`
	FavorRank              int32                  `protobuf:"varint,6,opt,name=FavorRank,proto3" json:"FavorRank,omitempty"`
	StarGrade              int32                  `protobuf:"varint,7,opt,name=StarGrade,proto3" json:"StarGrade,omitempty"`
	ExSkillLevel           int32                  `protobuf:"varint,8,opt,name=ExSkillLevel,proto3" json:"ExSkillLevel,omitempty"`
	PassiveSkillLevel      int32                  `protobuf:"varint,9,opt,name=PassiveSkillLevel,proto3" json:"PassiveSkillLevel,omitempty"`
	ExtraPassiveSkillLevel int32                  `protobuf:"varint,10,opt,name=ExtraPassiveSkillLevel,proto3" json:"ExtraPassiveSkillLevel,omitempty"`
	CommonSkillLevel       int32                  `protobuf:"varint,11,opt,name=CommonSkillLevel,proto3" json:"CommonSkillLevel,omitempty"`
	LeaderSkillLevel       int32                  `protobuf:"varint,12,opt,name=LeaderSkillLevel,proto3" json:"LeaderSkillLevel,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DefaultCharacterExcelTable) Reset() {
	*x = DefaultCharacterExcelTable{}
	mi := &file_excel_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultCharacterExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultCharacterExcelTable) ProtoMessage() {}

func (x *DefaultCharacterExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultCharacterExcelTable.ProtoReflect.Descriptor instead.
func (*DefaultCharacterExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{2}
}

func (x *DefaultCharacterExcelTable) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetFavoriteCharacter() bool {
	if x != nil {
		return x.FavoriteCharacter
	}
	return false
}

func (x *DefaultCharacterExcelTable) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetFavorExp() int64 {
	if x != nil {
		return x.FavorExp
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetFavorRank() int32 {
	if x != nil {
		return x.FavorRank
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetStarGrade() int32 {
	if x != nil {
		return x.StarGrade
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetExSkillLevel() int32 {
	if x != nil {
		return x.ExSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetPassiveSkillLevel() int32 {
	if x != nil {
		return x.PassiveSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetExtraPassiveSkillLevel() int32 {
	if x != nil {
		return x.ExtraPassiveSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetCommonSkillLevel() int32 {
	if x != nil {
		return x.CommonSkillLevel
	}
	return 0
}

func (x *DefaultCharacterExcelTable) GetLeaderSkillLevel() int32 {
	if x != nil {
		return x.LeaderSkillLevel
	}
	return 0
}

type CharacterExcelTable struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DevName                  string                 `protobuf:"bytes,2,opt,name=DevName,proto3" json:"DevName,omitempty"`
	CostumeGroupId           int64                  `protobuf:"varint,3,opt,name=CostumeGroupId,proto3" json:"CostumeGroupId,omitempty"`
	IsPlayable               bool                   `protobuf:"varint,4,opt,name=IsPlayable,proto3" json:"IsPlayable,omitempty"`
	ProductionStep_          string                 `protobuf:"bytes,5,opt,name=ProductionStep_,json=ProductionStep,proto3" json:"ProductionStep_,omitempty"`
	CollectionVisible        bool                   `protobuf:"varint,6,opt,name=CollectionVisible,proto3" json:"CollectionVisible,omitempty"`
	IsPlayableCharacter      bool                   `protobuf:"varint,7,opt,name=IsPlayableCharacter,proto3" json:"IsPlayableCharacter,omitempty"`
	LocalizeEtcId            int64                  `protobuf:"varint,8,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	Rarity_                  string                 `protobuf:"bytes,9,opt,name=Rarity_,json=Rarity,proto3" json:"Rarity_,omitempty"`
	IsNPC                    bool                   `protobuf:"varint,25,opt,name=IsNPC,proto3" json:"IsNPC,omitempty"`
	DefaultStarGrade         int32                  `protobuf:"varint,10,opt,name=DefaultStarGrade,proto3" json:"DefaultStarGrade,omitempty"`
	MaxStarGrade             int32                  `protobuf:"varint,11,opt,name=MaxStarGrade,proto3" json:"MaxStarGrade,omitempty"`
	Jumpable                 bool                   `protobuf:"varint,12,opt,name=Jumpable,proto3" json:"Jumpable,omitempty"`
	PersonalityId            int32                  `protobuf:"varint,13,opt,name=PersonalityId,proto3" json:"PersonalityId,omitempty"`
	CharacterAIId            int32                  `protobuf:"varint,14,opt,name=CharacterAIId,proto3" json:"CharacterAIId,omitempty"`
	ScenarioCharacter        string                 `protobuf:"bytes,15,opt,name=ScenarioCharacter,proto3" json:"ScenarioCharacter,omitempty"`
	FavorLevelupType         int32                  `protobuf:"varint,16,opt,name=FavorLevelupType,proto3" json:"FavorLevelupType,omitempty"`
	EquipmentSlot            []string               `protobuf:"bytes,17,rep,name=EquipmentSlot,proto3" json:"EquipmentSlot,omitempty"`
	HpBarHeight              float32                `protobuf:"fixed32,18,opt,name=HpBarHeight,proto3" json:"HpBarHeight,omitempty"`
	Tags                     []string               `protobuf:"bytes,19,rep,name=Tags,proto3" json:"Tags,omitempty"`
	SecretStoneItemId        int64                  `protobuf:"varint,20,opt,name=SecretStoneItemId,proto3" json:"SecretStoneItemId,omitempty"`
	SecretStoneItemAmount    int32                  `protobuf:"varint,21,opt,name=SecretStoneItemAmount,proto3" json:"SecretStoneItemAmount,omitempty"`
	CharacterPieceItemId     int64                  `protobuf:"varint,22,opt,name=CharacterPieceItemId,proto3" json:"CharacterPieceItemId,omitempty"`
	CharacterPieceItemAmount int32                  `protobuf:"varint,23,opt,name=CharacterPieceItemAmount,proto3" json:"CharacterPieceItemAmount,omitempty"`
	CombineRecipeId          int64                  `protobuf:"varint,24,opt,name=CombineRecipeId,proto3" json:"CombineRecipeId,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CharacterExcelTable) Reset() {
	*x = CharacterExcelTable{}
	mi := &file_excel_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterExcelTable) ProtoMessage() {}

func (x *CharacterExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterExcelTable.ProtoReflect.Descriptor instead.
func (*CharacterExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{3}
}

func (x *CharacterExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharacterExcelTable) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

func (x *CharacterExcelTable) GetCostumeGroupId() int64 {
	if x != nil {
		return x.CostumeGroupId
	}
	return 0
}

func (x *CharacterExcelTable) GetIsPlayable() bool {
	if x != nil {
		return x.IsPlayable
	}
	return false
}

func (x *CharacterExcelTable) GetProductionStep_() string {
	if x != nil {
		return x.ProductionStep_
	}
	return ""
}

func (x *CharacterExcelTable) GetCollectionVisible() bool {
	if x != nil {
		return x.CollectionVisible
	}
	return false
}

func (x *CharacterExcelTable) GetIsPlayableCharacter() bool {
	if x != nil {
		return x.IsPlayableCharacter
	}
	return false
}

func (x *CharacterExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *CharacterExcelTable) GetRarity_() string {
	if x != nil {
		return x.Rarity_
	}
	return ""
}

func (x *CharacterExcelTable) GetIsNPC() bool {
	if x != nil {
		return x.IsNPC
	}
	return false
}

func (x *CharacterExcelTable) GetDefaultStarGrade() int32 {
	if x != nil {
		return x.DefaultStarGrade
	}
	return 0
}

func (x *CharacterExcelTable) GetMaxStarGrade() int32 {
	if x != nil {
		return x.MaxStarGrade
	}
	return 0
}

func (x *CharacterExcelTable) GetJumpable() bool {
	if x != nil {
		return x.Jumpable
	}
	return false
}

func (x *CharacterExcelTable) GetPersonalityId() int32 {
	if x != nil {
		return x.PersonalityId
	}
	return 0
}

func (x *CharacterExcelTable) GetCharacterAIId() int32 {
	if x != nil {
		return x.CharacterAIId
	}
	return 0
}

func (x *CharacterExcelTable) GetScenarioCharacter() string {
	if x != nil {
		return x.ScenarioCharacter
	}
	return ""
}

func (x *CharacterExcelTable) GetFavorLevelupType() int32 {
	if x != nil {
		return x.FavorLevelupType
	}
	return 0
}

func (x *CharacterExcelTable) GetEquipmentSlot() []string {
	if x != nil {
		return x.EquipmentSlot
	}
	return nil
}

func (x *CharacterExcelTable) GetHpBarHeight() float32 {
	if x != nil {
		return x.HpBarHeight
	}
	return 0
}

func (x *CharacterExcelTable) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CharacterExcelTable) GetSecretStoneItemId() int64 {
	if x != nil {
		return x.SecretStoneItemId
	}
	return 0
}

func (x *CharacterExcelTable) GetSecretStoneItemAmount() int32 {
	if x != nil {
		return x.SecretStoneItemAmount
	}
	return 0
}

func (x *CharacterExcelTable) GetCharacterPieceItemId() int64 {
	if x != nil {
		return x.CharacterPieceItemId
	}
	return 0
}

func (x *CharacterExcelTable) GetCharacterPieceItemAmount() int32 {
	if x != nil {
		return x.CharacterPieceItemAmount
	}
	return 0
}

func (x *CharacterExcelTable) GetCombineRecipeId() int64 {
	if x != nil {
		return x.CombineRecipeId
	}
	return 0
}

type DefaultFurnitureExcelTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PositionX     float32                `protobuf:"fixed32,2,opt,name=PositionX,proto3" json:"PositionX,omitempty"`
	PositionY     float32                `protobuf:"fixed32,3,opt,name=PositionY,proto3" json:"PositionY,omitempty"`
	Rotation      float32                `protobuf:"fixed32,4,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	Location      string                 `protobuf:"bytes,5,opt,name=Location,proto3" json:"Location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultFurnitureExcelTable) Reset() {
	*x = DefaultFurnitureExcelTable{}
	mi := &file_excel_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultFurnitureExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultFurnitureExcelTable) ProtoMessage() {}

func (x *DefaultFurnitureExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultFurnitureExcelTable.ProtoReflect.Descriptor instead.
func (*DefaultFurnitureExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{4}
}

func (x *DefaultFurnitureExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetPositionX() float32 {
	if x != nil {
		return x.PositionX
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetPositionY() float32 {
	if x != nil {
		return x.PositionY
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetRotation() float32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *DefaultFurnitureExcelTable) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type DefaultEchelonExcelTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EchlonId      int32                  `protobuf:"varint,1,opt,name=EchlonId,proto3" json:"EchlonId,omitempty"`
	LeaderId      int64                  `protobuf:"varint,2,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	MainId        []int64                `protobuf:"varint,3,rep,packed,name=MainId,proto3" json:"MainId,omitempty"`
	SupportId     []int64                `protobuf:"varint,4,rep,packed,name=SupportId,proto3" json:"SupportId,omitempty"`
	TssId         int64                  `protobuf:"varint,5,opt,name=TssId,proto3" json:"TssId,omitempty"`
	SkillId       []int64                `protobuf:"varint,6,rep,packed,name=SkillId,proto3" json:"SkillId,omitempty"`
	ExtensionType int32                  `protobuf:"varint,7,opt,name=ExtensionType,proto3" json:"ExtensionType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultEchelonExcelTable) Reset() {
	*x = DefaultEchelonExcelTable{}
	mi := &file_excel_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultEchelonExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultEchelonExcelTable) ProtoMessage() {}

func (x *DefaultEchelonExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultEchelonExcelTable.ProtoReflect.Descriptor instead.
func (*DefaultEchelonExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{5}
}

func (x *DefaultEchelonExcelTable) GetEchlonId() int32 {
	if x != nil {
		return x.EchlonId
	}
	return 0
}

func (x *DefaultEchelonExcelTable) GetLeaderId() int64 {
	if x != nil {
		return x.LeaderId
	}
	return 0
}

func (x *DefaultEchelonExcelTable) GetMainId() []int64 {
	if x != nil {
		return x.MainId
	}
	return nil
}

func (x *DefaultEchelonExcelTable) GetSupportId() []int64 {
	if x != nil {
		return x.SupportId
	}
	return nil
}

func (x *DefaultEchelonExcelTable) GetTssId() int64 {
	if x != nil {
		return x.TssId
	}
	return 0
}

func (x *DefaultEchelonExcelTable) GetSkillId() []int64 {
	if x != nil {
		return x.SkillId
	}
	return nil
}

func (x *DefaultEchelonExcelTable) GetExtensionType() int32 {
	if x != nil {
		return x.ExtensionType
	}
	return 0
}

type ShopExcelTable struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Id                           int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	LocalizeEtcId                int64                  `protobuf:"varint,2,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	CategoryType                 string                 `protobuf:"bytes,3,opt,name=CategoryType,proto3" json:"CategoryType,omitempty"`
	IsLegacy                     bool                   `protobuf:"varint,4,opt,name=IsLegacy,proto3" json:"IsLegacy,omitempty"`
	GoodsId                      []int64                `protobuf:"varint,5,rep,packed,name=GoodsId,proto3" json:"GoodsId,omitempty"`
	DisplayOrder                 int64                  `protobuf:"varint,6,opt,name=DisplayOrder,proto3" json:"DisplayOrder,omitempty"`
	SalePeriodFrom               string                 `protobuf:"bytes,7,opt,name=SalePeriodFrom,proto3" json:"SalePeriodFrom,omitempty"`
	SalePeriodTo                 string                 `protobuf:"bytes,8,opt,name=SalePeriodTo,proto3" json:"SalePeriodTo,omitempty"`
	PurchaseCooltimeMin          int64                  `protobuf:"varint,9,opt,name=PurchaseCooltimeMin,proto3" json:"PurchaseCooltimeMin,omitempty"`
	PurchaseCountLimit           int64                  `protobuf:"varint,10,opt,name=PurchaseCountLimit,proto3" json:"PurchaseCountLimit,omitempty"`
	PurchaseCountResetType_      string                 `protobuf:"bytes,11,opt,name=PurchaseCountResetType_,json=PurchaseCountResetType,proto3" json:"PurchaseCountResetType_,omitempty"`
	BuyReportEventName           string                 `protobuf:"bytes,12,opt,name=BuyReportEventName,proto3" json:"BuyReportEventName,omitempty"`
	RestrictBuyWhenInventoryFull bool                   `protobuf:"varint,13,opt,name=RestrictBuyWhenInventoryFull,proto3" json:"RestrictBuyWhenInventoryFull,omitempty"`
	DisplayTag                   string                 `protobuf:"bytes,14,opt,name=DisplayTag,proto3" json:"DisplayTag,omitempty"`
	ShopUpdateGroupId            int64                  `protobuf:"varint,15,opt,name=ShopUpdateGroupId,proto3" json:"ShopUpdateGroupId,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ShopExcelTable) Reset() {
	*x = ShopExcelTable{}
	mi := &file_excel_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopExcelTable) ProtoMessage() {}

func (x *ShopExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopExcelTable.ProtoReflect.Descriptor instead.
func (*ShopExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{6}
}

func (x *ShopExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShopExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *ShopExcelTable) GetCategoryType() string {
	if x != nil {
		return x.CategoryType
	}
	return ""
}

func (x *ShopExcelTable) GetIsLegacy() bool {
	if x != nil {
		return x.IsLegacy
	}
	return false
}

func (x *ShopExcelTable) GetGoodsId() []int64 {
	if x != nil {
		return x.GoodsId
	}
	return nil
}

func (x *ShopExcelTable) GetDisplayOrder() int64 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *ShopExcelTable) GetSalePeriodFrom() string {
	if x != nil {
		return x.SalePeriodFrom
	}
	return ""
}

func (x *ShopExcelTable) GetSalePeriodTo() string {
	if x != nil {
		return x.SalePeriodTo
	}
	return ""
}

func (x *ShopExcelTable) GetPurchaseCooltimeMin() int64 {
	if x != nil {
		return x.PurchaseCooltimeMin
	}
	return 0
}

func (x *ShopExcelTable) GetPurchaseCountLimit() int64 {
	if x != nil {
		return x.PurchaseCountLimit
	}
	return 0
}

func (x *ShopExcelTable) GetPurchaseCountResetType_() string {
	if x != nil {
		return x.PurchaseCountResetType_
	}
	return ""
}

func (x *ShopExcelTable) GetBuyReportEventName() string {
	if x != nil {
		return x.BuyReportEventName
	}
	return ""
}

func (x *ShopExcelTable) GetRestrictBuyWhenInventoryFull() bool {
	if x != nil {
		return x.RestrictBuyWhenInventoryFull
	}
	return false
}

func (x *ShopExcelTable) GetDisplayTag() string {
	if x != nil {
		return x.DisplayTag
	}
	return ""
}

func (x *ShopExcelTable) GetShopUpdateGroupId() int64 {
	if x != nil {
		return x.ShopUpdateGroupId
	}
	return 0
}

type ShopInfoExcelTable struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CategoryType          string                 `protobuf:"bytes,1,opt,name=CategoryType,proto3" json:"CategoryType,omitempty"`
	IsRefresh             bool                   `protobuf:"varint,2,opt,name=IsRefresh,proto3" json:"IsRefresh,omitempty"`
	IsSoldOutDimmed       bool                   `protobuf:"varint,3,opt,name=IsSoldOutDimmed,proto3" json:"IsSoldOutDimmed,omitempty"`
	CostParcelType        []string               `protobuf:"bytes,4,rep,name=CostParcelType,proto3" json:"CostParcelType,omitempty"`
	CostParcelId          []int64                `protobuf:"varint,5,rep,packed,name=CostParcelId,proto3" json:"CostParcelId,omitempty"`
	AutoRefreshCoolTime   int64                  `protobuf:"varint,6,opt,name=AutoRefreshCoolTime,proto3" json:"AutoRefreshCoolTime,omitempty"`
	RefreshAbleCount      int64                  `protobuf:"varint,7,opt,name=RefreshAbleCount,proto3" json:"RefreshAbleCount,omitempty"`
	GoodsId               []int64                `protobuf:"varint,8,rep,packed,name=GoodsId,proto3" json:"GoodsId,omitempty"`
	OpenPeriodFrom        string                 `protobuf:"bytes,9,opt,name=OpenPeriodFrom,proto3" json:"OpenPeriodFrom,omitempty"`
	OpenPeriodTo          string                 `protobuf:"bytes,10,opt,name=OpenPeriodTo,proto3" json:"OpenPeriodTo,omitempty"`
	ShopProductUpdateTime string                 `protobuf:"bytes,11,opt,name=ShopProductUpdateTime,proto3" json:"ShopProductUpdateTime,omitempty"`
	DisplayParcelType     string                 `protobuf:"bytes,12,opt,name=DisplayParcelType,proto3" json:"DisplayParcelType,omitempty"`
	DisplayParcelId       int64                  `protobuf:"varint,13,opt,name=DisplayParcelId,proto3" json:"DisplayParcelId,omitempty"`
	IsShopVisible         bool                   `protobuf:"varint,14,opt,name=IsShopVisible,proto3" json:"IsShopVisible,omitempty"`
	DisplayOrder          int64                  `protobuf:"varint,15,opt,name=DisplayOrder,proto3" json:"DisplayOrder,omitempty"`
	ShopUpdateDate        int64                  `protobuf:"varint,16,opt,name=ShopUpdateDate,proto3" json:"ShopUpdateDate,omitempty"`
	ShopUpdateGroupId1    int64                  `protobuf:"varint,17,opt,name=ShopUpdateGroupId1,proto3" json:"ShopUpdateGroupId1,omitempty"`
	ShopUpdateGroupId2    int64                  `protobuf:"varint,18,opt,name=ShopUpdateGroupId2,proto3" json:"ShopUpdateGroupId2,omitempty"`
	ShopUpdateGroupId3    int64                  `protobuf:"varint,19,opt,name=ShopUpdateGroupId3,proto3" json:"ShopUpdateGroupId3,omitempty"`
	ShopUpdateGroupId4    int64                  `protobuf:"varint,20,opt,name=ShopUpdateGroupId4,proto3" json:"ShopUpdateGroupId4,omitempty"`
	ShopUpdateGroupId5    int64                  `protobuf:"varint,21,opt,name=ShopUpdateGroupId5,proto3" json:"ShopUpdateGroupId5,omitempty"`
	ShopUpdateGroupId6    int64                  `protobuf:"varint,22,opt,name=ShopUpdateGroupId6,proto3" json:"ShopUpdateGroupId6,omitempty"`
	ShopUpdateGroupId7    int64                  `protobuf:"varint,23,opt,name=ShopUpdateGroupId7,proto3" json:"ShopUpdateGroupId7,omitempty"`
	ShopUpdateGroupId8    int64                  `protobuf:"varint,24,opt,name=ShopUpdateGroupId8,proto3" json:"ShopUpdateGroupId8,omitempty"`
	ShopUpdateGroupId9    int64                  `protobuf:"varint,25,opt,name=ShopUpdateGroupId9,proto3" json:"ShopUpdateGroupId9,omitempty"`
	ShopUpdateGroupId10   int64                  `protobuf:"varint,26,opt,name=ShopUpdateGroupId10,proto3" json:"ShopUpdateGroupId10,omitempty"`
	ShopUpdateGroupId11   int64                  `protobuf:"varint,27,opt,name=ShopUpdateGroupId11,proto3" json:"ShopUpdateGroupId11,omitempty"`
	ShopUpdateGroupId12   int64                  `protobuf:"varint,28,opt,name=ShopUpdateGroupId12,proto3" json:"ShopUpdateGroupId12,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ShopInfoExcelTable) Reset() {
	*x = ShopInfoExcelTable{}
	mi := &file_excel_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopInfoExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopInfoExcelTable) ProtoMessage() {}

func (x *ShopInfoExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopInfoExcelTable.ProtoReflect.Descriptor instead.
func (*ShopInfoExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{7}
}

func (x *ShopInfoExcelTable) GetCategoryType() string {
	if x != nil {
		return x.CategoryType
	}
	return ""
}

func (x *ShopInfoExcelTable) GetIsRefresh() bool {
	if x != nil {
		return x.IsRefresh
	}
	return false
}

func (x *ShopInfoExcelTable) GetIsSoldOutDimmed() bool {
	if x != nil {
		return x.IsSoldOutDimmed
	}
	return false
}

func (x *ShopInfoExcelTable) GetCostParcelType() []string {
	if x != nil {
		return x.CostParcelType
	}
	return nil
}

func (x *ShopInfoExcelTable) GetCostParcelId() []int64 {
	if x != nil {
		return x.CostParcelId
	}
	return nil
}

func (x *ShopInfoExcelTable) GetAutoRefreshCoolTime() int64 {
	if x != nil {
		return x.AutoRefreshCoolTime
	}
	return 0
}

func (x *ShopInfoExcelTable) GetRefreshAbleCount() int64 {
	if x != nil {
		return x.RefreshAbleCount
	}
	return 0
}

func (x *ShopInfoExcelTable) GetGoodsId() []int64 {
	if x != nil {
		return x.GoodsId
	}
	return nil
}

func (x *ShopInfoExcelTable) GetOpenPeriodFrom() string {
	if x != nil {
		return x.OpenPeriodFrom
	}
	return ""
}

func (x *ShopInfoExcelTable) GetOpenPeriodTo() string {
	if x != nil {
		return x.OpenPeriodTo
	}
	return ""
}

func (x *ShopInfoExcelTable) GetShopProductUpdateTime() string {
	if x != nil {
		return x.ShopProductUpdateTime
	}
	return ""
}

func (x *ShopInfoExcelTable) GetDisplayParcelType() string {
	if x != nil {
		return x.DisplayParcelType
	}
	return ""
}

func (x *ShopInfoExcelTable) GetDisplayParcelId() int64 {
	if x != nil {
		return x.DisplayParcelId
	}
	return 0
}

func (x *ShopInfoExcelTable) GetIsShopVisible() bool {
	if x != nil {
		return x.IsShopVisible
	}
	return false
}

func (x *ShopInfoExcelTable) GetDisplayOrder() int64 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateDate() int64 {
	if x != nil {
		return x.ShopUpdateDate
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId1() int64 {
	if x != nil {
		return x.ShopUpdateGroupId1
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId2() int64 {
	if x != nil {
		return x.ShopUpdateGroupId2
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId3() int64 {
	if x != nil {
		return x.ShopUpdateGroupId3
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId4() int64 {
	if x != nil {
		return x.ShopUpdateGroupId4
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId5() int64 {
	if x != nil {
		return x.ShopUpdateGroupId5
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId6() int64 {
	if x != nil {
		return x.ShopUpdateGroupId6
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId7() int64 {
	if x != nil {
		return x.ShopUpdateGroupId7
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId8() int64 {
	if x != nil {
		return x.ShopUpdateGroupId8
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId9() int64 {
	if x != nil {
		return x.ShopUpdateGroupId9
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId10() int64 {
	if x != nil {
		return x.ShopUpdateGroupId10
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId11() int64 {
	if x != nil {
		return x.ShopUpdateGroupId11
	}
	return 0
}

func (x *ShopInfoExcelTable) GetShopUpdateGroupId12() int64 {
	if x != nil {
		return x.ShopUpdateGroupId12
	}
	return 0
}

type ItemExcelTable struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GroupId                  int64                  `protobuf:"varint,2,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Rarity_                  string                 `protobuf:"bytes,3,opt,name=Rarity_,json=Rarity,proto3" json:"Rarity_,omitempty"`
	ProductionStep_          string                 `protobuf:"bytes,4,opt,name=ProductionStep_,json=ProductionStep,proto3" json:"ProductionStep_,omitempty"`
	LocalizeEtcId            int64                  `protobuf:"varint,5,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	ItemCategory_            string                 `protobuf:"bytes,6,opt,name=ItemCategory_,json=ItemCategory,proto3" json:"ItemCategory_,omitempty"`
	Quality                  int64                  `protobuf:"varint,7,opt,name=Quality,proto3" json:"Quality,omitempty"`
	Icon                     string                 `protobuf:"bytes,8,opt,name=Icon,proto3" json:"Icon,omitempty"`
	SpriteName               string                 `protobuf:"bytes,9,opt,name=SpriteName,proto3" json:"SpriteName,omitempty"`
	StackableMax             int64                  `protobuf:"varint,10,opt,name=StackableMax,proto3" json:"StackableMax,omitempty"`
	StackableFunction        int64                  `protobuf:"varint,11,opt,name=StackableFunction,proto3" json:"StackableFunction,omitempty"`
	ImmediateUse             bool                   `protobuf:"varint,12,opt,name=ImmediateUse,proto3" json:"ImmediateUse,omitempty"`
	UsingResultParcelType    string                 `protobuf:"bytes,13,opt,name=UsingResultParcelType,proto3" json:"UsingResultParcelType,omitempty"`
	UsingResultId            int64                  `protobuf:"varint,14,opt,name=UsingResultId,proto3" json:"UsingResultId,omitempty"`
	UsingResultAmount        int64                  `protobuf:"varint,15,opt,name=UsingResultAmount,proto3" json:"UsingResultAmount,omitempty"`
	MailType_                string                 `protobuf:"bytes,16,opt,name=MailType_,json=MailType,proto3" json:"MailType_,omitempty"`
	ExpiryChangeParcelType   string                 `protobuf:"bytes,17,opt,name=ExpiryChangeParcelType,proto3" json:"ExpiryChangeParcelType,omitempty"`
	ExpiryChangeId           int64                  `protobuf:"varint,18,opt,name=ExpiryChangeId,proto3" json:"ExpiryChangeId,omitempty"`
	ExpiryChangeAmount       int64                  `protobuf:"varint,19,opt,name=ExpiryChangeAmount,proto3" json:"ExpiryChangeAmount,omitempty"`
	CanTierUpgrade           bool                   `protobuf:"varint,20,opt,name=CanTierUpgrade,proto3" json:"CanTierUpgrade,omitempty"`
	TierUpgradeRecipeCraftId int64                  `protobuf:"varint,21,opt,name=TierUpgradeRecipeCraftId,proto3" json:"TierUpgradeRecipeCraftId,omitempty"`
	Tags                     []string               `protobuf:"bytes,22,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CraftQualityTier0        int64                  `protobuf:"varint,23,opt,name=CraftQualityTier0,proto3" json:"CraftQualityTier0,omitempty"`
	CraftQualityTier1        int64                  `protobuf:"varint,24,opt,name=CraftQualityTier1,proto3" json:"CraftQualityTier1,omitempty"`
	CraftQualityTier2        int64                  `protobuf:"varint,25,opt,name=CraftQualityTier2,proto3" json:"CraftQualityTier2,omitempty"`
	ShiftingCraftQuality     int64                  `protobuf:"varint,26,opt,name=ShiftingCraftQuality,proto3" json:"ShiftingCraftQuality,omitempty"`
	MaxGiftTags              int64                  `protobuf:"varint,27,opt,name=MaxGiftTags,proto3" json:"MaxGiftTags,omitempty"`
	ShopCategory             []string               `protobuf:"bytes,28,rep,name=ShopCategory,proto3" json:"ShopCategory,omitempty"`
	ExpirationDateTime       string                 `protobuf:"bytes,29,opt,name=ExpirationDateTime,proto3" json:"ExpirationDateTime,omitempty"`
	ExpirationNotifyDateIn   int64                  `protobuf:"varint,30,opt,name=ExpirationNotifyDateIn,proto3" json:"ExpirationNotifyDateIn,omitempty"`
	ShortcutTypeId           int64                  `protobuf:"varint,31,opt,name=ShortcutTypeId,proto3" json:"ShortcutTypeId,omitempty"`
	GachaTicket              string                 `protobuf:"bytes,32,opt,name=GachaTicket,proto3" json:"GachaTicket,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ItemExcelTable) Reset() {
	*x = ItemExcelTable{}
	mi := &file_excel_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemExcelTable) ProtoMessage() {}

func (x *ItemExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemExcelTable.ProtoReflect.Descriptor instead.
func (*ItemExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{8}
}

func (x *ItemExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemExcelTable) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ItemExcelTable) GetRarity_() string {
	if x != nil {
		return x.Rarity_
	}
	return ""
}

func (x *ItemExcelTable) GetProductionStep_() string {
	if x != nil {
		return x.ProductionStep_
	}
	return ""
}

func (x *ItemExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *ItemExcelTable) GetItemCategory_() string {
	if x != nil {
		return x.ItemCategory_
	}
	return ""
}

func (x *ItemExcelTable) GetQuality() int64 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ItemExcelTable) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ItemExcelTable) GetSpriteName() string {
	if x != nil {
		return x.SpriteName
	}
	return ""
}

func (x *ItemExcelTable) GetStackableMax() int64 {
	if x != nil {
		return x.StackableMax
	}
	return 0
}

func (x *ItemExcelTable) GetStackableFunction() int64 {
	if x != nil {
		return x.StackableFunction
	}
	return 0
}

func (x *ItemExcelTable) GetImmediateUse() bool {
	if x != nil {
		return x.ImmediateUse
	}
	return false
}

func (x *ItemExcelTable) GetUsingResultParcelType() string {
	if x != nil {
		return x.UsingResultParcelType
	}
	return ""
}

func (x *ItemExcelTable) GetUsingResultId() int64 {
	if x != nil {
		return x.UsingResultId
	}
	return 0
}

func (x *ItemExcelTable) GetUsingResultAmount() int64 {
	if x != nil {
		return x.UsingResultAmount
	}
	return 0
}

func (x *ItemExcelTable) GetMailType_() string {
	if x != nil {
		return x.MailType_
	}
	return ""
}

func (x *ItemExcelTable) GetExpiryChangeParcelType() string {
	if x != nil {
		return x.ExpiryChangeParcelType
	}
	return ""
}

func (x *ItemExcelTable) GetExpiryChangeId() int64 {
	if x != nil {
		return x.ExpiryChangeId
	}
	return 0
}

func (x *ItemExcelTable) GetExpiryChangeAmount() int64 {
	if x != nil {
		return x.ExpiryChangeAmount
	}
	return 0
}

func (x *ItemExcelTable) GetCanTierUpgrade() bool {
	if x != nil {
		return x.CanTierUpgrade
	}
	return false
}

func (x *ItemExcelTable) GetTierUpgradeRecipeCraftId() int64 {
	if x != nil {
		return x.TierUpgradeRecipeCraftId
	}
	return 0
}

func (x *ItemExcelTable) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ItemExcelTable) GetCraftQualityTier0() int64 {
	if x != nil {
		return x.CraftQualityTier0
	}
	return 0
}

func (x *ItemExcelTable) GetCraftQualityTier1() int64 {
	if x != nil {
		return x.CraftQualityTier1
	}
	return 0
}

func (x *ItemExcelTable) GetCraftQualityTier2() int64 {
	if x != nil {
		return x.CraftQualityTier2
	}
	return 0
}

func (x *ItemExcelTable) GetShiftingCraftQuality() int64 {
	if x != nil {
		return x.ShiftingCraftQuality
	}
	return 0
}

func (x *ItemExcelTable) GetMaxGiftTags() int64 {
	if x != nil {
		return x.MaxGiftTags
	}
	return 0
}

func (x *ItemExcelTable) GetShopCategory() []string {
	if x != nil {
		return x.ShopCategory
	}
	return nil
}

func (x *ItemExcelTable) GetExpirationDateTime() string {
	if x != nil {
		return x.ExpirationDateTime
	}
	return ""
}

func (x *ItemExcelTable) GetExpirationNotifyDateIn() int64 {
	if x != nil {
		return x.ExpirationNotifyDateIn
	}
	return 0
}

func (x *ItemExcelTable) GetShortcutTypeId() int64 {
	if x != nil {
		return x.ShortcutTypeId
	}
	return 0
}

func (x *ItemExcelTable) GetGachaTicket() string {
	if x != nil {
		return x.GachaTicket
	}
	return ""
}

type EmblemExcel struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Category             string                 `protobuf:"bytes,2,opt,name=Category,proto3" json:"Category,omitempty"`
	Rarity               string                 `protobuf:"bytes,3,opt,name=Rarity,proto3" json:"Rarity,omitempty"`
	DisplayOrder         int64                  `protobuf:"varint,4,opt,name=DisplayOrder,proto3" json:"DisplayOrder,omitempty"`
	LocalizeEtcId        int64                  `protobuf:"varint,5,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	LocalizeCodeId       int64                  `protobuf:"varint,6,opt,name=LocalizeCodeId,proto3" json:"LocalizeCodeId,omitempty"`
	UseAtLocalizeId      int64                  `protobuf:"varint,7,opt,name=UseAtLocalizeId,proto3" json:"UseAtLocalizeId,omitempty"`
	EmblemTextVisible    bool                   `protobuf:"varint,8,opt,name=EmblemTextVisible,proto3" json:"EmblemTextVisible,omitempty"`
	IconPath             string                 `protobuf:"bytes,9,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	EmblemIconPath       string                 `protobuf:"bytes,10,opt,name=EmblemIconPath,proto3" json:"EmblemIconPath,omitempty"`
	EmblemIconNumControl int64                  `protobuf:"varint,11,opt,name=EmblemIconNumControl,proto3" json:"EmblemIconNumControl,omitempty"`
	EmblemIconBGPath     string                 `protobuf:"bytes,12,opt,name=EmblemIconBGPath,proto3" json:"EmblemIconBGPath,omitempty"`
	EmblemBGPathJp       string                 `protobuf:"bytes,13,opt,name=EmblemBGPathJp,proto3" json:"EmblemBGPathJp,omitempty"`
	EmblemBGPathKr       string                 `protobuf:"bytes,14,opt,name=EmblemBGPathKr,proto3" json:"EmblemBGPathKr,omitempty"`
	DisplayType          string                 `protobuf:"bytes,15,opt,name=DisplayType,proto3" json:"DisplayType,omitempty"`
	DisplayStartDate     string                 `protobuf:"bytes,16,opt,name=DisplayStartDate,proto3" json:"DisplayStartDate,omitempty"`
	DisplayEndDate       string                 `protobuf:"bytes,17,opt,name=DisplayEndDate,proto3" json:"DisplayEndDate,omitempty"`
	DislpayFavorLevel    int64                  `protobuf:"varint,18,opt,name=DislpayFavorLevel,proto3" json:"DislpayFavorLevel,omitempty"`
	CheckPassType        string                 `protobuf:"bytes,19,opt,name=CheckPassType,proto3" json:"CheckPassType,omitempty"`
	EmblemParameter      int64                  `protobuf:"varint,20,opt,name=EmblemParameter,proto3" json:"EmblemParameter,omitempty"`
	CheckPassCount       int64                  `protobuf:"varint,21,opt,name=CheckPassCount,proto3" json:"CheckPassCount,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EmblemExcel) Reset() {
	*x = EmblemExcel{}
	mi := &file_excel_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmblemExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmblemExcel) ProtoMessage() {}

func (x *EmblemExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmblemExcel.ProtoReflect.Descriptor instead.
func (*EmblemExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{9}
}

func (x *EmblemExcel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmblemExcel) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EmblemExcel) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *EmblemExcel) GetDisplayOrder() int64 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *EmblemExcel) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *EmblemExcel) GetLocalizeCodeId() int64 {
	if x != nil {
		return x.LocalizeCodeId
	}
	return 0
}

func (x *EmblemExcel) GetUseAtLocalizeId() int64 {
	if x != nil {
		return x.UseAtLocalizeId
	}
	return 0
}

func (x *EmblemExcel) GetEmblemTextVisible() bool {
	if x != nil {
		return x.EmblemTextVisible
	}
	return false
}

func (x *EmblemExcel) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *EmblemExcel) GetEmblemIconPath() string {
	if x != nil {
		return x.EmblemIconPath
	}
	return ""
}

func (x *EmblemExcel) GetEmblemIconNumControl() int64 {
	if x != nil {
		return x.EmblemIconNumControl
	}
	return 0
}

func (x *EmblemExcel) GetEmblemIconBGPath() string {
	if x != nil {
		return x.EmblemIconBGPath
	}
	return ""
}

func (x *EmblemExcel) GetEmblemBGPathJp() string {
	if x != nil {
		return x.EmblemBGPathJp
	}
	return ""
}

func (x *EmblemExcel) GetEmblemBGPathKr() string {
	if x != nil {
		return x.EmblemBGPathKr
	}
	return ""
}

func (x *EmblemExcel) GetDisplayType() string {
	if x != nil {
		return x.DisplayType
	}
	return ""
}

func (x *EmblemExcel) GetDisplayStartDate() string {
	if x != nil {
		return x.DisplayStartDate
	}
	return ""
}

func (x *EmblemExcel) GetDisplayEndDate() string {
	if x != nil {
		return x.DisplayEndDate
	}
	return ""
}

func (x *EmblemExcel) GetDislpayFavorLevel() int64 {
	if x != nil {
		return x.DislpayFavorLevel
	}
	return 0
}

func (x *EmblemExcel) GetCheckPassType() string {
	if x != nil {
		return x.CheckPassType
	}
	return ""
}

func (x *EmblemExcel) GetEmblemParameter() int64 {
	if x != nil {
		return x.EmblemParameter
	}
	return 0
}

func (x *EmblemExcel) GetCheckPassCount() int64 {
	if x != nil {
		return x.CheckPassCount
	}
	return 0
}

type AcademyFavorScheduleExcelTable struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CharacterId          int64                  `protobuf:"varint,2,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`
	ScheduleGroupId      int64                  `protobuf:"varint,3,opt,name=ScheduleGroupId,proto3" json:"ScheduleGroupId,omitempty"`
	OrderInGroup         int64                  `protobuf:"varint,4,opt,name=OrderInGroup,proto3" json:"OrderInGroup,omitempty"`
	LocalizeScenarioId   int64                  `protobuf:"varint,5,opt,name=LocalizeScenarioId,proto3" json:"LocalizeScenarioId,omitempty"`
	FavorRank            int64                  `protobuf:"varint,6,opt,name=FavorRank,proto3" json:"FavorRank,omitempty"`
	SecretStoneAmount    int64                  `protobuf:"varint,7,opt,name=SecretStoneAmount,proto3" json:"SecretStoneAmount,omitempty"`
	ScenarioSriptGroupId int64                  `protobuf:"varint,8,opt,name=ScenarioSriptGroupId,proto3" json:"ScenarioSriptGroupId,omitempty"`
	RewardParcelType     []string               `protobuf:"bytes,9,rep,name=RewardParcelType,proto3" json:"RewardParcelType,omitempty"`
	RewardParcelId       []int64                `protobuf:"varint,10,rep,packed,name=RewardParcelId,proto3" json:"RewardParcelId,omitempty"`
	RewardAmount         []int64                `protobuf:"varint,11,rep,packed,name=RewardAmount,proto3" json:"RewardAmount,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AcademyFavorScheduleExcelTable) Reset() {
	*x = AcademyFavorScheduleExcelTable{}
	mi := &file_excel_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyFavorScheduleExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyFavorScheduleExcelTable) ProtoMessage() {}

func (x *AcademyFavorScheduleExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyFavorScheduleExcelTable.ProtoReflect.Descriptor instead.
func (*AcademyFavorScheduleExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{10}
}

func (x *AcademyFavorScheduleExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetScheduleGroupId() int64 {
	if x != nil {
		return x.ScheduleGroupId
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetOrderInGroup() int64 {
	if x != nil {
		return x.OrderInGroup
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetLocalizeScenarioId() int64 {
	if x != nil {
		return x.LocalizeScenarioId
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetFavorRank() int64 {
	if x != nil {
		return x.FavorRank
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetSecretStoneAmount() int64 {
	if x != nil {
		return x.SecretStoneAmount
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetScenarioSriptGroupId() int64 {
	if x != nil {
		return x.ScenarioSriptGroupId
	}
	return 0
}

func (x *AcademyFavorScheduleExcelTable) GetRewardParcelType() []string {
	if x != nil {
		return x.RewardParcelType
	}
	return nil
}

func (x *AcademyFavorScheduleExcelTable) GetRewardParcelId() []int64 {
	if x != nil {
		return x.RewardParcelId
	}
	return nil
}

func (x *AcademyFavorScheduleExcelTable) GetRewardAmount() []int64 {
	if x != nil {
		return x.RewardAmount
	}
	return nil
}

type AcademyMessangerExcelTable struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	MessageGroupId              int64                  `protobuf:"varint,1,opt,name=MessageGroupId,proto3" json:"MessageGroupId,omitempty"`
	Id                          int64                  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	CharacterId                 int64                  `protobuf:"varint,3,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`
	MessageCondition            string                 `protobuf:"bytes,4,opt,name=MessageCondition,proto3" json:"MessageCondition,omitempty"`
	ConditionValue              int64                  `protobuf:"varint,5,opt,name=ConditionValue,proto3" json:"ConditionValue,omitempty"`
	PreConditionGroupId         int64                  `protobuf:"varint,6,opt,name=PreConditionGroupId,proto3" json:"PreConditionGroupId,omitempty"`
	PreConditionFavorScheduleId int64                  `protobuf:"varint,7,opt,name=PreConditionFavorScheduleId,proto3" json:"PreConditionFavorScheduleId,omitempty"`
	FavorScheduleId             int64                  `protobuf:"varint,8,opt,name=FavorScheduleId,proto3" json:"FavorScheduleId,omitempty"`
	NextGroupId                 int64                  `protobuf:"varint,9,opt,name=NextGroupId,proto3" json:"NextGroupId,omitempty"`
	FeedbackTimeMillisec        int64                  `protobuf:"varint,10,opt,name=FeedbackTimeMillisec,proto3" json:"FeedbackTimeMillisec,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *AcademyMessangerExcelTable) Reset() {
	*x = AcademyMessangerExcelTable{}
	mi := &file_excel_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyMessangerExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyMessangerExcelTable) ProtoMessage() {}

func (x *AcademyMessangerExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyMessangerExcelTable.ProtoReflect.Descriptor instead.
func (*AcademyMessangerExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{11}
}

func (x *AcademyMessangerExcelTable) GetMessageGroupId() int64 {
	if x != nil {
		return x.MessageGroupId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetMessageCondition() string {
	if x != nil {
		return x.MessageCondition
	}
	return ""
}

func (x *AcademyMessangerExcelTable) GetConditionValue() int64 {
	if x != nil {
		return x.ConditionValue
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetPreConditionGroupId() int64 {
	if x != nil {
		return x.PreConditionGroupId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetPreConditionFavorScheduleId() int64 {
	if x != nil {
		return x.PreConditionFavorScheduleId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetFavorScheduleId() int64 {
	if x != nil {
		return x.FavorScheduleId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetNextGroupId() int64 {
	if x != nil {
		return x.NextGroupId
	}
	return 0
}

func (x *AcademyMessangerExcelTable) GetFeedbackTimeMillisec() int64 {
	if x != nil {
		return x.FeedbackTimeMillisec
	}
	return 0
}

type GuideMissionExcelTable struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	SeasonId                      int64                  `protobuf:"varint,1,opt,name=SeasonId,proto3" json:"SeasonId,omitempty"`
	Id                            int64                  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Category                      string                 `protobuf:"bytes,3,opt,name=Category,proto3" json:"Category,omitempty"`
	IsLegacy                      bool                   `protobuf:"varint,4,opt,name=IsLegacy,proto3" json:"IsLegacy,omitempty"`
	TabNumber                     int64                  `protobuf:"varint,5,opt,name=TabNumber,proto3" json:"TabNumber,omitempty"`
	Description                   int64                  `protobuf:"varint,6,opt,name=Description,proto3" json:"Description,omitempty"`
	ToastDisplayType              string                 `protobuf:"bytes,7,opt,name=ToastDisplayType,proto3" json:"ToastDisplayType,omitempty"`
	ToastImagePath                string                 `protobuf:"bytes,8,opt,name=ToastImagePath,proto3" json:"ToastImagePath,omitempty"`
	CompleteConditionType         string                 `protobuf:"bytes,9,opt,name=CompleteConditionType,proto3" json:"CompleteConditionType,omitempty"`
	CompleteConditionCount        int64                  `protobuf:"varint,10,opt,name=CompleteConditionCount,proto3" json:"CompleteConditionCount,omitempty"`
	CompleteConditionParameter    []int64                `protobuf:"varint,11,rep,packed,name=CompleteConditionParameter,proto3" json:"CompleteConditionParameter,omitempty"`
	CompleteConditionParameterTag []string               `protobuf:"bytes,12,rep,name=CompleteConditionParameterTag,proto3" json:"CompleteConditionParameterTag,omitempty"`
	IsAutoClearForScenario        bool                   `protobuf:"varint,13,opt,name=IsAutoClearForScenario,proto3" json:"IsAutoClearForScenario,omitempty"`
	MissionRewardParcelType       []string               `protobuf:"bytes,14,rep,name=MissionRewardParcelType,proto3" json:"MissionRewardParcelType,omitempty"`
	MissionRewardParcelId         []int64                `protobuf:"varint,15,rep,packed,name=MissionRewardParcelId,proto3" json:"MissionRewardParcelId,omitempty"`
	MissionRewardAmount           []int64                `protobuf:"varint,16,rep,packed,name=MissionRewardAmount,proto3" json:"MissionRewardAmount,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *GuideMissionExcelTable) Reset() {
	*x = GuideMissionExcelTable{}
	mi := &file_excel_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GuideMissionExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideMissionExcelTable) ProtoMessage() {}

func (x *GuideMissionExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideMissionExcelTable.ProtoReflect.Descriptor instead.
func (*GuideMissionExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{12}
}

func (x *GuideMissionExcelTable) GetSeasonId() int64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *GuideMissionExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GuideMissionExcelTable) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GuideMissionExcelTable) GetIsLegacy() bool {
	if x != nil {
		return x.IsLegacy
	}
	return false
}

func (x *GuideMissionExcelTable) GetTabNumber() int64 {
	if x != nil {
		return x.TabNumber
	}
	return 0
}

func (x *GuideMissionExcelTable) GetDescription() int64 {
	if x != nil {
		return x.Description
	}
	return 0
}

func (x *GuideMissionExcelTable) GetToastDisplayType() string {
	if x != nil {
		return x.ToastDisplayType
	}
	return ""
}

func (x *GuideMissionExcelTable) GetToastImagePath() string {
	if x != nil {
		return x.ToastImagePath
	}
	return ""
}

func (x *GuideMissionExcelTable) GetCompleteConditionType() string {
	if x != nil {
		return x.CompleteConditionType
	}
	return ""
}

func (x *GuideMissionExcelTable) GetCompleteConditionCount() int64 {
	if x != nil {
		return x.CompleteConditionCount
	}
	return 0
}

func (x *GuideMissionExcelTable) GetCompleteConditionParameter() []int64 {
	if x != nil {
		return x.CompleteConditionParameter
	}
	return nil
}

func (x *GuideMissionExcelTable) GetCompleteConditionParameterTag() []string {
	if x != nil {
		return x.CompleteConditionParameterTag
	}
	return nil
}

func (x *GuideMissionExcelTable) GetIsAutoClearForScenario() bool {
	if x != nil {
		return x.IsAutoClearForScenario
	}
	return false
}

func (x *GuideMissionExcelTable) GetMissionRewardParcelType() []string {
	if x != nil {
		return x.MissionRewardParcelType
	}
	return nil
}

func (x *GuideMissionExcelTable) GetMissionRewardParcelId() []int64 {
	if x != nil {
		return x.MissionRewardParcelId
	}
	return nil
}

func (x *GuideMissionExcelTable) GetMissionRewardAmount() []int64 {
	if x != nil {
		return x.MissionRewardAmount
	}
	return nil
}

type ScenarioModeExcel struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	ModeId                     int64                  `protobuf:"varint,2,opt,name=ModeId,proto3" json:"ModeId,omitempty"`
	ModeType                   string                 `protobuf:"bytes,3,opt,name=ModeType,proto3" json:"ModeType,omitempty"`
	SubType                    string                 `protobuf:"bytes,4,opt,name=SubType,proto3" json:"SubType,omitempty"`
	VolumeId                   int64                  `protobuf:"varint,5,opt,name=VolumeId,proto3" json:"VolumeId,omitempty"`
	ChapterId                  int64                  `protobuf:"varint,6,opt,name=ChapterId,proto3" json:"ChapterId,omitempty"`
	EpisodeId                  int64                  `protobuf:"varint,7,opt,name=EpisodeId,proto3" json:"EpisodeId,omitempty"`
	ExposedTime                string                 `protobuf:"bytes,8,opt,name=ExposedTime,proto3" json:"ExposedTime,omitempty"`
	Hide                       bool                   `protobuf:"varint,9,opt,name=Hide,proto3" json:"Hide,omitempty"`
	Open                       bool                   `protobuf:"varint,10,opt,name=Open,proto3" json:"Open,omitempty"`
	IsContinue                 bool                   `protobuf:"varint,11,opt,name=IsContinue,proto3" json:"IsContinue,omitempty"`
	EpisodeContinueModeId      int64                  `protobuf:"varint,12,opt,name=EpisodeContinueModeId,proto3" json:"EpisodeContinueModeId,omitempty"`
	FrontScenarioGroupIdLength int64                  `protobuf:"varint,13,opt,name=FrontScenarioGroupIdLength,proto3" json:"FrontScenarioGroupIdLength,omitempty"`
	StrategyId                 int64                  `protobuf:"varint,14,opt,name=StrategyId,proto3" json:"StrategyId,omitempty"`
	GroundId                   int64                  `protobuf:"varint,15,opt,name=GroundId,proto3" json:"GroundId,omitempty"`
	IsDefeatBattle             bool                   `protobuf:"varint,16,opt,name=IsDefeatBattle,proto3" json:"IsDefeatBattle,omitempty"`
	BattleDuration             int64                  `protobuf:"varint,17,opt,name=BattleDuration,proto3" json:"BattleDuration,omitempty"`
	BackScenarioGroupIdLength  int64                  `protobuf:"varint,18,opt,name=BackScenarioGroupIdLength,proto3" json:"BackScenarioGroupIdLength,omitempty"`
	ClearedModeIdLength        int64                  `protobuf:"varint,19,opt,name=ClearedModeIdLength,proto3" json:"ClearedModeIdLength,omitempty"`
	ScenarioModeRewardId       int64                  `protobuf:"varint,20,opt,name=ScenarioModeRewardId,proto3" json:"ScenarioModeRewardId,omitempty"`
	IsScenarioSpecialReward    bool                   `protobuf:"varint,21,opt,name=IsScenarioSpecialReward,proto3" json:"IsScenarioSpecialReward,omitempty"`
	AccountLevelLimit          int64                  `protobuf:"varint,22,opt,name=AccountLevelLimit,proto3" json:"AccountLevelLimit,omitempty"`
	ClearedStageId             int64                  `protobuf:"varint,23,opt,name=ClearedStageId,proto3" json:"ClearedStageId,omitempty"`
	NeedClub                   string                 `protobuf:"bytes,24,opt,name=NeedClub,proto3" json:"NeedClub,omitempty"`
	NeedClubStudentCount       int64                  `protobuf:"varint,25,opt,name=NeedClubStudentCount,proto3" json:"NeedClubStudentCount,omitempty"`
	EventContentId             int64                  `protobuf:"varint,26,opt,name=EventContentId,proto3" json:"EventContentId,omitempty"`
	EventContentType           string                 `protobuf:"bytes,27,opt,name=EventContentType,proto3" json:"EventContentType,omitempty"`
	EventContentCondition      int64                  `protobuf:"varint,28,opt,name=EventContentCondition,proto3" json:"EventContentCondition,omitempty"`
	EventContentConditionGroup int64                  `protobuf:"varint,29,opt,name=EventContentConditionGroup,proto3" json:"EventContentConditionGroup,omitempty"`
	MapDifficulty              string                 `protobuf:"bytes,30,opt,name=MapDifficulty,proto3" json:"MapDifficulty,omitempty"`
	StepIndex                  int64                  `protobuf:"varint,31,opt,name=StepIndex,proto3" json:"StepIndex,omitempty"`
	RecommendLevel             int64                  `protobuf:"varint,32,opt,name=RecommendLevel,proto3" json:"RecommendLevel,omitempty"`
	EventIconParcelPath        string                 `protobuf:"bytes,33,opt,name=EventIconParcelPath,proto3" json:"EventIconParcelPath,omitempty"`
	EventBannerTitle           int64                  `protobuf:"varint,34,opt,name=EventBannerTitle,proto3" json:"EventBannerTitle,omitempty"`
	Lof                        bool                   `protobuf:"varint,35,opt,name=Lof,proto3" json:"Lof,omitempty"`
	StageTopography            string                 `protobuf:"bytes,36,opt,name=StageTopography,proto3" json:"StageTopography,omitempty"`
	FixedEchelonId             int64                  `protobuf:"varint,37,opt,name=FixedEchelonId,proto3" json:"FixedEchelonId,omitempty"`
	CompleteReportEventName    string                 `protobuf:"bytes,38,opt,name=CompleteReportEventName,proto3" json:"CompleteReportEventName,omitempty"`
	EchelonExtensionType       string                 `protobuf:"bytes,39,opt,name=EchelonExtensionType,proto3" json:"EchelonExtensionType,omitempty"`
	CollectionGroupId          int64                  `protobuf:"varint,40,opt,name=CollectionGroupId,proto3" json:"CollectionGroupId,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ScenarioModeExcel) Reset() {
	*x = ScenarioModeExcel{}
	mi := &file_excel_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioModeExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioModeExcel) ProtoMessage() {}

func (x *ScenarioModeExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioModeExcel.ProtoReflect.Descriptor instead.
func (*ScenarioModeExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{13}
}

func (x *ScenarioModeExcel) GetModeId() int64 {
	if x != nil {
		return x.ModeId
	}
	return 0
}

func (x *ScenarioModeExcel) GetModeType() string {
	if x != nil {
		return x.ModeType
	}
	return ""
}

func (x *ScenarioModeExcel) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *ScenarioModeExcel) GetVolumeId() int64 {
	if x != nil {
		return x.VolumeId
	}
	return 0
}

func (x *ScenarioModeExcel) GetChapterId() int64 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *ScenarioModeExcel) GetEpisodeId() int64 {
	if x != nil {
		return x.EpisodeId
	}
	return 0
}

func (x *ScenarioModeExcel) GetExposedTime() string {
	if x != nil {
		return x.ExposedTime
	}
	return ""
}

func (x *ScenarioModeExcel) GetHide() bool {
	if x != nil {
		return x.Hide
	}
	return false
}

func (x *ScenarioModeExcel) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *ScenarioModeExcel) GetIsContinue() bool {
	if x != nil {
		return x.IsContinue
	}
	return false
}

func (x *ScenarioModeExcel) GetEpisodeContinueModeId() int64 {
	if x != nil {
		return x.EpisodeContinueModeId
	}
	return 0
}

func (x *ScenarioModeExcel) GetFrontScenarioGroupIdLength() int64 {
	if x != nil {
		return x.FrontScenarioGroupIdLength
	}
	return 0
}

func (x *ScenarioModeExcel) GetStrategyId() int64 {
	if x != nil {
		return x.StrategyId
	}
	return 0
}

func (x *ScenarioModeExcel) GetGroundId() int64 {
	if x != nil {
		return x.GroundId
	}
	return 0
}

func (x *ScenarioModeExcel) GetIsDefeatBattle() bool {
	if x != nil {
		return x.IsDefeatBattle
	}
	return false
}

func (x *ScenarioModeExcel) GetBattleDuration() int64 {
	if x != nil {
		return x.BattleDuration
	}
	return 0
}

func (x *ScenarioModeExcel) GetBackScenarioGroupIdLength() int64 {
	if x != nil {
		return x.BackScenarioGroupIdLength
	}
	return 0
}

func (x *ScenarioModeExcel) GetClearedModeIdLength() int64 {
	if x != nil {
		return x.ClearedModeIdLength
	}
	return 0
}

func (x *ScenarioModeExcel) GetScenarioModeRewardId() int64 {
	if x != nil {
		return x.ScenarioModeRewardId
	}
	return 0
}

func (x *ScenarioModeExcel) GetIsScenarioSpecialReward() bool {
	if x != nil {
		return x.IsScenarioSpecialReward
	}
	return false
}

func (x *ScenarioModeExcel) GetAccountLevelLimit() int64 {
	if x != nil {
		return x.AccountLevelLimit
	}
	return 0
}

func (x *ScenarioModeExcel) GetClearedStageId() int64 {
	if x != nil {
		return x.ClearedStageId
	}
	return 0
}

func (x *ScenarioModeExcel) GetNeedClub() string {
	if x != nil {
		return x.NeedClub
	}
	return ""
}

func (x *ScenarioModeExcel) GetNeedClubStudentCount() int64 {
	if x != nil {
		return x.NeedClubStudentCount
	}
	return 0
}

func (x *ScenarioModeExcel) GetEventContentId() int64 {
	if x != nil {
		return x.EventContentId
	}
	return 0
}

func (x *ScenarioModeExcel) GetEventContentType() string {
	if x != nil {
		return x.EventContentType
	}
	return ""
}

func (x *ScenarioModeExcel) GetEventContentCondition() int64 {
	if x != nil {
		return x.EventContentCondition
	}
	return 0
}

func (x *ScenarioModeExcel) GetEventContentConditionGroup() int64 {
	if x != nil {
		return x.EventContentConditionGroup
	}
	return 0
}

func (x *ScenarioModeExcel) GetMapDifficulty() string {
	if x != nil {
		return x.MapDifficulty
	}
	return ""
}

func (x *ScenarioModeExcel) GetStepIndex() int64 {
	if x != nil {
		return x.StepIndex
	}
	return 0
}

func (x *ScenarioModeExcel) GetRecommendLevel() int64 {
	if x != nil {
		return x.RecommendLevel
	}
	return 0
}

func (x *ScenarioModeExcel) GetEventIconParcelPath() string {
	if x != nil {
		return x.EventIconParcelPath
	}
	return ""
}

func (x *ScenarioModeExcel) GetEventBannerTitle() int64 {
	if x != nil {
		return x.EventBannerTitle
	}
	return 0
}

func (x *ScenarioModeExcel) GetLof() bool {
	if x != nil {
		return x.Lof
	}
	return false
}

func (x *ScenarioModeExcel) GetStageTopography() string {
	if x != nil {
		return x.StageTopography
	}
	return ""
}

func (x *ScenarioModeExcel) GetFixedEchelonId() int64 {
	if x != nil {
		return x.FixedEchelonId
	}
	return 0
}

func (x *ScenarioModeExcel) GetCompleteReportEventName() string {
	if x != nil {
		return x.CompleteReportEventName
	}
	return ""
}

func (x *ScenarioModeExcel) GetEchelonExtensionType() string {
	if x != nil {
		return x.EchelonExtensionType
	}
	return ""
}

func (x *ScenarioModeExcel) GetCollectionGroupId() int64 {
	if x != nil {
		return x.CollectionGroupId
	}
	return 0
}

type ScenarioModeRewardExcel struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ScenarioModeRewardId int64                  `protobuf:"varint,1,opt,name=ScenarioModeRewardId,proto3" json:"ScenarioModeRewardId,omitempty"`
	RewardTag            string                 `protobuf:"bytes,2,opt,name=RewardTag,proto3" json:"RewardTag,omitempty"`
	RewardProb           int64                  `protobuf:"varint,3,opt,name=RewardProb,proto3" json:"RewardProb,omitempty"`
	RewardParcelType     string                 `protobuf:"bytes,4,opt,name=RewardParcelType,proto3" json:"RewardParcelType,omitempty"`
	RewardParcelId       int64                  `protobuf:"varint,5,opt,name=RewardParcelId,proto3" json:"RewardParcelId,omitempty"`
	RewardParcelAmount   int64                  `protobuf:"varint,6,opt,name=RewardParcelAmount,proto3" json:"RewardParcelAmount,omitempty"`
	IsDisplayed          bool                   `protobuf:"varint,7,opt,name=IsDisplayed,proto3" json:"IsDisplayed,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ScenarioModeRewardExcel) Reset() {
	*x = ScenarioModeRewardExcel{}
	mi := &file_excel_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenarioModeRewardExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenarioModeRewardExcel) ProtoMessage() {}

func (x *ScenarioModeRewardExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenarioModeRewardExcel.ProtoReflect.Descriptor instead.
func (*ScenarioModeRewardExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{14}
}

func (x *ScenarioModeRewardExcel) GetScenarioModeRewardId() int64 {
	if x != nil {
		return x.ScenarioModeRewardId
	}
	return 0
}

func (x *ScenarioModeRewardExcel) GetRewardTag() string {
	if x != nil {
		return x.RewardTag
	}
	return ""
}

func (x *ScenarioModeRewardExcel) GetRewardProb() int64 {
	if x != nil {
		return x.RewardProb
	}
	return 0
}

func (x *ScenarioModeRewardExcel) GetRewardParcelType() string {
	if x != nil {
		return x.RewardParcelType
	}
	return ""
}

func (x *ScenarioModeRewardExcel) GetRewardParcelId() int64 {
	if x != nil {
		return x.RewardParcelId
	}
	return 0
}

func (x *ScenarioModeRewardExcel) GetRewardParcelAmount() int64 {
	if x != nil {
		return x.RewardParcelAmount
	}
	return 0
}

func (x *ScenarioModeRewardExcel) GetIsDisplayed() bool {
	if x != nil {
		return x.IsDisplayed
	}
	return false
}

type CharacterWeaponExcelTable struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ImagePath       string                 `protobuf:"bytes,2,opt,name=ImagePath,proto3" json:"ImagePath,omitempty"`
	SetRecipe       int64                  `protobuf:"varint,3,opt,name=SetRecipe,proto3" json:"SetRecipe,omitempty"`
	StatLevelUpType string                 `protobuf:"bytes,4,opt,name=StatLevelUpType,proto3" json:"StatLevelUpType,omitempty"`
	AttackPower     int64                  `protobuf:"varint,5,opt,name=AttackPower,proto3" json:"AttackPower,omitempty"`
	AttackPower100  int64                  `protobuf:"varint,6,opt,name=AttackPower100,proto3" json:"AttackPower100,omitempty"`
	MaxHP           int64                  `protobuf:"varint,7,opt,name=MaxHP,proto3" json:"MaxHP,omitempty"`
	MaxHP100        int64                  `protobuf:"varint,8,opt,name=MaxHP100,proto3" json:"MaxHP100,omitempty"`
	HealPower       int64                  `protobuf:"varint,9,opt,name=HealPower,proto3" json:"HealPower,omitempty"`
	HealPower100    int64                  `protobuf:"varint,10,opt,name=HealPower100,proto3" json:"HealPower100,omitempty"`
	Unlock          []bool                 `protobuf:"varint,11,rep,packed,name=Unlock,proto3" json:"Unlock,omitempty"`
	RecipeId        []int64                `protobuf:"varint,12,rep,packed,name=RecipeId,proto3" json:"RecipeId,omitempty"`
	MaxLevel        []int64                `protobuf:"varint,13,rep,packed,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
	LearnSkillSlot  []string               `protobuf:"bytes,14,rep,name=LearnSkillSlot,proto3" json:"LearnSkillSlot,omitempty"`
	StatType        []string               `protobuf:"bytes,15,rep,name=StatType,proto3" json:"StatType,omitempty"`
	StatValue       []int64                `protobuf:"varint,16,rep,packed,name=StatValue,proto3" json:"StatValue,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CharacterWeaponExcelTable) Reset() {
	*x = CharacterWeaponExcelTable{}
	mi := &file_excel_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterWeaponExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterWeaponExcelTable) ProtoMessage() {}

func (x *CharacterWeaponExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterWeaponExcelTable.ProtoReflect.Descriptor instead.
func (*CharacterWeaponExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{15}
}

func (x *CharacterWeaponExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *CharacterWeaponExcelTable) GetSetRecipe() int64 {
	if x != nil {
		return x.SetRecipe
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetStatLevelUpType() string {
	if x != nil {
		return x.StatLevelUpType
	}
	return ""
}

func (x *CharacterWeaponExcelTable) GetAttackPower() int64 {
	if x != nil {
		return x.AttackPower
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetAttackPower100() int64 {
	if x != nil {
		return x.AttackPower100
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetMaxHP() int64 {
	if x != nil {
		return x.MaxHP
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetMaxHP100() int64 {
	if x != nil {
		return x.MaxHP100
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetHealPower() int64 {
	if x != nil {
		return x.HealPower
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetHealPower100() int64 {
	if x != nil {
		return x.HealPower100
	}
	return 0
}

func (x *CharacterWeaponExcelTable) GetUnlock() []bool {
	if x != nil {
		return x.Unlock
	}
	return nil
}

func (x *CharacterWeaponExcelTable) GetRecipeId() []int64 {
	if x != nil {
		return x.RecipeId
	}
	return nil
}

func (x *CharacterWeaponExcelTable) GetMaxLevel() []int64 {
	if x != nil {
		return x.MaxLevel
	}
	return nil
}

func (x *CharacterWeaponExcelTable) GetLearnSkillSlot() []string {
	if x != nil {
		return x.LearnSkillSlot
	}
	return nil
}

func (x *CharacterWeaponExcelTable) GetStatType() []string {
	if x != nil {
		return x.StatType
	}
	return nil
}

func (x *CharacterWeaponExcelTable) GetStatValue() []int64 {
	if x != nil {
		return x.StatValue
	}
	return nil
}

type CharacterSkillListExcelTable struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	CharacterSkillListGroupId   int64                  `protobuf:"varint,1,opt,name=CharacterSkillListGroupId,proto3" json:"CharacterSkillListGroupId,omitempty"`
	MinimumGradeCharacterWeapon int32                  `protobuf:"varint,2,opt,name=MinimumGradeCharacterWeapon,proto3" json:"MinimumGradeCharacterWeapon,omitempty"`
	MinimumTierCharacterGear    int64                  `protobuf:"varint,3,opt,name=MinimumTierCharacterGear,proto3" json:"MinimumTierCharacterGear,omitempty"`
	FormIndex                   int64                  `protobuf:"varint,4,opt,name=FormIndex,proto3" json:"FormIndex,omitempty"`
	IsRootMotion                bool                   `protobuf:"varint,5,opt,name=IsRootMotion,proto3" json:"IsRootMotion,omitempty"`
	IsMoveLeftRight             bool                   `protobuf:"varint,6,opt,name=IsMoveLeftRight,proto3" json:"IsMoveLeftRight,omitempty"`
	UseRandomExSkillTimeline    bool                   `protobuf:"varint,7,opt,name=UseRandomExSkillTimeline,proto3" json:"UseRandomExSkillTimeline,omitempty"`
	TSAInteractionId            int64                  `protobuf:"varint,8,opt,name=TSAInteractionId,proto3" json:"TSAInteractionId,omitempty"`
	NormalSkillGroupId          []string               `protobuf:"bytes,9,rep,name=NormalSkillGroupId,proto3" json:"NormalSkillGroupId,omitempty"`
	NormalSkillTimeLineIndex    []int64                `protobuf:"varint,10,rep,packed,name=NormalSkillTimeLineIndex,proto3" json:"NormalSkillTimeLineIndex,omitempty"`
	ExSkillGroupId              []string               `protobuf:"bytes,11,rep,name=ExSkillGroupId,proto3" json:"ExSkillGroupId,omitempty"`
	ExSkillCutInTimeLineIndex   []string               `protobuf:"bytes,12,rep,name=ExSkillCutInTimeLineIndex,proto3" json:"ExSkillCutInTimeLineIndex,omitempty"`
	ExSkillLevelTimeLineIndex   []string               `protobuf:"bytes,13,rep,name=ExSkillLevelTimeLineIndex,proto3" json:"ExSkillLevelTimeLineIndex,omitempty"`
	PublicSkillGroupId          []string               `protobuf:"bytes,14,rep,name=PublicSkillGroupId,proto3" json:"PublicSkillGroupId,omitempty"`
	PublicSkillTimeLineIndex    []int64                `protobuf:"varint,15,rep,packed,name=PublicSkillTimeLineIndex,proto3" json:"PublicSkillTimeLineIndex,omitempty"`
	PassiveSkillGroupId         []string               `protobuf:"bytes,16,rep,name=PassiveSkillGroupId,proto3" json:"PassiveSkillGroupId,omitempty"`
	LeaderSkillGroupId          []int64                `protobuf:"varint,17,rep,packed,name=LeaderSkillGroupId,proto3" json:"LeaderSkillGroupId,omitempty"`
	ExtraPassiveSkillGroupId    []string               `protobuf:"bytes,18,rep,name=ExtraPassiveSkillGroupId,proto3" json:"ExtraPassiveSkillGroupId,omitempty"`
	HiddenPassiveSkillGroupId   []string               `protobuf:"bytes,19,rep,name=HiddenPassiveSkillGroupId,proto3" json:"HiddenPassiveSkillGroupId,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CharacterSkillListExcelTable) Reset() {
	*x = CharacterSkillListExcelTable{}
	mi := &file_excel_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterSkillListExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterSkillListExcelTable) ProtoMessage() {}

func (x *CharacterSkillListExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterSkillListExcelTable.ProtoReflect.Descriptor instead.
func (*CharacterSkillListExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{16}
}

func (x *CharacterSkillListExcelTable) GetCharacterSkillListGroupId() int64 {
	if x != nil {
		return x.CharacterSkillListGroupId
	}
	return 0
}

func (x *CharacterSkillListExcelTable) GetMinimumGradeCharacterWeapon() int32 {
	if x != nil {
		return x.MinimumGradeCharacterWeapon
	}
	return 0
}

func (x *CharacterSkillListExcelTable) GetMinimumTierCharacterGear() int64 {
	if x != nil {
		return x.MinimumTierCharacterGear
	}
	return 0
}

func (x *CharacterSkillListExcelTable) GetFormIndex() int64 {
	if x != nil {
		return x.FormIndex
	}
	return 0
}

func (x *CharacterSkillListExcelTable) GetIsRootMotion() bool {
	if x != nil {
		return x.IsRootMotion
	}
	return false
}

func (x *CharacterSkillListExcelTable) GetIsMoveLeftRight() bool {
	if x != nil {
		return x.IsMoveLeftRight
	}
	return false
}

func (x *CharacterSkillListExcelTable) GetUseRandomExSkillTimeline() bool {
	if x != nil {
		return x.UseRandomExSkillTimeline
	}
	return false
}

func (x *CharacterSkillListExcelTable) GetTSAInteractionId() int64 {
	if x != nil {
		return x.TSAInteractionId
	}
	return 0
}

func (x *CharacterSkillListExcelTable) GetNormalSkillGroupId() []string {
	if x != nil {
		return x.NormalSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetNormalSkillTimeLineIndex() []int64 {
	if x != nil {
		return x.NormalSkillTimeLineIndex
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetExSkillGroupId() []string {
	if x != nil {
		return x.ExSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetExSkillCutInTimeLineIndex() []string {
	if x != nil {
		return x.ExSkillCutInTimeLineIndex
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetExSkillLevelTimeLineIndex() []string {
	if x != nil {
		return x.ExSkillLevelTimeLineIndex
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetPublicSkillGroupId() []string {
	if x != nil {
		return x.PublicSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetPublicSkillTimeLineIndex() []int64 {
	if x != nil {
		return x.PublicSkillTimeLineIndex
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetPassiveSkillGroupId() []string {
	if x != nil {
		return x.PassiveSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetLeaderSkillGroupId() []int64 {
	if x != nil {
		return x.LeaderSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetExtraPassiveSkillGroupId() []string {
	if x != nil {
		return x.ExtraPassiveSkillGroupId
	}
	return nil
}

func (x *CharacterSkillListExcelTable) GetHiddenPassiveSkillGroupId() []string {
	if x != nil {
		return x.HiddenPassiveSkillGroupId
	}
	return nil
}

type SkillExcelTable struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	Id                                int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	LocalizeSkillId                   int64                  `protobuf:"varint,2,opt,name=LocalizeSkillId,proto3" json:"LocalizeSkillId,omitempty"`
	GroupId                           string                 `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	SkillDataKey                      string                 `protobuf:"bytes,4,opt,name=SkillDataKey,proto3" json:"SkillDataKey,omitempty"`
	VisualDataKey                     string                 `protobuf:"bytes,5,opt,name=VisualDataKey,proto3" json:"VisualDataKey,omitempty"`
	Level                             int32                  `protobuf:"varint,6,opt,name=Level,proto3" json:"Level,omitempty"`
	SkillCost                         int64                  `protobuf:"varint,7,opt,name=SkillCost,proto3" json:"SkillCost,omitempty"`
	ExtraSkillCost                    int64                  `protobuf:"varint,8,opt,name=ExtraSkillCost,proto3" json:"ExtraSkillCost,omitempty"`
	EnemySkillCost                    int64                  `protobuf:"varint,9,opt,name=EnemySkillCost,proto3" json:"EnemySkillCost,omitempty"`
	ExtraEnemySkillCost               int64                  `protobuf:"varint,10,opt,name=ExtraEnemySkillCost,proto3" json:"ExtraEnemySkillCost,omitempty"`
	NPCSkillCost                      int64                  `protobuf:"varint,11,opt,name=NPCSkillCost,proto3" json:"NPCSkillCost,omitempty"`
	ExtraNPCSkillCost                 int64                  `protobuf:"varint,12,opt,name=ExtraNPCSkillCost,proto3" json:"ExtraNPCSkillCost,omitempty"`
	BulletType                        string                 `protobuf:"bytes,13,opt,name=BulletType,proto3" json:"BulletType,omitempty"`
	StartCoolTime                     int64                  `protobuf:"varint,14,opt,name=StartCoolTime,proto3" json:"StartCoolTime,omitempty"`
	CoolTime                          int64                  `protobuf:"varint,15,opt,name=CoolTime,proto3" json:"CoolTime,omitempty"`
	EnemyStartCoolTime                int64                  `protobuf:"varint,16,opt,name=EnemyStartCoolTime,proto3" json:"EnemyStartCoolTime,omitempty"`
	EnemyCoolTime                     int64                  `protobuf:"varint,17,opt,name=EnemyCoolTime,proto3" json:"EnemyCoolTime,omitempty"`
	NPCStartCoolTime                  int64                  `protobuf:"varint,18,opt,name=NPCStartCoolTime,proto3" json:"NPCStartCoolTime,omitempty"`
	NPCCoolTime                       int64                  `protobuf:"varint,19,opt,name=NPCCoolTime,proto3" json:"NPCCoolTime,omitempty"`
	UseAtg                            int64                  `protobuf:"varint,20,opt,name=UseAtg,proto3" json:"UseAtg,omitempty"`
	RequireCharacterLevel             int64                  `protobuf:"varint,21,opt,name=RequireCharacterLevel,proto3" json:"RequireCharacterLevel,omitempty"`
	RequireLevelUpMaterial            int64                  `protobuf:"varint,22,opt,name=RequireLevelUpMaterial,proto3" json:"RequireLevelUpMaterial,omitempty"`
	IconName                          string                 `protobuf:"bytes,23,opt,name=IconName,proto3" json:"IconName,omitempty"`
	IsShowInfo                        bool                   `protobuf:"varint,24,opt,name=IsShowInfo,proto3" json:"IsShowInfo,omitempty"`
	IsShowSpeechbubble                bool                   `protobuf:"varint,25,opt,name=IsShowSpeechbubble,proto3" json:"IsShowSpeechbubble,omitempty"`
	PublicSpeechDuration              int64                  `protobuf:"varint,26,opt,name=PublicSpeechDuration,proto3" json:"PublicSpeechDuration,omitempty"`
	AdditionalToolTipId               int64                  `protobuf:"varint,27,opt,name=AdditionalToolTipId,proto3" json:"AdditionalToolTipId,omitempty"`
	TextureSkillCardForFormConversion string                 `protobuf:"bytes,28,opt,name=TextureSkillCardForFormConversion,proto3" json:"TextureSkillCardForFormConversion,omitempty"`
	SkillCardLabelPath                string                 `protobuf:"bytes,29,opt,name=SkillCardLabelPath,proto3" json:"SkillCardLabelPath,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *SkillExcelTable) Reset() {
	*x = SkillExcelTable{}
	mi := &file_excel_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillExcelTable) ProtoMessage() {}

func (x *SkillExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillExcelTable.ProtoReflect.Descriptor instead.
func (*SkillExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{17}
}

func (x *SkillExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SkillExcelTable) GetLocalizeSkillId() int64 {
	if x != nil {
		return x.LocalizeSkillId
	}
	return 0
}

func (x *SkillExcelTable) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *SkillExcelTable) GetSkillDataKey() string {
	if x != nil {
		return x.SkillDataKey
	}
	return ""
}

func (x *SkillExcelTable) GetVisualDataKey() string {
	if x != nil {
		return x.VisualDataKey
	}
	return ""
}

func (x *SkillExcelTable) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SkillExcelTable) GetSkillCost() int64 {
	if x != nil {
		return x.SkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetExtraSkillCost() int64 {
	if x != nil {
		return x.ExtraSkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetEnemySkillCost() int64 {
	if x != nil {
		return x.EnemySkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetExtraEnemySkillCost() int64 {
	if x != nil {
		return x.ExtraEnemySkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetNPCSkillCost() int64 {
	if x != nil {
		return x.NPCSkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetExtraNPCSkillCost() int64 {
	if x != nil {
		return x.ExtraNPCSkillCost
	}
	return 0
}

func (x *SkillExcelTable) GetBulletType() string {
	if x != nil {
		return x.BulletType
	}
	return ""
}

func (x *SkillExcelTable) GetStartCoolTime() int64 {
	if x != nil {
		return x.StartCoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetCoolTime() int64 {
	if x != nil {
		return x.CoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetEnemyStartCoolTime() int64 {
	if x != nil {
		return x.EnemyStartCoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetEnemyCoolTime() int64 {
	if x != nil {
		return x.EnemyCoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetNPCStartCoolTime() int64 {
	if x != nil {
		return x.NPCStartCoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetNPCCoolTime() int64 {
	if x != nil {
		return x.NPCCoolTime
	}
	return 0
}

func (x *SkillExcelTable) GetUseAtg() int64 {
	if x != nil {
		return x.UseAtg
	}
	return 0
}

func (x *SkillExcelTable) GetRequireCharacterLevel() int64 {
	if x != nil {
		return x.RequireCharacterLevel
	}
	return 0
}

func (x *SkillExcelTable) GetRequireLevelUpMaterial() int64 {
	if x != nil {
		return x.RequireLevelUpMaterial
	}
	return 0
}

func (x *SkillExcelTable) GetIconName() string {
	if x != nil {
		return x.IconName
	}
	return ""
}

func (x *SkillExcelTable) GetIsShowInfo() bool {
	if x != nil {
		return x.IsShowInfo
	}
	return false
}

func (x *SkillExcelTable) GetIsShowSpeechbubble() bool {
	if x != nil {
		return x.IsShowSpeechbubble
	}
	return false
}

func (x *SkillExcelTable) GetPublicSpeechDuration() int64 {
	if x != nil {
		return x.PublicSpeechDuration
	}
	return 0
}

func (x *SkillExcelTable) GetAdditionalToolTipId() int64 {
	if x != nil {
		return x.AdditionalToolTipId
	}
	return 0
}

func (x *SkillExcelTable) GetTextureSkillCardForFormConversion() string {
	if x != nil {
		return x.TextureSkillCardForFormConversion
	}
	return ""
}

func (x *SkillExcelTable) GetSkillCardLabelPath() string {
	if x != nil {
		return x.SkillCardLabelPath
	}
	return ""
}

type RecipeIngredientExcelTable struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RecipeType_          string                 `protobuf:"bytes,2,opt,name=RecipeType_,json=RecipeType,proto3" json:"RecipeType_,omitempty"`
	CostParcelType       []string               `protobuf:"bytes,3,rep,name=CostParcelType,proto3" json:"CostParcelType,omitempty"`
	CostId               []int64                `protobuf:"varint,4,rep,packed,name=CostId,proto3" json:"CostId,omitempty"`
	CostAmount           []int64                `protobuf:"varint,5,rep,packed,name=CostAmount,proto3" json:"CostAmount,omitempty"`
	IngredientParcelType []string               `protobuf:"bytes,6,rep,name=IngredientParcelType,proto3" json:"IngredientParcelType,omitempty"`
	IngredientId         []int64                `protobuf:"varint,7,rep,packed,name=IngredientId,proto3" json:"IngredientId,omitempty"`
	IngredientAmount     []int64                `protobuf:"varint,8,rep,packed,name=IngredientAmount,proto3" json:"IngredientAmount,omitempty"`
	CostTimeInSecond     int64                  `protobuf:"varint,9,opt,name=CostTimeInSecond,proto3" json:"CostTimeInSecond,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RecipeIngredientExcelTable) Reset() {
	*x = RecipeIngredientExcelTable{}
	mi := &file_excel_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeIngredientExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeIngredientExcelTable) ProtoMessage() {}

func (x *RecipeIngredientExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeIngredientExcelTable.ProtoReflect.Descriptor instead.
func (*RecipeIngredientExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{18}
}

func (x *RecipeIngredientExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RecipeIngredientExcelTable) GetRecipeType_() string {
	if x != nil {
		return x.RecipeType_
	}
	return ""
}

func (x *RecipeIngredientExcelTable) GetCostParcelType() []string {
	if x != nil {
		return x.CostParcelType
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetCostId() []int64 {
	if x != nil {
		return x.CostId
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetCostAmount() []int64 {
	if x != nil {
		return x.CostAmount
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetIngredientParcelType() []string {
	if x != nil {
		return x.IngredientParcelType
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetIngredientId() []int64 {
	if x != nil {
		return x.IngredientId
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetIngredientAmount() []int64 {
	if x != nil {
		return x.IngredientAmount
	}
	return nil
}

func (x *RecipeIngredientExcelTable) GetCostTimeInSecond() int64 {
	if x != nil {
		return x.CostTimeInSecond
	}
	return 0
}

type CampaignStageExcelTable struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	Id                            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Deprecated                    bool                   `protobuf:"varint,2,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`
	Name                          string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	StageNumber                   string                 `protobuf:"bytes,4,opt,name=StageNumber,proto3" json:"StageNumber,omitempty"`
	CleardScenarioId              int64                  `protobuf:"varint,5,opt,name=CleardScenarioId,proto3" json:"CleardScenarioId,omitempty"`
	BattleDuration                int64                  `protobuf:"varint,6,opt,name=BattleDuration,proto3" json:"BattleDuration,omitempty"`
	StageEnterCostType            string                 `protobuf:"bytes,7,opt,name=StageEnterCostType,proto3" json:"StageEnterCostType,omitempty"`
	StageEnterCostId              int64                  `protobuf:"varint,8,opt,name=StageEnterCostId,proto3" json:"StageEnterCostId,omitempty"`
	StageEnterCostAmount          int64                  `protobuf:"varint,9,opt,name=StageEnterCostAmount,proto3" json:"StageEnterCostAmount,omitempty"`
	StageEnterEchelonCount        int64                  `protobuf:"varint,10,opt,name=StageEnterEchelonCount,proto3" json:"StageEnterEchelonCount,omitempty"`
	StarConditionTacticRankSCount int64                  `protobuf:"varint,11,opt,name=StarConditionTacticRankSCount,proto3" json:"StarConditionTacticRankSCount,omitempty"`
	StarConditionTurnCount        int64                  `protobuf:"varint,12,opt,name=StarConditionTurnCount,proto3" json:"StarConditionTurnCount,omitempty"`
	EnterScenarioGroupId          []string               `protobuf:"bytes,13,rep,name=EnterScenarioGroupId,proto3" json:"EnterScenarioGroupId,omitempty"`
	ClearScenarioGroupId          []string               `protobuf:"bytes,14,rep,name=ClearScenarioGroupId,proto3" json:"ClearScenarioGroupId,omitempty"`
	StrategyMap                   string                 `protobuf:"bytes,15,opt,name=StrategyMap,proto3" json:"StrategyMap,omitempty"`
	StrategyMapBG                 string                 `protobuf:"bytes,16,opt,name=StrategyMapBG,proto3" json:"StrategyMapBG,omitempty"`
	CampaignStageRewardId         int64                  `protobuf:"varint,17,opt,name=CampaignStageRewardId,proto3" json:"CampaignStageRewardId,omitempty"`
	MaxTurn                       int64                  `protobuf:"varint,18,opt,name=MaxTurn,proto3" json:"MaxTurn,omitempty"`
	StageTopography               string                 `protobuf:"bytes,19,opt,name=StageTopography,proto3" json:"StageTopography,omitempty"`
	RecommandLevel                int64                  `protobuf:"varint,20,opt,name=RecommandLevel,proto3" json:"RecommandLevel,omitempty"`
	StrategyEnvironment           string                 `protobuf:"bytes,22,opt,name=StrategyEnvironment,proto3" json:"StrategyEnvironment,omitempty"`
	GroundId                      int64                  `protobuf:"varint,23,opt,name=GroundId,proto3" json:"GroundId,omitempty"`
	StrategySkipGroundId          int64                  `protobuf:"varint,24,opt,name=StrategySkipGroundId,proto3" json:"StrategySkipGroundId,omitempty"`
	ContentType                   string                 `protobuf:"bytes,25,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	FirstClearReportEventName     string                 `protobuf:"bytes,27,opt,name=FirstClearReportEventName,proto3" json:"FirstClearReportEventName,omitempty"`
	TacticRewardExp               int64                  `protobuf:"varint,28,opt,name=TacticRewardExp,proto3" json:"TacticRewardExp,omitempty"`
	FixedEchelonId                int64                  `protobuf:"varint,29,opt,name=FixedEchelonId,proto3" json:"FixedEchelonId,omitempty"`
	EchelonExtensionType          string                 `protobuf:"bytes,30,opt,name=EchelonExtensionType,proto3" json:"EchelonExtensionType,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CampaignStageExcelTable) Reset() {
	*x = CampaignStageExcelTable{}
	mi := &file_excel_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignStageExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignStageExcelTable) ProtoMessage() {}

func (x *CampaignStageExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignStageExcelTable.ProtoReflect.Descriptor instead.
func (*CampaignStageExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{19}
}

func (x *CampaignStageExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CampaignStageExcelTable) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *CampaignStageExcelTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CampaignStageExcelTable) GetStageNumber() string {
	if x != nil {
		return x.StageNumber
	}
	return ""
}

func (x *CampaignStageExcelTable) GetCleardScenarioId() int64 {
	if x != nil {
		return x.CleardScenarioId
	}
	return 0
}

func (x *CampaignStageExcelTable) GetBattleDuration() int64 {
	if x != nil {
		return x.BattleDuration
	}
	return 0
}

func (x *CampaignStageExcelTable) GetStageEnterCostType() string {
	if x != nil {
		return x.StageEnterCostType
	}
	return ""
}

func (x *CampaignStageExcelTable) GetStageEnterCostId() int64 {
	if x != nil {
		return x.StageEnterCostId
	}
	return 0
}

func (x *CampaignStageExcelTable) GetStageEnterCostAmount() int64 {
	if x != nil {
		return x.StageEnterCostAmount
	}
	return 0
}

func (x *CampaignStageExcelTable) GetStageEnterEchelonCount() int64 {
	if x != nil {
		return x.StageEnterEchelonCount
	}
	return 0
}

func (x *CampaignStageExcelTable) GetStarConditionTacticRankSCount() int64 {
	if x != nil {
		return x.StarConditionTacticRankSCount
	}
	return 0
}

func (x *CampaignStageExcelTable) GetStarConditionTurnCount() int64 {
	if x != nil {
		return x.StarConditionTurnCount
	}
	return 0
}

func (x *CampaignStageExcelTable) GetEnterScenarioGroupId() []string {
	if x != nil {
		return x.EnterScenarioGroupId
	}
	return nil
}

func (x *CampaignStageExcelTable) GetClearScenarioGroupId() []string {
	if x != nil {
		return x.ClearScenarioGroupId
	}
	return nil
}

func (x *CampaignStageExcelTable) GetStrategyMap() string {
	if x != nil {
		return x.StrategyMap
	}
	return ""
}

func (x *CampaignStageExcelTable) GetStrategyMapBG() string {
	if x != nil {
		return x.StrategyMapBG
	}
	return ""
}

func (x *CampaignStageExcelTable) GetCampaignStageRewardId() int64 {
	if x != nil {
		return x.CampaignStageRewardId
	}
	return 0
}

func (x *CampaignStageExcelTable) GetMaxTurn() int64 {
	if x != nil {
		return x.MaxTurn
	}
	return 0
}

func (x *CampaignStageExcelTable) GetStageTopography() string {
	if x != nil {
		return x.StageTopography
	}
	return ""
}

func (x *CampaignStageExcelTable) GetRecommandLevel() int64 {
	if x != nil {
		return x.RecommandLevel
	}
	return 0
}

func (x *CampaignStageExcelTable) GetStrategyEnvironment() string {
	if x != nil {
		return x.StrategyEnvironment
	}
	return ""
}

func (x *CampaignStageExcelTable) GetGroundId() int64 {
	if x != nil {
		return x.GroundId
	}
	return 0
}

func (x *CampaignStageExcelTable) GetStrategySkipGroundId() int64 {
	if x != nil {
		return x.StrategySkipGroundId
	}
	return 0
}

func (x *CampaignStageExcelTable) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *CampaignStageExcelTable) GetFirstClearReportEventName() string {
	if x != nil {
		return x.FirstClearReportEventName
	}
	return ""
}

func (x *CampaignStageExcelTable) GetTacticRewardExp() int64 {
	if x != nil {
		return x.TacticRewardExp
	}
	return 0
}

func (x *CampaignStageExcelTable) GetFixedEchelonId() int64 {
	if x != nil {
		return x.FixedEchelonId
	}
	return 0
}

func (x *CampaignStageExcelTable) GetEchelonExtensionType() string {
	if x != nil {
		return x.EchelonExtensionType
	}
	return ""
}

type CampaignUnitExcelTable struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Key                  int64                  `protobuf:"varint,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Name                 string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	PrefabName           string                 `protobuf:"bytes,4,opt,name=PrefabName,proto3" json:"PrefabName,omitempty"`
	StrategyPrefabName   string                 `protobuf:"bytes,5,opt,name=StrategyPrefabName,proto3" json:"StrategyPrefabName,omitempty"`
	EnterScenarioGroupId []string               `protobuf:"bytes,6,rep,name=EnterScenarioGroupId,proto3" json:"EnterScenarioGroupId,omitempty"`
	ClearScenarioGroupId []string               `protobuf:"bytes,7,rep,name=ClearScenarioGroupId,proto3" json:"ClearScenarioGroupId,omitempty"`
	GroundId             int64                  `protobuf:"varint,8,opt,name=GroundId,proto3" json:"GroundId,omitempty"`
	MoveRange            int64                  `protobuf:"varint,9,opt,name=MoveRange,proto3" json:"MoveRange,omitempty"`
	AIMoveType           string                 `protobuf:"bytes,10,opt,name=AIMoveType,proto3" json:"AIMoveType,omitempty"`
	Grade                string                 `protobuf:"bytes,11,opt,name=Grade,proto3" json:"Grade,omitempty"`
	EnvironmentType      string                 `protobuf:"bytes,12,opt,name=EnvironmentType,proto3" json:"EnvironmentType,omitempty"`
	Scale                float64                `protobuf:"fixed64,13,opt,name=Scale,proto3" json:"Scale,omitempty"`
	IsTacticSkip         bool                   `protobuf:"varint,14,opt,name=IsTacticSkip,proto3" json:"IsTacticSkip,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CampaignUnitExcelTable) Reset() {
	*x = CampaignUnitExcelTable{}
	mi := &file_excel_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignUnitExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignUnitExcelTable) ProtoMessage() {}

func (x *CampaignUnitExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignUnitExcelTable.ProtoReflect.Descriptor instead.
func (*CampaignUnitExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{20}
}

func (x *CampaignUnitExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CampaignUnitExcelTable) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *CampaignUnitExcelTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CampaignUnitExcelTable) GetPrefabName() string {
	if x != nil {
		return x.PrefabName
	}
	return ""
}

func (x *CampaignUnitExcelTable) GetStrategyPrefabName() string {
	if x != nil {
		return x.StrategyPrefabName
	}
	return ""
}

func (x *CampaignUnitExcelTable) GetEnterScenarioGroupId() []string {
	if x != nil {
		return x.EnterScenarioGroupId
	}
	return nil
}

func (x *CampaignUnitExcelTable) GetClearScenarioGroupId() []string {
	if x != nil {
		return x.ClearScenarioGroupId
	}
	return nil
}

func (x *CampaignUnitExcelTable) GetGroundId() int64 {
	if x != nil {
		return x.GroundId
	}
	return 0
}

func (x *CampaignUnitExcelTable) GetMoveRange() int64 {
	if x != nil {
		return x.MoveRange
	}
	return 0
}

func (x *CampaignUnitExcelTable) GetAIMoveType() string {
	if x != nil {
		return x.AIMoveType
	}
	return ""
}

func (x *CampaignUnitExcelTable) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *CampaignUnitExcelTable) GetEnvironmentType() string {
	if x != nil {
		return x.EnvironmentType
	}
	return ""
}

func (x *CampaignUnitExcelTable) GetScale() float64 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *CampaignUnitExcelTable) GetIsTacticSkip() bool {
	if x != nil {
		return x.IsTacticSkip
	}
	return false
}

type WeekDungeonExcelTable struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	StageId                int64                  `protobuf:"varint,1,opt,name=StageId,proto3" json:"StageId,omitempty"`
	WeekDungeonType        string                 `protobuf:"bytes,2,opt,name=WeekDungeonType,proto3" json:"WeekDungeonType,omitempty"`
	Difficulty             int64                  `protobuf:"varint,3,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	BattleDuration         int64                  `protobuf:"varint,4,opt,name=BattleDuration,proto3" json:"BattleDuration,omitempty"`
	PrevStageId            int64                  `protobuf:"varint,5,opt,name=PrevStageId,proto3" json:"PrevStageId,omitempty"`
	StageEnterCostType     []string               `protobuf:"bytes,6,rep,name=StageEnterCostType,proto3" json:"StageEnterCostType,omitempty"`
	StageEnterCostId       []int64                `protobuf:"varint,7,rep,packed,name=StageEnterCostId,proto3" json:"StageEnterCostId,omitempty"`
	StageEnterCostAmount   []int64                `protobuf:"varint,8,rep,packed,name=StageEnterCostAmount,proto3" json:"StageEnterCostAmount,omitempty"`
	GroundId               int64                  `protobuf:"varint,9,opt,name=GroundId,proto3" json:"GroundId,omitempty"`
	StarGoal               []string               `protobuf:"bytes,10,rep,name=StarGoal,proto3" json:"StarGoal,omitempty"`
	StarGoalAmount         []float64              `protobuf:"fixed64,11,rep,packed,name=StarGoalAmount,proto3" json:"StarGoalAmount,omitempty"`
	StageTopography        string                 `protobuf:"bytes,12,opt,name=StageTopography,proto3" json:"StageTopography,omitempty"`
	RecommandLevel         int64                  `protobuf:"varint,13,opt,name=RecommandLevel,proto3" json:"RecommandLevel,omitempty"`
	StageRewardId          int64                  `protobuf:"varint,14,opt,name=StageRewardId,proto3" json:"StageRewardId,omitempty"`
	PlayTimeLimitInSeconds int64                  `protobuf:"varint,15,opt,name=PlayTimeLimitInSeconds,proto3" json:"PlayTimeLimitInSeconds,omitempty"`
	BattleRewardExp        int64                  `protobuf:"varint,16,opt,name=BattleRewardExp,proto3" json:"BattleRewardExp,omitempty"`
	BattleRewardPlayerExp  int64                  `protobuf:"varint,17,opt,name=BattleRewardPlayerExp,proto3" json:"BattleRewardPlayerExp,omitempty"`
	GroupBuffID            []int64                `protobuf:"varint,18,rep,packed,name=GroupBuffID,proto3" json:"GroupBuffID,omitempty"`
	EchelonExtensionType   string                 `protobuf:"bytes,19,opt,name=EchelonExtensionType,proto3" json:"EchelonExtensionType,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WeekDungeonExcelTable) Reset() {
	*x = WeekDungeonExcelTable{}
	mi := &file_excel_server_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeekDungeonExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekDungeonExcelTable) ProtoMessage() {}

func (x *WeekDungeonExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekDungeonExcelTable.ProtoReflect.Descriptor instead.
func (*WeekDungeonExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{21}
}

func (x *WeekDungeonExcelTable) GetStageId() int64 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *WeekDungeonExcelTable) GetWeekDungeonType() string {
	if x != nil {
		return x.WeekDungeonType
	}
	return ""
}

func (x *WeekDungeonExcelTable) GetDifficulty() int64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *WeekDungeonExcelTable) GetBattleDuration() int64 {
	if x != nil {
		return x.BattleDuration
	}
	return 0
}

func (x *WeekDungeonExcelTable) GetPrevStageId() int64 {
	if x != nil {
		return x.PrevStageId
	}
	return 0
}

func (x *WeekDungeonExcelTable) GetStageEnterCostType() []string {
	if x != nil {
		return x.StageEnterCostType
	}
	return nil
}

func (x *WeekDungeonExcelTable) GetStageEnterCostId() []int64 {
	if x != nil {
		return x.StageEnterCostId
	}
	return nil
}

func (x *WeekDungeonExcelTable) GetStageEnterCostAmount() []int64 {
	if x != nil {
		return x.StageEnterCostAmount
	}
	return nil
}

func (x *WeekDungeonExcelTable) GetGroundId() int64 {
	if x != nil {
		return x.GroundId
	}
	return 0
}

func (x *WeekDungeonExcelTable) GetStarGoal() []string {
	if x != nil {
		return x.StarGoal
	}
	return nil
}

func (x *WeekDungeonExcelTable) GetStarGoalAmount() []float64 {
	if x != nil {
		return x.StarGoalAmount
	}
	return nil
}

func (x *WeekDungeonExcelTable) GetStageTopography() string {
	if x != nil {
		return x.StageTopography
	}
	return ""
}

func (x *WeekDungeonExcelTable) GetRecommandLevel() int64 {
	if x != nil {
		return x.RecommandLevel
	}
	return 0
}

func (x *WeekDungeonExcelTable) GetStageRewardId() int64 {
	if x != nil {
		return x.StageRewardId
	}
	return 0
}

func (x *WeekDungeonExcelTable) GetPlayTimeLimitInSeconds() int64 {
	if x != nil {
		return x.PlayTimeLimitInSeconds
	}
	return 0
}

func (x *WeekDungeonExcelTable) GetBattleRewardExp() int64 {
	if x != nil {
		return x.BattleRewardExp
	}
	return 0
}

func (x *WeekDungeonExcelTable) GetBattleRewardPlayerExp() int64 {
	if x != nil {
		return x.BattleRewardPlayerExp
	}
	return 0
}

func (x *WeekDungeonExcelTable) GetGroupBuffID() []int64 {
	if x != nil {
		return x.GroupBuffID
	}
	return nil
}

func (x *WeekDungeonExcelTable) GetEchelonExtensionType() string {
	if x != nil {
		return x.EchelonExtensionType
	}
	return ""
}

type SchoolDungeonStageExcel struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	StageId                           int64                  `protobuf:"varint,1,opt,name=StageId,proto3" json:"StageId,omitempty"`
	DungeonType                       string                 `protobuf:"bytes,2,opt,name=DungeonType,proto3" json:"DungeonType,omitempty"`
	Difficulty                        int64                  `protobuf:"varint,3,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	BattleDuration                    int64                  `protobuf:"varint,4,opt,name=BattleDuration,proto3" json:"BattleDuration,omitempty"`
	PrevStageId                       int64                  `protobuf:"varint,5,opt,name=PrevStageId,proto3" json:"PrevStageId,omitempty"`
	StageEnterCostTypeLength          int64                  `protobuf:"varint,6,opt,name=StageEnterCostTypeLength,proto3" json:"StageEnterCostTypeLength,omitempty"`
	StageEnterCostIdLength            int64                  `protobuf:"varint,7,opt,name=StageEnterCostIdLength,proto3" json:"StageEnterCostIdLength,omitempty"`
	StageEnterCostAmountLength        int64                  `protobuf:"varint,8,opt,name=StageEnterCostAmountLength,proto3" json:"StageEnterCostAmountLength,omitempty"`
	StageEnterCostMinimumAmountLength int64                  `protobuf:"varint,9,opt,name=StageEnterCostMinimumAmountLength,proto3" json:"StageEnterCostMinimumAmountLength,omitempty"`
	GroundId                          int64                  `protobuf:"varint,10,opt,name=GroundId,proto3" json:"GroundId,omitempty"`
	StarGoalLength                    int64                  `protobuf:"varint,11,opt,name=StarGoalLength,proto3" json:"StarGoalLength,omitempty"`
	StarGoalAmountLength              int64                  `protobuf:"varint,12,opt,name=StarGoalAmountLength,proto3" json:"StarGoalAmountLength,omitempty"`
	StageTopography                   string                 `protobuf:"bytes,13,opt,name=StageTopography,proto3" json:"StageTopography,omitempty"`
	RecommandLevel                    int64                  `protobuf:"varint,14,opt,name=RecommandLevel,proto3" json:"RecommandLevel,omitempty"`
	StageRewardId                     int64                  `protobuf:"varint,15,opt,name=StageRewardId,proto3" json:"StageRewardId,omitempty"`
	PlayTimeLimitInSeconds            int64                  `protobuf:"varint,16,opt,name=PlayTimeLimitInSeconds,proto3" json:"PlayTimeLimitInSeconds,omitempty"`
	EchelonExtensionType              string                 `protobuf:"bytes,17,opt,name=EchelonExtensionType,proto3" json:"EchelonExtensionType,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *SchoolDungeonStageExcel) Reset() {
	*x = SchoolDungeonStageExcel{}
	mi := &file_excel_server_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchoolDungeonStageExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolDungeonStageExcel) ProtoMessage() {}

func (x *SchoolDungeonStageExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolDungeonStageExcel.ProtoReflect.Descriptor instead.
func (*SchoolDungeonStageExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{22}
}

func (x *SchoolDungeonStageExcel) GetStageId() int64 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetDungeonType() string {
	if x != nil {
		return x.DungeonType
	}
	return ""
}

func (x *SchoolDungeonStageExcel) GetDifficulty() int64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetBattleDuration() int64 {
	if x != nil {
		return x.BattleDuration
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetPrevStageId() int64 {
	if x != nil {
		return x.PrevStageId
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetStageEnterCostTypeLength() int64 {
	if x != nil {
		return x.StageEnterCostTypeLength
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetStageEnterCostIdLength() int64 {
	if x != nil {
		return x.StageEnterCostIdLength
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetStageEnterCostAmountLength() int64 {
	if x != nil {
		return x.StageEnterCostAmountLength
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetStageEnterCostMinimumAmountLength() int64 {
	if x != nil {
		return x.StageEnterCostMinimumAmountLength
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetGroundId() int64 {
	if x != nil {
		return x.GroundId
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetStarGoalLength() int64 {
	if x != nil {
		return x.StarGoalLength
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetStarGoalAmountLength() int64 {
	if x != nil {
		return x.StarGoalAmountLength
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetStageTopography() string {
	if x != nil {
		return x.StageTopography
	}
	return ""
}

func (x *SchoolDungeonStageExcel) GetRecommandLevel() int64 {
	if x != nil {
		return x.RecommandLevel
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetStageRewardId() int64 {
	if x != nil {
		return x.StageRewardId
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetPlayTimeLimitInSeconds() int64 {
	if x != nil {
		return x.PlayTimeLimitInSeconds
	}
	return 0
}

func (x *SchoolDungeonStageExcel) GetEchelonExtensionType() string {
	if x != nil {
		return x.EchelonExtensionType
	}
	return ""
}

type AccountLevelExcel struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Level           int32                  `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	Exp             int64                  `protobuf:"varint,3,opt,name=Exp,proto3" json:"Exp,omitempty"`
	APAutoChargeMax int64                  `protobuf:"varint,4,opt,name=APAutoChargeMax,proto3" json:"APAutoChargeMax,omitempty"`
	NeedReportEvent bool                   `protobuf:"varint,5,opt,name=NeedReportEvent,proto3" json:"NeedReportEvent,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AccountLevelExcel) Reset() {
	*x = AccountLevelExcel{}
	mi := &file_excel_server_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountLevelExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountLevelExcel) ProtoMessage() {}

func (x *AccountLevelExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountLevelExcel.ProtoReflect.Descriptor instead.
func (*AccountLevelExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{23}
}

func (x *AccountLevelExcel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountLevelExcel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AccountLevelExcel) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *AccountLevelExcel) GetAPAutoChargeMax() int64 {
	if x != nil {
		return x.APAutoChargeMax
	}
	return 0
}

func (x *AccountLevelExcel) GetNeedReportEvent() bool {
	if x != nil {
		return x.NeedReportEvent
	}
	return false
}

type EquipmentExcelTable struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	EquipmentCategory_   string                 `protobuf:"bytes,2,opt,name=EquipmentCategory_,json=EquipmentCategory,proto3" json:"EquipmentCategory_,omitempty"`
	Rarity_              string                 `protobuf:"bytes,3,opt,name=Rarity_,json=Rarity,proto3" json:"Rarity_,omitempty"`
	LocalizeEtcId        int64                  `protobuf:"varint,4,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	Wear                 bool                   `protobuf:"varint,5,opt,name=Wear,proto3" json:"Wear,omitempty"`
	MaxLevel             int32                  `protobuf:"varint,6,opt,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
	RecipeId             int64                  `protobuf:"varint,7,opt,name=RecipeId,proto3" json:"RecipeId,omitempty"`
	TierInit             int32                  `protobuf:"varint,8,opt,name=TierInit,proto3" json:"TierInit,omitempty"`
	NextTierEquipment    int64                  `protobuf:"varint,9,opt,name=NextTierEquipment,proto3" json:"NextTierEquipment,omitempty"`
	StackableMax         int64                  `protobuf:"varint,10,opt,name=StackableMax,proto3" json:"StackableMax,omitempty"`
	Icon                 string                 `protobuf:"bytes,11,opt,name=Icon,proto3" json:"Icon,omitempty"`
	ImageName            string                 `protobuf:"bytes,12,opt,name=ImageName,proto3" json:"ImageName,omitempty"`
	Tags                 []string               `protobuf:"bytes,13,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CraftQualityTier0    int64                  `protobuf:"varint,14,opt,name=CraftQualityTier0,proto3" json:"CraftQualityTier0,omitempty"`
	CraftQualityTier1    int64                  `protobuf:"varint,15,opt,name=CraftQualityTier1,proto3" json:"CraftQualityTier1,omitempty"`
	CraftQualityTier2    int64                  `protobuf:"varint,16,opt,name=CraftQualityTier2,proto3" json:"CraftQualityTier2,omitempty"`
	ShiftingCraftQuality int64                  `protobuf:"varint,17,opt,name=ShiftingCraftQuality,proto3" json:"ShiftingCraftQuality,omitempty"`
	ShopCategory         []string               `protobuf:"bytes,18,rep,name=ShopCategory,proto3" json:"ShopCategory,omitempty"`
	ShortcutTypeId       int64                  `protobuf:"varint,19,opt,name=ShortcutTypeId,proto3" json:"ShortcutTypeId,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EquipmentExcelTable) Reset() {
	*x = EquipmentExcelTable{}
	mi := &file_excel_server_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentExcelTable) ProtoMessage() {}

func (x *EquipmentExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentExcelTable.ProtoReflect.Descriptor instead.
func (*EquipmentExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{24}
}

func (x *EquipmentExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EquipmentExcelTable) GetEquipmentCategory_() string {
	if x != nil {
		return x.EquipmentCategory_
	}
	return ""
}

func (x *EquipmentExcelTable) GetRarity_() string {
	if x != nil {
		return x.Rarity_
	}
	return ""
}

func (x *EquipmentExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *EquipmentExcelTable) GetWear() bool {
	if x != nil {
		return x.Wear
	}
	return false
}

func (x *EquipmentExcelTable) GetMaxLevel() int32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *EquipmentExcelTable) GetRecipeId() int64 {
	if x != nil {
		return x.RecipeId
	}
	return 0
}

func (x *EquipmentExcelTable) GetTierInit() int32 {
	if x != nil {
		return x.TierInit
	}
	return 0
}

func (x *EquipmentExcelTable) GetNextTierEquipment() int64 {
	if x != nil {
		return x.NextTierEquipment
	}
	return 0
}

func (x *EquipmentExcelTable) GetStackableMax() int64 {
	if x != nil {
		return x.StackableMax
	}
	return 0
}

func (x *EquipmentExcelTable) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *EquipmentExcelTable) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *EquipmentExcelTable) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EquipmentExcelTable) GetCraftQualityTier0() int64 {
	if x != nil {
		return x.CraftQualityTier0
	}
	return 0
}

func (x *EquipmentExcelTable) GetCraftQualityTier1() int64 {
	if x != nil {
		return x.CraftQualityTier1
	}
	return 0
}

func (x *EquipmentExcelTable) GetCraftQualityTier2() int64 {
	if x != nil {
		return x.CraftQualityTier2
	}
	return 0
}

func (x *EquipmentExcelTable) GetShiftingCraftQuality() int64 {
	if x != nil {
		return x.ShiftingCraftQuality
	}
	return 0
}

func (x *EquipmentExcelTable) GetShopCategory() []string {
	if x != nil {
		return x.ShopCategory
	}
	return nil
}

func (x *EquipmentExcelTable) GetShortcutTypeId() int64 {
	if x != nil {
		return x.ShortcutTypeId
	}
	return 0
}

type EquipmentStatExcelTable struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	EquipmentId             int64                  `protobuf:"varint,1,opt,name=EquipmentId,proto3" json:"EquipmentId,omitempty"`
	StatLevelUpType_        string                 `protobuf:"bytes,2,opt,name=StatLevelUpType_,json=StatLevelUpType,proto3" json:"StatLevelUpType_,omitempty"`
	StatType                []string               `protobuf:"bytes,3,rep,name=StatType,proto3" json:"StatType,omitempty"`
	MinStat                 []int64                `protobuf:"varint,4,rep,packed,name=MinStat,proto3" json:"MinStat,omitempty"`
	MaxStat                 []int64                `protobuf:"varint,5,rep,packed,name=MaxStat,proto3" json:"MaxStat,omitempty"`
	LevelUpInsertLimit      int64                  `protobuf:"varint,6,opt,name=LevelUpInsertLimit,proto3" json:"LevelUpInsertLimit,omitempty"`
	LevelUpFeedExp          int64                  `protobuf:"varint,7,opt,name=LevelUpFeedExp,proto3" json:"LevelUpFeedExp,omitempty"`
	LevelUpFeedCostCurrency string                 `protobuf:"bytes,8,opt,name=LevelUpFeedCostCurrency,proto3" json:"LevelUpFeedCostCurrency,omitempty"`
	LevelUpFeedCostAmount   int64                  `protobuf:"varint,9,opt,name=LevelUpFeedCostAmount,proto3" json:"LevelUpFeedCostAmount,omitempty"`
	EquipmentCategory_      string                 `protobuf:"bytes,10,opt,name=EquipmentCategory_,json=EquipmentCategory,proto3" json:"EquipmentCategory_,omitempty"`
	LevelUpFeedAddExp       int64                  `protobuf:"varint,11,opt,name=LevelUpFeedAddExp,proto3" json:"LevelUpFeedAddExp,omitempty"`
	DefaultMaxLevel         int64                  `protobuf:"varint,12,opt,name=DefaultMaxLevel,proto3" json:"DefaultMaxLevel,omitempty"`
	TranscendenceMax        int64                  `protobuf:"varint,13,opt,name=TranscendenceMax,proto3" json:"TranscendenceMax,omitempty"`
	DamageFactorGroupId     string                 `protobuf:"bytes,14,opt,name=DamageFactorGroupId,proto3" json:"DamageFactorGroupId,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *EquipmentStatExcelTable) Reset() {
	*x = EquipmentStatExcelTable{}
	mi := &file_excel_server_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentStatExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentStatExcelTable) ProtoMessage() {}

func (x *EquipmentStatExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentStatExcelTable.ProtoReflect.Descriptor instead.
func (*EquipmentStatExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{25}
}

func (x *EquipmentStatExcelTable) GetEquipmentId() int64 {
	if x != nil {
		return x.EquipmentId
	}
	return 0
}

func (x *EquipmentStatExcelTable) GetStatLevelUpType_() string {
	if x != nil {
		return x.StatLevelUpType_
	}
	return ""
}

func (x *EquipmentStatExcelTable) GetStatType() []string {
	if x != nil {
		return x.StatType
	}
	return nil
}

func (x *EquipmentStatExcelTable) GetMinStat() []int64 {
	if x != nil {
		return x.MinStat
	}
	return nil
}

func (x *EquipmentStatExcelTable) GetMaxStat() []int64 {
	if x != nil {
		return x.MaxStat
	}
	return nil
}

func (x *EquipmentStatExcelTable) GetLevelUpInsertLimit() int64 {
	if x != nil {
		return x.LevelUpInsertLimit
	}
	return 0
}

func (x *EquipmentStatExcelTable) GetLevelUpFeedExp() int64 {
	if x != nil {
		return x.LevelUpFeedExp
	}
	return 0
}

func (x *EquipmentStatExcelTable) GetLevelUpFeedCostCurrency() string {
	if x != nil {
		return x.LevelUpFeedCostCurrency
	}
	return ""
}

func (x *EquipmentStatExcelTable) GetLevelUpFeedCostAmount() int64 {
	if x != nil {
		return x.LevelUpFeedCostAmount
	}
	return 0
}

func (x *EquipmentStatExcelTable) GetEquipmentCategory_() string {
	if x != nil {
		return x.EquipmentCategory_
	}
	return ""
}

func (x *EquipmentStatExcelTable) GetLevelUpFeedAddExp() int64 {
	if x != nil {
		return x.LevelUpFeedAddExp
	}
	return 0
}

func (x *EquipmentStatExcelTable) GetDefaultMaxLevel() int64 {
	if x != nil {
		return x.DefaultMaxLevel
	}
	return 0
}

func (x *EquipmentStatExcelTable) GetTranscendenceMax() int64 {
	if x != nil {
		return x.TranscendenceMax
	}
	return 0
}

func (x *EquipmentStatExcelTable) GetDamageFactorGroupId() string {
	if x != nil {
		return x.DamageFactorGroupId
	}
	return ""
}

type EquipmentLevelExcelTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         int32                  `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	TierLevelExp  []int64                `protobuf:"varint,2,rep,packed,name=TierLevelExp,proto3" json:"TierLevelExp,omitempty"`
	TotalExp      []int64                `protobuf:"varint,3,rep,packed,name=TotalExp,proto3" json:"TotalExp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EquipmentLevelExcelTable) Reset() {
	*x = EquipmentLevelExcelTable{}
	mi := &file_excel_server_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentLevelExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentLevelExcelTable) ProtoMessage() {}

func (x *EquipmentLevelExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentLevelExcelTable.ProtoReflect.Descriptor instead.
func (*EquipmentLevelExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{26}
}

func (x *EquipmentLevelExcelTable) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *EquipmentLevelExcelTable) GetTierLevelExp() []int64 {
	if x != nil {
		return x.TierLevelExp
	}
	return nil
}

func (x *EquipmentLevelExcelTable) GetTotalExp() []int64 {
	if x != nil {
		return x.TotalExp
	}
	return nil
}

type FurnitureExcelTable struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Id                         int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProductionStep_            string                 `protobuf:"bytes,2,opt,name=ProductionStep_,json=ProductionStep,proto3" json:"ProductionStep_,omitempty"`
	Rarity_                    string                 `protobuf:"bytes,3,opt,name=Rarity_,json=Rarity,proto3" json:"Rarity_,omitempty"`
	Category                   string                 `protobuf:"bytes,4,opt,name=Category,proto3" json:"Category,omitempty"`
	SubCategory                string                 `protobuf:"bytes,5,opt,name=SubCategory,proto3" json:"SubCategory,omitempty"`
	LocalizeEtcId              int64                  `protobuf:"varint,6,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	StarGradeInit              int64                  `protobuf:"varint,7,opt,name=StarGradeInit,proto3" json:"StarGradeInit,omitempty"`
	Tier                       int64                  `protobuf:"varint,8,opt,name=Tier,proto3" json:"Tier,omitempty"`
	Icon                       string                 `protobuf:"bytes,9,opt,name=Icon,proto3" json:"Icon,omitempty"`
	SizeWidth                  int64                  `protobuf:"varint,10,opt,name=SizeWidth,proto3" json:"SizeWidth,omitempty"`
	SizeHeight                 int64                  `protobuf:"varint,11,opt,name=SizeHeight,proto3" json:"SizeHeight,omitempty"`
	OtherSize                  int64                  `protobuf:"varint,12,opt,name=OtherSize,proto3" json:"OtherSize,omitempty"`
	ExpandWidth                int64                  `protobuf:"varint,13,opt,name=ExpandWidth,proto3" json:"ExpandWidth,omitempty"`
	Enable                     bool                   `protobuf:"varint,14,opt,name=Enable,proto3" json:"Enable,omitempty"`
	ReverseRotation            bool                   `protobuf:"varint,15,opt,name=ReverseRotation,proto3" json:"ReverseRotation,omitempty"`
	Prefab                     string                 `protobuf:"bytes,16,opt,name=Prefab,proto3" json:"Prefab,omitempty"`
	PrefabExpand               string                 `protobuf:"bytes,17,opt,name=PrefabExpand,proto3" json:"PrefabExpand,omitempty"`
	SubPrefab                  string                 `protobuf:"bytes,18,opt,name=SubPrefab,proto3" json:"SubPrefab,omitempty"`
	SubExpandPrefab            string                 `protobuf:"bytes,19,opt,name=SubExpandPrefab,proto3" json:"SubExpandPrefab,omitempty"`
	CornerPrefab               string                 `protobuf:"bytes,20,opt,name=CornerPrefab,proto3" json:"CornerPrefab,omitempty"`
	StackableMax               int64                  `protobuf:"varint,21,opt,name=StackableMax,proto3" json:"StackableMax,omitempty"`
	RecipeCraftId              int64                  `protobuf:"varint,22,opt,name=RecipeCraftId,proto3" json:"RecipeCraftId,omitempty"`
	SetGroudpId                int64                  `protobuf:"varint,23,opt,name=SetGroudpId,proto3" json:"SetGroudpId,omitempty"`
	ComfortBonus               int64                  `protobuf:"varint,24,opt,name=ComfortBonus,proto3" json:"ComfortBonus,omitempty"`
	VisitOperationType         int64                  `protobuf:"varint,25,opt,name=VisitOperationType,proto3" json:"VisitOperationType,omitempty"`
	VisitBonusOperationType    int64                  `protobuf:"varint,26,opt,name=VisitBonusOperationType,proto3" json:"VisitBonusOperationType,omitempty"`
	Tags                       []string               `protobuf:"bytes,27,rep,name=Tags,proto3" json:"Tags,omitempty"`
	CraftQualityTier0          int64                  `protobuf:"varint,28,opt,name=CraftQualityTier0,proto3" json:"CraftQualityTier0,omitempty"`
	CraftQualityTier1          int64                  `protobuf:"varint,29,opt,name=CraftQualityTier1,proto3" json:"CraftQualityTier1,omitempty"`
	CraftQualityTier2          int64                  `protobuf:"varint,30,opt,name=CraftQualityTier2,proto3" json:"CraftQualityTier2,omitempty"`
	ShiftingCraftQuality       int64                  `protobuf:"varint,31,opt,name=ShiftingCraftQuality,proto3" json:"ShiftingCraftQuality,omitempty"`
	FurnitureFunctionType_     string                 `protobuf:"bytes,32,opt,name=FurnitureFunctionType_,json=FurnitureFunctionType,proto3" json:"FurnitureFunctionType_,omitempty"`
	FurnitureFunctionParameter []int64                `protobuf:"varint,33,rep,packed,name=FurnitureFunctionParameter,proto3" json:"FurnitureFunctionParameter,omitempty"`
	VideoId                    int64                  `protobuf:"varint,34,opt,name=VideoId,proto3" json:"VideoId,omitempty"`
	EventCollectionId          int64                  `protobuf:"varint,35,opt,name=EventCollectionId,proto3" json:"EventCollectionId,omitempty"`
	FurnitureBubbleOffsetX     int64                  `protobuf:"varint,36,opt,name=FurnitureBubbleOffsetX,proto3" json:"FurnitureBubbleOffsetX,omitempty"`
	FurnitureBubbleOffsetY     int64                  `protobuf:"varint,37,opt,name=FurnitureBubbleOffsetY,proto3" json:"FurnitureBubbleOffsetY,omitempty"`
	CafeCharacterStateReq      []string               `protobuf:"bytes,38,rep,name=CafeCharacterStateReq,proto3" json:"CafeCharacterStateReq,omitempty"`
	CafeCharacterStateAdd      []string               `protobuf:"bytes,39,rep,name=CafeCharacterStateAdd,proto3" json:"CafeCharacterStateAdd,omitempty"`
	CafeCharacterStateMake     []string               `protobuf:"bytes,40,rep,name=CafeCharacterStateMake,proto3" json:"CafeCharacterStateMake,omitempty"`
	CafeCharacterStateOnly     []string               `protobuf:"bytes,41,rep,name=CafeCharacterStateOnly,proto3" json:"CafeCharacterStateOnly,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *FurnitureExcelTable) Reset() {
	*x = FurnitureExcelTable{}
	mi := &file_excel_server_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FurnitureExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureExcelTable) ProtoMessage() {}

func (x *FurnitureExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureExcelTable.ProtoReflect.Descriptor instead.
func (*FurnitureExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{27}
}

func (x *FurnitureExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FurnitureExcelTable) GetProductionStep_() string {
	if x != nil {
		return x.ProductionStep_
	}
	return ""
}

func (x *FurnitureExcelTable) GetRarity_() string {
	if x != nil {
		return x.Rarity_
	}
	return ""
}

func (x *FurnitureExcelTable) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *FurnitureExcelTable) GetSubCategory() string {
	if x != nil {
		return x.SubCategory
	}
	return ""
}

func (x *FurnitureExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *FurnitureExcelTable) GetStarGradeInit() int64 {
	if x != nil {
		return x.StarGradeInit
	}
	return 0
}

func (x *FurnitureExcelTable) GetTier() int64 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *FurnitureExcelTable) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *FurnitureExcelTable) GetSizeWidth() int64 {
	if x != nil {
		return x.SizeWidth
	}
	return 0
}

func (x *FurnitureExcelTable) GetSizeHeight() int64 {
	if x != nil {
		return x.SizeHeight
	}
	return 0
}

func (x *FurnitureExcelTable) GetOtherSize() int64 {
	if x != nil {
		return x.OtherSize
	}
	return 0
}

func (x *FurnitureExcelTable) GetExpandWidth() int64 {
	if x != nil {
		return x.ExpandWidth
	}
	return 0
}

func (x *FurnitureExcelTable) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *FurnitureExcelTable) GetReverseRotation() bool {
	if x != nil {
		return x.ReverseRotation
	}
	return false
}

func (x *FurnitureExcelTable) GetPrefab() string {
	if x != nil {
		return x.Prefab
	}
	return ""
}

func (x *FurnitureExcelTable) GetPrefabExpand() string {
	if x != nil {
		return x.PrefabExpand
	}
	return ""
}

func (x *FurnitureExcelTable) GetSubPrefab() string {
	if x != nil {
		return x.SubPrefab
	}
	return ""
}

func (x *FurnitureExcelTable) GetSubExpandPrefab() string {
	if x != nil {
		return x.SubExpandPrefab
	}
	return ""
}

func (x *FurnitureExcelTable) GetCornerPrefab() string {
	if x != nil {
		return x.CornerPrefab
	}
	return ""
}

func (x *FurnitureExcelTable) GetStackableMax() int64 {
	if x != nil {
		return x.StackableMax
	}
	return 0
}

func (x *FurnitureExcelTable) GetRecipeCraftId() int64 {
	if x != nil {
		return x.RecipeCraftId
	}
	return 0
}

func (x *FurnitureExcelTable) GetSetGroudpId() int64 {
	if x != nil {
		return x.SetGroudpId
	}
	return 0
}

func (x *FurnitureExcelTable) GetComfortBonus() int64 {
	if x != nil {
		return x.ComfortBonus
	}
	return 0
}

func (x *FurnitureExcelTable) GetVisitOperationType() int64 {
	if x != nil {
		return x.VisitOperationType
	}
	return 0
}

func (x *FurnitureExcelTable) GetVisitBonusOperationType() int64 {
	if x != nil {
		return x.VisitBonusOperationType
	}
	return 0
}

func (x *FurnitureExcelTable) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FurnitureExcelTable) GetCraftQualityTier0() int64 {
	if x != nil {
		return x.CraftQualityTier0
	}
	return 0
}

func (x *FurnitureExcelTable) GetCraftQualityTier1() int64 {
	if x != nil {
		return x.CraftQualityTier1
	}
	return 0
}

func (x *FurnitureExcelTable) GetCraftQualityTier2() int64 {
	if x != nil {
		return x.CraftQualityTier2
	}
	return 0
}

func (x *FurnitureExcelTable) GetShiftingCraftQuality() int64 {
	if x != nil {
		return x.ShiftingCraftQuality
	}
	return 0
}

func (x *FurnitureExcelTable) GetFurnitureFunctionType_() string {
	if x != nil {
		return x.FurnitureFunctionType_
	}
	return ""
}

func (x *FurnitureExcelTable) GetFurnitureFunctionParameter() []int64 {
	if x != nil {
		return x.FurnitureFunctionParameter
	}
	return nil
}

func (x *FurnitureExcelTable) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *FurnitureExcelTable) GetEventCollectionId() int64 {
	if x != nil {
		return x.EventCollectionId
	}
	return 0
}

func (x *FurnitureExcelTable) GetFurnitureBubbleOffsetX() int64 {
	if x != nil {
		return x.FurnitureBubbleOffsetX
	}
	return 0
}

func (x *FurnitureExcelTable) GetFurnitureBubbleOffsetY() int64 {
	if x != nil {
		return x.FurnitureBubbleOffsetY
	}
	return 0
}

func (x *FurnitureExcelTable) GetCafeCharacterStateReq() []string {
	if x != nil {
		return x.CafeCharacterStateReq
	}
	return nil
}

func (x *FurnitureExcelTable) GetCafeCharacterStateAdd() []string {
	if x != nil {
		return x.CafeCharacterStateAdd
	}
	return nil
}

func (x *FurnitureExcelTable) GetCafeCharacterStateMake() []string {
	if x != nil {
		return x.CafeCharacterStateMake
	}
	return nil
}

func (x *FurnitureExcelTable) GetCafeCharacterStateOnly() []string {
	if x != nil {
		return x.CafeCharacterStateOnly
	}
	return nil
}

type CafeRankExcelTable struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	CafeId                      int64                  `protobuf:"varint,1,opt,name=CafeId,proto3" json:"CafeId,omitempty"`
	Rank                        int32                  `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	RecipeId                    int64                  `protobuf:"varint,3,opt,name=RecipeId,proto3" json:"RecipeId,omitempty"`
	ComfortMax                  int64                  `protobuf:"varint,4,opt,name=ComfortMax,proto3" json:"ComfortMax,omitempty"`
	TagCountMax                 int64                  `protobuf:"varint,5,opt,name=TagCountMax,proto3" json:"TagCountMax,omitempty"`
	CharacterVisitMin           int32                  `protobuf:"varint,6,opt,name=CharacterVisitMin,proto3" json:"CharacterVisitMin,omitempty"`
	CharacterVisitMax           int32                  `protobuf:"varint,7,opt,name=CharacterVisitMax,proto3" json:"CharacterVisitMax,omitempty"`
	CafeVisitWeightBase         int64                  `protobuf:"varint,8,opt,name=CafeVisitWeightBase,proto3" json:"CafeVisitWeightBase,omitempty"`
	CafeVisitWeightTagBonusStep []int64                `protobuf:"varint,9,rep,packed,name=CafeVisitWeightTagBonusStep,proto3" json:"CafeVisitWeightTagBonusStep,omitempty"`
	CafeVisitWeightTagBonus     []int64                `protobuf:"varint,10,rep,packed,name=CafeVisitWeightTagBonus,proto3" json:"CafeVisitWeightTagBonus,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CafeRankExcelTable) Reset() {
	*x = CafeRankExcelTable{}
	mi := &file_excel_server_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeRankExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeRankExcelTable) ProtoMessage() {}

func (x *CafeRankExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeRankExcelTable.ProtoReflect.Descriptor instead.
func (*CafeRankExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{28}
}

func (x *CafeRankExcelTable) GetCafeId() int64 {
	if x != nil {
		return x.CafeId
	}
	return 0
}

func (x *CafeRankExcelTable) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *CafeRankExcelTable) GetRecipeId() int64 {
	if x != nil {
		return x.RecipeId
	}
	return 0
}

func (x *CafeRankExcelTable) GetComfortMax() int64 {
	if x != nil {
		return x.ComfortMax
	}
	return 0
}

func (x *CafeRankExcelTable) GetTagCountMax() int64 {
	if x != nil {
		return x.TagCountMax
	}
	return 0
}

func (x *CafeRankExcelTable) GetCharacterVisitMin() int32 {
	if x != nil {
		return x.CharacterVisitMin
	}
	return 0
}

func (x *CafeRankExcelTable) GetCharacterVisitMax() int32 {
	if x != nil {
		return x.CharacterVisitMax
	}
	return 0
}

func (x *CafeRankExcelTable) GetCafeVisitWeightBase() int64 {
	if x != nil {
		return x.CafeVisitWeightBase
	}
	return 0
}

func (x *CafeRankExcelTable) GetCafeVisitWeightTagBonusStep() []int64 {
	if x != nil {
		return x.CafeVisitWeightTagBonusStep
	}
	return nil
}

func (x *CafeRankExcelTable) GetCafeVisitWeightTagBonus() []int64 {
	if x != nil {
		return x.CafeVisitWeightTagBonus
	}
	return nil
}

type CafeProductionExcelTable struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	CafeId                          int64                  `protobuf:"varint,1,opt,name=CafeId,proto3" json:"CafeId,omitempty"`
	Rank                            int32                  `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	CafeProductionParcelType        string                 `protobuf:"bytes,3,opt,name=CafeProductionParcelType,proto3" json:"CafeProductionParcelType,omitempty"`
	CafeProductionParcelId          int64                  `protobuf:"varint,4,opt,name=CafeProductionParcelId,proto3" json:"CafeProductionParcelId,omitempty"`
	ParcelProductionCoefficient     float32                `protobuf:"fixed32,5,opt,name=ParcelProductionCoefficient,proto3" json:"ParcelProductionCoefficient,omitempty"`
	ParcelProductionCorrectionValue float32                `protobuf:"fixed32,6,opt,name=ParcelProductionCorrectionValue,proto3" json:"ParcelProductionCorrectionValue,omitempty"`
	ParcelStorageMax                int64                  `protobuf:"varint,7,opt,name=ParcelStorageMax,proto3" json:"ParcelStorageMax,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *CafeProductionExcelTable) Reset() {
	*x = CafeProductionExcelTable{}
	mi := &file_excel_server_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CafeProductionExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CafeProductionExcelTable) ProtoMessage() {}

func (x *CafeProductionExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CafeProductionExcelTable.ProtoReflect.Descriptor instead.
func (*CafeProductionExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{29}
}

func (x *CafeProductionExcelTable) GetCafeId() int64 {
	if x != nil {
		return x.CafeId
	}
	return 0
}

func (x *CafeProductionExcelTable) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *CafeProductionExcelTable) GetCafeProductionParcelType() string {
	if x != nil {
		return x.CafeProductionParcelType
	}
	return ""
}

func (x *CafeProductionExcelTable) GetCafeProductionParcelId() int64 {
	if x != nil {
		return x.CafeProductionParcelId
	}
	return 0
}

func (x *CafeProductionExcelTable) GetParcelProductionCoefficient() float32 {
	if x != nil {
		return x.ParcelProductionCoefficient
	}
	return 0
}

func (x *CafeProductionExcelTable) GetParcelProductionCorrectionValue() float32 {
	if x != nil {
		return x.ParcelProductionCorrectionValue
	}
	return 0
}

func (x *CafeProductionExcelTable) GetParcelStorageMax() int64 {
	if x != nil {
		return x.ParcelStorageMax
	}
	return 0
}

type IdCardBackgroundExcel struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Rarity            string                 `protobuf:"bytes,2,opt,name=Rarity,proto3" json:"Rarity,omitempty"`
	DisplayOrder      int64                  `protobuf:"varint,3,opt,name=DisplayOrder,proto3" json:"DisplayOrder,omitempty"`
	CollectionVisible bool                   `protobuf:"varint,4,opt,name=CollectionVisible,proto3" json:"CollectionVisible,omitempty"`
	IsDefault         bool                   `protobuf:"varint,5,opt,name=IsDefault,proto3" json:"IsDefault,omitempty"`
	BgPath            string                 `protobuf:"bytes,6,opt,name=BgPath,proto3" json:"BgPath,omitempty"`
	LocalizeEtcId     int64                  `protobuf:"varint,7,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	Icon              string                 `protobuf:"bytes,8,opt,name=Icon,proto3" json:"Icon,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *IdCardBackgroundExcel) Reset() {
	*x = IdCardBackgroundExcel{}
	mi := &file_excel_server_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdCardBackgroundExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdCardBackgroundExcel) ProtoMessage() {}

func (x *IdCardBackgroundExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdCardBackgroundExcel.ProtoReflect.Descriptor instead.
func (*IdCardBackgroundExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{30}
}

func (x *IdCardBackgroundExcel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IdCardBackgroundExcel) GetRarity() string {
	if x != nil {
		return x.Rarity
	}
	return ""
}

func (x *IdCardBackgroundExcel) GetDisplayOrder() int64 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *IdCardBackgroundExcel) GetCollectionVisible() bool {
	if x != nil {
		return x.CollectionVisible
	}
	return false
}

func (x *IdCardBackgroundExcel) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *IdCardBackgroundExcel) GetBgPath() string {
	if x != nil {
		return x.BgPath
	}
	return ""
}

func (x *IdCardBackgroundExcel) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *IdCardBackgroundExcel) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type WeekDungeonRewardExcelTable struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	GroupId                 int64                  `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	DungeonType             string                 `protobuf:"bytes,2,opt,name=DungeonType,proto3" json:"DungeonType,omitempty"`
	RewardParcelType        string                 `protobuf:"bytes,3,opt,name=RewardParcelType,proto3" json:"RewardParcelType,omitempty"`
	RewardParcelId          int64                  `protobuf:"varint,4,opt,name=RewardParcelId,proto3" json:"RewardParcelId,omitempty"`
	RewardParcelAmount      int64                  `protobuf:"varint,5,opt,name=RewardParcelAmount,proto3" json:"RewardParcelAmount,omitempty"`
	RewardParcelProbability int64                  `protobuf:"varint,6,opt,name=RewardParcelProbability,proto3" json:"RewardParcelProbability,omitempty"`
	IsDisplayed             bool                   `protobuf:"varint,7,opt,name=IsDisplayed,proto3" json:"IsDisplayed,omitempty"`
	DropItemModelPrefabPath string                 `protobuf:"bytes,8,opt,name=DropItemModelPrefabPath,proto3" json:"DropItemModelPrefabPath,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *WeekDungeonRewardExcelTable) Reset() {
	*x = WeekDungeonRewardExcelTable{}
	mi := &file_excel_server_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeekDungeonRewardExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeekDungeonRewardExcelTable) ProtoMessage() {}

func (x *WeekDungeonRewardExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeekDungeonRewardExcelTable.ProtoReflect.Descriptor instead.
func (*WeekDungeonRewardExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{31}
}

func (x *WeekDungeonRewardExcelTable) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *WeekDungeonRewardExcelTable) GetDungeonType() string {
	if x != nil {
		return x.DungeonType
	}
	return ""
}

func (x *WeekDungeonRewardExcelTable) GetRewardParcelType() string {
	if x != nil {
		return x.RewardParcelType
	}
	return ""
}

func (x *WeekDungeonRewardExcelTable) GetRewardParcelId() int64 {
	if x != nil {
		return x.RewardParcelId
	}
	return 0
}

func (x *WeekDungeonRewardExcelTable) GetRewardParcelAmount() int64 {
	if x != nil {
		return x.RewardParcelAmount
	}
	return 0
}

func (x *WeekDungeonRewardExcelTable) GetRewardParcelProbability() int64 {
	if x != nil {
		return x.RewardParcelProbability
	}
	return 0
}

func (x *WeekDungeonRewardExcelTable) GetIsDisplayed() bool {
	if x != nil {
		return x.IsDisplayed
	}
	return false
}

func (x *WeekDungeonRewardExcelTable) GetDropItemModelPrefabPath() string {
	if x != nil {
		return x.DropItemModelPrefabPath
	}
	return ""
}

type CharacterLevelExcelTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         int32                  `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	Exp           int64                  `protobuf:"varint,2,opt,name=Exp,proto3" json:"Exp,omitempty"`
	TotalExp      int64                  `protobuf:"varint,3,opt,name=TotalExp,proto3" json:"TotalExp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CharacterLevelExcelTable) Reset() {
	*x = CharacterLevelExcelTable{}
	mi := &file_excel_server_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterLevelExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterLevelExcelTable) ProtoMessage() {}

func (x *CharacterLevelExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterLevelExcelTable.ProtoReflect.Descriptor instead.
func (*CharacterLevelExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{32}
}

func (x *CharacterLevelExcelTable) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharacterLevelExcelTable) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *CharacterLevelExcelTable) GetTotalExp() int64 {
	if x != nil {
		return x.TotalExp
	}
	return 0
}

type CharacterGearExcel struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CharacterId        int64                  `protobuf:"varint,2,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`
	StatLevelUpType    string                 `protobuf:"bytes,3,opt,name=StatLevelUpType,proto3" json:"StatLevelUpType,omitempty"`
	Tier               int32                  `protobuf:"varint,4,opt,name=Tier,proto3" json:"Tier,omitempty"`
	NextTierEquipment  int64                  `protobuf:"varint,5,opt,name=NextTierEquipment,proto3" json:"NextTierEquipment,omitempty"`
	RecipeId           int64                  `protobuf:"varint,6,opt,name=RecipeId,proto3" json:"RecipeId,omitempty"`
	OpenFavorLevel     int64                  `protobuf:"varint,7,opt,name=OpenFavorLevel,proto3" json:"OpenFavorLevel,omitempty"`
	MaxLevel           int64                  `protobuf:"varint,8,opt,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
	LearnSkillSlot     string                 `protobuf:"bytes,9,opt,name=LearnSkillSlot,proto3" json:"LearnSkillSlot,omitempty"`
	StatTypeLength     int64                  `protobuf:"varint,10,opt,name=StatTypeLength,proto3" json:"StatTypeLength,omitempty"`
	MinStatValueLength int64                  `protobuf:"varint,11,opt,name=MinStatValueLength,proto3" json:"MinStatValueLength,omitempty"`
	MaxStatValueLength int64                  `protobuf:"varint,12,opt,name=MaxStatValueLength,proto3" json:"MaxStatValueLength,omitempty"`
	Icon               string                 `protobuf:"bytes,13,opt,name=Icon,proto3" json:"Icon,omitempty"`
	LocalizeEtcId      int64                  `protobuf:"varint,14,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	TagsLength         int64                  `protobuf:"varint,15,opt,name=TagsLength,proto3" json:"TagsLength,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CharacterGearExcel) Reset() {
	*x = CharacterGearExcel{}
	mi := &file_excel_server_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterGearExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterGearExcel) ProtoMessage() {}

func (x *CharacterGearExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterGearExcel.ProtoReflect.Descriptor instead.
func (*CharacterGearExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{33}
}

func (x *CharacterGearExcel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharacterGearExcel) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *CharacterGearExcel) GetStatLevelUpType() string {
	if x != nil {
		return x.StatLevelUpType
	}
	return ""
}

func (x *CharacterGearExcel) GetTier() int32 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *CharacterGearExcel) GetNextTierEquipment() int64 {
	if x != nil {
		return x.NextTierEquipment
	}
	return 0
}

func (x *CharacterGearExcel) GetRecipeId() int64 {
	if x != nil {
		return x.RecipeId
	}
	return 0
}

func (x *CharacterGearExcel) GetOpenFavorLevel() int64 {
	if x != nil {
		return x.OpenFavorLevel
	}
	return 0
}

func (x *CharacterGearExcel) GetMaxLevel() int64 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *CharacterGearExcel) GetLearnSkillSlot() string {
	if x != nil {
		return x.LearnSkillSlot
	}
	return ""
}

func (x *CharacterGearExcel) GetStatTypeLength() int64 {
	if x != nil {
		return x.StatTypeLength
	}
	return 0
}

func (x *CharacterGearExcel) GetMinStatValueLength() int64 {
	if x != nil {
		return x.MinStatValueLength
	}
	return 0
}

func (x *CharacterGearExcel) GetMaxStatValueLength() int64 {
	if x != nil {
		return x.MaxStatValueLength
	}
	return 0
}

func (x *CharacterGearExcel) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *CharacterGearExcel) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *CharacterGearExcel) GetTagsLength() int64 {
	if x != nil {
		return x.TagsLength
	}
	return 0
}

type CharacterPotentialExcel struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Id                         int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PotentialStatGroupId       int64                  `protobuf:"varint,2,opt,name=PotentialStatGroupId,proto3" json:"PotentialStatGroupId,omitempty"`
	PotentialStatBonusRateType string                 `protobuf:"bytes,3,opt,name=PotentialStatBonusRateType,proto3" json:"PotentialStatBonusRateType,omitempty"`
	IsUnnecessaryStat          bool                   `protobuf:"varint,4,opt,name=IsUnnecessaryStat,proto3" json:"IsUnnecessaryStat,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CharacterPotentialExcel) Reset() {
	*x = CharacterPotentialExcel{}
	mi := &file_excel_server_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterPotentialExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterPotentialExcel) ProtoMessage() {}

func (x *CharacterPotentialExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterPotentialExcel.ProtoReflect.Descriptor instead.
func (*CharacterPotentialExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{34}
}

func (x *CharacterPotentialExcel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CharacterPotentialExcel) GetPotentialStatGroupId() int64 {
	if x != nil {
		return x.PotentialStatGroupId
	}
	return 0
}

func (x *CharacterPotentialExcel) GetPotentialStatBonusRateType() string {
	if x != nil {
		return x.PotentialStatBonusRateType
	}
	return ""
}

func (x *CharacterPotentialExcel) GetIsUnnecessaryStat() bool {
	if x != nil {
		return x.IsUnnecessaryStat
	}
	return false
}

type CharacterPotentialStatExcel struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PotentialStatGroupId int64                  `protobuf:"varint,1,opt,name=PotentialStatGroupId,proto3" json:"PotentialStatGroupId,omitempty"`
	PotentialLevel       int32                  `protobuf:"varint,2,opt,name=PotentialLevel,proto3" json:"PotentialLevel,omitempty"`
	RecipeId             int64                  `protobuf:"varint,3,opt,name=RecipeId,proto3" json:"RecipeId,omitempty"`
	StatBonusRate        int64                  `protobuf:"varint,4,opt,name=StatBonusRate,proto3" json:"StatBonusRate,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CharacterPotentialStatExcel) Reset() {
	*x = CharacterPotentialStatExcel{}
	mi := &file_excel_server_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterPotentialStatExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterPotentialStatExcel) ProtoMessage() {}

func (x *CharacterPotentialStatExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterPotentialStatExcel.ProtoReflect.Descriptor instead.
func (*CharacterPotentialStatExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{35}
}

func (x *CharacterPotentialStatExcel) GetPotentialStatGroupId() int64 {
	if x != nil {
		return x.PotentialStatGroupId
	}
	return 0
}

func (x *CharacterPotentialStatExcel) GetPotentialLevel() int32 {
	if x != nil {
		return x.PotentialLevel
	}
	return 0
}

func (x *CharacterPotentialStatExcel) GetRecipeId() int64 {
	if x != nil {
		return x.RecipeId
	}
	return 0
}

func (x *CharacterPotentialStatExcel) GetStatBonusRate() int64 {
	if x != nil {
		return x.StatBonusRate
	}
	return 0
}

type AcademyTicketExcelTable struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	LocationRankSum    int64                  `protobuf:"varint,1,opt,name=LocationRankSum,proto3" json:"LocationRankSum,omitempty"`
	ScheduleTicktetMax int64                  `protobuf:"varint,2,opt,name=ScheduleTicktetMax,proto3" json:"ScheduleTicktetMax,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AcademyTicketExcelTable) Reset() {
	*x = AcademyTicketExcelTable{}
	mi := &file_excel_server_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyTicketExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyTicketExcelTable) ProtoMessage() {}

func (x *AcademyTicketExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyTicketExcelTable.ProtoReflect.Descriptor instead.
func (*AcademyTicketExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{36}
}

func (x *AcademyTicketExcelTable) GetLocationRankSum() int64 {
	if x != nil {
		return x.LocationRankSum
	}
	return 0
}

func (x *AcademyTicketExcelTable) GetScheduleTicktetMax() int64 {
	if x != nil {
		return x.ScheduleTicktetMax
	}
	return 0
}

type AcademyLocationExcelTable struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	LocalizeEtcId      int64                  `protobuf:"varint,2,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	OpenCondition      []string               `protobuf:"bytes,3,rep,name=OpenCondition,proto3" json:"OpenCondition,omitempty"`
	OpenConditionCount []int64                `protobuf:"varint,4,rep,packed,name=OpenConditionCount,proto3" json:"OpenConditionCount,omitempty"`
	RewardParcelType   string                 `protobuf:"bytes,5,opt,name=RewardParcelType,proto3" json:"RewardParcelType,omitempty"`
	RewardParcelId     int64                  `protobuf:"varint,6,opt,name=RewardParcelId,proto3" json:"RewardParcelId,omitempty"`
	OpenTeacherRank    int64                  `protobuf:"varint,7,opt,name=OpenTeacherRank,proto3" json:"OpenTeacherRank,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AcademyLocationExcelTable) Reset() {
	*x = AcademyLocationExcelTable{}
	mi := &file_excel_server_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyLocationExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyLocationExcelTable) ProtoMessage() {}

func (x *AcademyLocationExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyLocationExcelTable.ProtoReflect.Descriptor instead.
func (*AcademyLocationExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{37}
}

func (x *AcademyLocationExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AcademyLocationExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *AcademyLocationExcelTable) GetOpenCondition() []string {
	if x != nil {
		return x.OpenCondition
	}
	return nil
}

func (x *AcademyLocationExcelTable) GetOpenConditionCount() []int64 {
	if x != nil {
		return x.OpenConditionCount
	}
	return nil
}

func (x *AcademyLocationExcelTable) GetRewardParcelType() string {
	if x != nil {
		return x.RewardParcelType
	}
	return ""
}

func (x *AcademyLocationExcelTable) GetRewardParcelId() int64 {
	if x != nil {
		return x.RewardParcelId
	}
	return 0
}

func (x *AcademyLocationExcelTable) GetOpenTeacherRank() int64 {
	if x != nil {
		return x.OpenTeacherRank
	}
	return 0
}

type AcademyZoneExcelTable struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	LocationId            int64                  `protobuf:"varint,2,opt,name=LocationId,proto3" json:"LocationId,omitempty"`
	LocationRankForUnlock int64                  `protobuf:"varint,3,opt,name=LocationRankForUnlock,proto3" json:"LocationRankForUnlock,omitempty"`
	LocalizeEtcId         int64                  `protobuf:"varint,4,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	StudentVisitProb      []int64                `protobuf:"varint,5,rep,packed,name=StudentVisitProb,proto3" json:"StudentVisitProb,omitempty"`
	RewardGroupId         int64                  `protobuf:"varint,6,opt,name=RewardGroupId,proto3" json:"RewardGroupId,omitempty"`
	Tags                  []string               `protobuf:"bytes,7,rep,name=Tags,proto3" json:"Tags,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AcademyZoneExcelTable) Reset() {
	*x = AcademyZoneExcelTable{}
	mi := &file_excel_server_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyZoneExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyZoneExcelTable) ProtoMessage() {}

func (x *AcademyZoneExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyZoneExcelTable.ProtoReflect.Descriptor instead.
func (*AcademyZoneExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{38}
}

func (x *AcademyZoneExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AcademyZoneExcelTable) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *AcademyZoneExcelTable) GetLocationRankForUnlock() int64 {
	if x != nil {
		return x.LocationRankForUnlock
	}
	return 0
}

func (x *AcademyZoneExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *AcademyZoneExcelTable) GetStudentVisitProb() []int64 {
	if x != nil {
		return x.StudentVisitProb
	}
	return nil
}

func (x *AcademyZoneExcelTable) GetRewardGroupId() int64 {
	if x != nil {
		return x.RewardGroupId
	}
	return 0
}

func (x *AcademyZoneExcelTable) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AcademyLocationRankExcelTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rank          int64                  `protobuf:"varint,1,opt,name=Rank,proto3" json:"Rank,omitempty"`
	RankExp       int64                  `protobuf:"varint,2,opt,name=RankExp,proto3" json:"RankExp,omitempty"`
	TotalExp      int64                  `protobuf:"varint,3,opt,name=TotalExp,proto3" json:"TotalExp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcademyLocationRankExcelTable) Reset() {
	*x = AcademyLocationRankExcelTable{}
	mi := &file_excel_server_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyLocationRankExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyLocationRankExcelTable) ProtoMessage() {}

func (x *AcademyLocationRankExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyLocationRankExcelTable.ProtoReflect.Descriptor instead.
func (*AcademyLocationRankExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{39}
}

func (x *AcademyLocationRankExcelTable) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *AcademyLocationRankExcelTable) GetRankExp() int64 {
	if x != nil {
		return x.RankExp
	}
	return 0
}

func (x *AcademyLocationRankExcelTable) GetTotalExp() int64 {
	if x != nil {
		return x.TotalExp
	}
	return 0
}

type AcademyRewardExcelTable struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Location               string                 `protobuf:"bytes,1,opt,name=Location,proto3" json:"Location,omitempty"`
	ScheduleGroupId        int64                  `protobuf:"varint,2,opt,name=ScheduleGroupId,proto3" json:"ScheduleGroupId,omitempty"`
	OrderInGroup           int64                  `protobuf:"varint,3,opt,name=OrderInGroup,proto3" json:"OrderInGroup,omitempty"`
	Id                     int64                  `protobuf:"varint,4,opt,name=Id,proto3" json:"Id,omitempty"`
	ProgressTexture        string                 `protobuf:"bytes,5,opt,name=ProgressTexture,proto3" json:"ProgressTexture,omitempty"`
	LocalizeEtcId          int64                  `protobuf:"varint,6,opt,name=LocalizeEtcId,proto3" json:"LocalizeEtcId,omitempty"`
	LocationRank           int64                  `protobuf:"varint,7,opt,name=LocationRank,proto3" json:"LocationRank,omitempty"`
	FavorExp               int64                  `protobuf:"varint,8,opt,name=FavorExp,proto3" json:"FavorExp,omitempty"`
	SecretStoneAmount      int64                  `protobuf:"varint,9,opt,name=SecretStoneAmount,proto3" json:"SecretStoneAmount,omitempty"`
	SecretStoneProb        int64                  `protobuf:"varint,10,opt,name=SecretStoneProb,proto3" json:"SecretStoneProb,omitempty"`
	ExtraFavorExp          int64                  `protobuf:"varint,11,opt,name=ExtraFavorExp,proto3" json:"ExtraFavorExp,omitempty"`
	ExtraFavorExpProb      int64                  `protobuf:"varint,12,opt,name=ExtraFavorExpProb,proto3" json:"ExtraFavorExpProb,omitempty"`
	ExtraRewardParcelType  []string               `protobuf:"bytes,13,rep,name=ExtraRewardParcelType,proto3" json:"ExtraRewardParcelType,omitempty"`
	ExtraRewardParcelId    []int64                `protobuf:"varint,14,rep,packed,name=ExtraRewardParcelId,proto3" json:"ExtraRewardParcelId,omitempty"`
	ExtraRewardAmount      []int64                `protobuf:"varint,15,rep,packed,name=ExtraRewardAmount,proto3" json:"ExtraRewardAmount,omitempty"`
	ExtraRewardProb        []int64                `protobuf:"varint,16,rep,packed,name=ExtraRewardProb,proto3" json:"ExtraRewardProb,omitempty"`
	IsExtraRewardDisplayed []bool                 `protobuf:"varint,17,rep,packed,name=IsExtraRewardDisplayed,proto3" json:"IsExtraRewardDisplayed,omitempty"`
	RewardParcelType       []string               `protobuf:"bytes,18,rep,name=RewardParcelType,proto3" json:"RewardParcelType,omitempty"`
	RewardParcelId         []int64                `protobuf:"varint,19,rep,packed,name=RewardParcelId,proto3" json:"RewardParcelId,omitempty"`
	RewardAmount           []int64                `protobuf:"varint,20,rep,packed,name=RewardAmount,proto3" json:"RewardAmount,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AcademyRewardExcelTable) Reset() {
	*x = AcademyRewardExcelTable{}
	mi := &file_excel_server_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademyRewardExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademyRewardExcelTable) ProtoMessage() {}

func (x *AcademyRewardExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademyRewardExcelTable.ProtoReflect.Descriptor instead.
func (*AcademyRewardExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{40}
}

func (x *AcademyRewardExcelTable) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AcademyRewardExcelTable) GetScheduleGroupId() int64 {
	if x != nil {
		return x.ScheduleGroupId
	}
	return 0
}

func (x *AcademyRewardExcelTable) GetOrderInGroup() int64 {
	if x != nil {
		return x.OrderInGroup
	}
	return 0
}

func (x *AcademyRewardExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AcademyRewardExcelTable) GetProgressTexture() string {
	if x != nil {
		return x.ProgressTexture
	}
	return ""
}

func (x *AcademyRewardExcelTable) GetLocalizeEtcId() int64 {
	if x != nil {
		return x.LocalizeEtcId
	}
	return 0
}

func (x *AcademyRewardExcelTable) GetLocationRank() int64 {
	if x != nil {
		return x.LocationRank
	}
	return 0
}

func (x *AcademyRewardExcelTable) GetFavorExp() int64 {
	if x != nil {
		return x.FavorExp
	}
	return 0
}

func (x *AcademyRewardExcelTable) GetSecretStoneAmount() int64 {
	if x != nil {
		return x.SecretStoneAmount
	}
	return 0
}

func (x *AcademyRewardExcelTable) GetSecretStoneProb() int64 {
	if x != nil {
		return x.SecretStoneProb
	}
	return 0
}

func (x *AcademyRewardExcelTable) GetExtraFavorExp() int64 {
	if x != nil {
		return x.ExtraFavorExp
	}
	return 0
}

func (x *AcademyRewardExcelTable) GetExtraFavorExpProb() int64 {
	if x != nil {
		return x.ExtraFavorExpProb
	}
	return 0
}

func (x *AcademyRewardExcelTable) GetExtraRewardParcelType() []string {
	if x != nil {
		return x.ExtraRewardParcelType
	}
	return nil
}

func (x *AcademyRewardExcelTable) GetExtraRewardParcelId() []int64 {
	if x != nil {
		return x.ExtraRewardParcelId
	}
	return nil
}

func (x *AcademyRewardExcelTable) GetExtraRewardAmount() []int64 {
	if x != nil {
		return x.ExtraRewardAmount
	}
	return nil
}

func (x *AcademyRewardExcelTable) GetExtraRewardProb() []int64 {
	if x != nil {
		return x.ExtraRewardProb
	}
	return nil
}

func (x *AcademyRewardExcelTable) GetIsExtraRewardDisplayed() []bool {
	if x != nil {
		return x.IsExtraRewardDisplayed
	}
	return nil
}

func (x *AcademyRewardExcelTable) GetRewardParcelType() []string {
	if x != nil {
		return x.RewardParcelType
	}
	return nil
}

func (x *AcademyRewardExcelTable) GetRewardParcelId() []int64 {
	if x != nil {
		return x.RewardParcelId
	}
	return nil
}

func (x *AcademyRewardExcelTable) GetRewardAmount() []int64 {
	if x != nil {
		return x.RewardAmount
	}
	return nil
}

type SchoolDungeonRewardExcel struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	GroupId                 int64                  `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	DungeonType             string                 `protobuf:"bytes,2,opt,name=DungeonType,proto3" json:"DungeonType,omitempty"`
	RewardTag               string                 `protobuf:"bytes,3,opt,name=RewardTag,proto3" json:"RewardTag,omitempty"`
	RewardParcelType        string                 `protobuf:"bytes,4,opt,name=RewardParcelType,proto3" json:"RewardParcelType,omitempty"`
	RewardParcelId          int64                  `protobuf:"varint,5,opt,name=RewardParcelId,proto3" json:"RewardParcelId,omitempty"`
	RewardParcelAmount      int64                  `protobuf:"varint,6,opt,name=RewardParcelAmount,proto3" json:"RewardParcelAmount,omitempty"`
	RewardParcelProbability int64                  `protobuf:"varint,7,opt,name=RewardParcelProbability,proto3" json:"RewardParcelProbability,omitempty"`
	IsDisplayed             bool                   `protobuf:"varint,8,opt,name=IsDisplayed,proto3" json:"IsDisplayed,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SchoolDungeonRewardExcel) Reset() {
	*x = SchoolDungeonRewardExcel{}
	mi := &file_excel_server_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchoolDungeonRewardExcel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchoolDungeonRewardExcel) ProtoMessage() {}

func (x *SchoolDungeonRewardExcel) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchoolDungeonRewardExcel.ProtoReflect.Descriptor instead.
func (*SchoolDungeonRewardExcel) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{41}
}

func (x *SchoolDungeonRewardExcel) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SchoolDungeonRewardExcel) GetDungeonType() string {
	if x != nil {
		return x.DungeonType
	}
	return ""
}

func (x *SchoolDungeonRewardExcel) GetRewardTag() string {
	if x != nil {
		return x.RewardTag
	}
	return ""
}

func (x *SchoolDungeonRewardExcel) GetRewardParcelType() string {
	if x != nil {
		return x.RewardParcelType
	}
	return ""
}

func (x *SchoolDungeonRewardExcel) GetRewardParcelId() int64 {
	if x != nil {
		return x.RewardParcelId
	}
	return 0
}

func (x *SchoolDungeonRewardExcel) GetRewardParcelAmount() int64 {
	if x != nil {
		return x.RewardParcelAmount
	}
	return 0
}

func (x *SchoolDungeonRewardExcel) GetRewardParcelProbability() int64 {
	if x != nil {
		return x.RewardParcelProbability
	}
	return 0
}

func (x *SchoolDungeonRewardExcel) GetIsDisplayed() bool {
	if x != nil {
		return x.IsDisplayed
	}
	return false
}

type RaidSeasonManageExcelTable struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	SeasonId                 int64                  `protobuf:"varint,1,opt,name=SeasonId,proto3" json:"SeasonId,omitempty"`
	SeasonDisplay            int64                  `protobuf:"varint,2,opt,name=SeasonDisplay,proto3" json:"SeasonDisplay,omitempty"`
	SeasonStartData          string                 `protobuf:"bytes,3,opt,name=SeasonStartData,proto3" json:"SeasonStartData,omitempty"`
	SeasonEndData            string                 `protobuf:"bytes,4,opt,name=SeasonEndData,proto3" json:"SeasonEndData,omitempty"`
	SettlementEndDate        string                 `protobuf:"bytes,5,opt,name=SettlementEndDate,proto3" json:"SettlementEndDate,omitempty"`
	OpenRaidBossGroup        []string               `protobuf:"bytes,6,rep,name=OpenRaidBossGroup,proto3" json:"OpenRaidBossGroup,omitempty"`
	RankingRewardGroupId     int64                  `protobuf:"varint,7,opt,name=RankingRewardGroupId,proto3" json:"RankingRewardGroupId,omitempty"`
	MaxSeasonRewardGauage    int64                  `protobuf:"varint,8,opt,name=MaxSeasonRewardGauage,proto3" json:"MaxSeasonRewardGauage,omitempty"`
	StackedSeasonRewardGauge []int64                `protobuf:"varint,9,rep,packed,name=StackedSeasonRewardGauge,proto3" json:"StackedSeasonRewardGauge,omitempty"`
	SeasonRewardId           []int64                `protobuf:"varint,10,rep,packed,name=SeasonRewardId,proto3" json:"SeasonRewardId,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *RaidSeasonManageExcelTable) Reset() {
	*x = RaidSeasonManageExcelTable{}
	mi := &file_excel_server_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidSeasonManageExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidSeasonManageExcelTable) ProtoMessage() {}

func (x *RaidSeasonManageExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidSeasonManageExcelTable.ProtoReflect.Descriptor instead.
func (*RaidSeasonManageExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{42}
}

func (x *RaidSeasonManageExcelTable) GetSeasonId() int64 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *RaidSeasonManageExcelTable) GetSeasonDisplay() int64 {
	if x != nil {
		return x.SeasonDisplay
	}
	return 0
}

func (x *RaidSeasonManageExcelTable) GetSeasonStartData() string {
	if x != nil {
		return x.SeasonStartData
	}
	return ""
}

func (x *RaidSeasonManageExcelTable) GetSeasonEndData() string {
	if x != nil {
		return x.SeasonEndData
	}
	return ""
}

func (x *RaidSeasonManageExcelTable) GetSettlementEndDate() string {
	if x != nil {
		return x.SettlementEndDate
	}
	return ""
}

func (x *RaidSeasonManageExcelTable) GetOpenRaidBossGroup() []string {
	if x != nil {
		return x.OpenRaidBossGroup
	}
	return nil
}

func (x *RaidSeasonManageExcelTable) GetRankingRewardGroupId() int64 {
	if x != nil {
		return x.RankingRewardGroupId
	}
	return 0
}

func (x *RaidSeasonManageExcelTable) GetMaxSeasonRewardGauage() int64 {
	if x != nil {
		return x.MaxSeasonRewardGauage
	}
	return 0
}

func (x *RaidSeasonManageExcelTable) GetStackedSeasonRewardGauge() []int64 {
	if x != nil {
		return x.StackedSeasonRewardGauge
	}
	return nil
}

func (x *RaidSeasonManageExcelTable) GetSeasonRewardId() []int64 {
	if x != nil {
		return x.SeasonRewardId
	}
	return nil
}

type RaidRankingRewardExcelTable struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RankingRewardGroupId   int64                  `protobuf:"varint,1,opt,name=RankingRewardGroupId,proto3" json:"RankingRewardGroupId,omitempty"`
	Id                     int64                  `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	RankStart              int64                  `protobuf:"varint,3,opt,name=RankStart,proto3" json:"RankStart,omitempty"`
	RankEnd                int64                  `protobuf:"varint,4,opt,name=RankEnd,proto3" json:"RankEnd,omitempty"`
	PercentRankStart       int64                  `protobuf:"varint,5,opt,name=PercentRankStart,proto3" json:"PercentRankStart,omitempty"`
	PercentRankEnd         int64                  `protobuf:"varint,6,opt,name=PercentRankEnd,proto3" json:"PercentRankEnd,omitempty"`
	Tier                   int32                  `protobuf:"varint,7,opt,name=Tier,proto3" json:"Tier,omitempty"`
	RewardParcelType       []string               `protobuf:"bytes,8,rep,name=RewardParcelType,proto3" json:"RewardParcelType,omitempty"`
	RewardParcelUniqueId   []int64                `protobuf:"varint,9,rep,packed,name=RewardParcelUniqueId,proto3" json:"RewardParcelUniqueId,omitempty"`
	RewardParcelUniqueName []string               `protobuf:"bytes,10,rep,name=RewardParcelUniqueName,proto3" json:"RewardParcelUniqueName,omitempty"`
	RewardParcelAmount     []int64                `protobuf:"varint,11,rep,packed,name=RewardParcelAmount,proto3" json:"RewardParcelAmount,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RaidRankingRewardExcelTable) Reset() {
	*x = RaidRankingRewardExcelTable{}
	mi := &file_excel_server_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidRankingRewardExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidRankingRewardExcelTable) ProtoMessage() {}

func (x *RaidRankingRewardExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidRankingRewardExcelTable.ProtoReflect.Descriptor instead.
func (*RaidRankingRewardExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{43}
}

func (x *RaidRankingRewardExcelTable) GetRankingRewardGroupId() int64 {
	if x != nil {
		return x.RankingRewardGroupId
	}
	return 0
}

func (x *RaidRankingRewardExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RaidRankingRewardExcelTable) GetRankStart() int64 {
	if x != nil {
		return x.RankStart
	}
	return 0
}

func (x *RaidRankingRewardExcelTable) GetRankEnd() int64 {
	if x != nil {
		return x.RankEnd
	}
	return 0
}

func (x *RaidRankingRewardExcelTable) GetPercentRankStart() int64 {
	if x != nil {
		return x.PercentRankStart
	}
	return 0
}

func (x *RaidRankingRewardExcelTable) GetPercentRankEnd() int64 {
	if x != nil {
		return x.PercentRankEnd
	}
	return 0
}

func (x *RaidRankingRewardExcelTable) GetTier() int32 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *RaidRankingRewardExcelTable) GetRewardParcelType() []string {
	if x != nil {
		return x.RewardParcelType
	}
	return nil
}

func (x *RaidRankingRewardExcelTable) GetRewardParcelUniqueId() []int64 {
	if x != nil {
		return x.RewardParcelUniqueId
	}
	return nil
}

func (x *RaidRankingRewardExcelTable) GetRewardParcelUniqueName() []string {
	if x != nil {
		return x.RewardParcelUniqueName
	}
	return nil
}

func (x *RaidRankingRewardExcelTable) GetRewardParcelAmount() []int64 {
	if x != nil {
		return x.RewardParcelAmount
	}
	return nil
}

type RaidStageExcelTable struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	Id                            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UseBossIndex                  bool                   `protobuf:"varint,2,opt,name=UseBossIndex,proto3" json:"UseBossIndex,omitempty"`
	UseBossAIPhaseSync            bool                   `protobuf:"varint,3,opt,name=UseBossAIPhaseSync,proto3" json:"UseBossAIPhaseSync,omitempty"`
	RaidBossGroup                 string                 `protobuf:"bytes,4,opt,name=RaidBossGroup,proto3" json:"RaidBossGroup,omitempty"`
	PortraitPath                  string                 `protobuf:"bytes,5,opt,name=PortraitPath,proto3" json:"PortraitPath,omitempty"`
	BGPath                        string                 `protobuf:"bytes,6,opt,name=BGPath,proto3" json:"BGPath,omitempty"`
	RaidCharacterId               int64                  `protobuf:"varint,7,opt,name=RaidCharacterId,proto3" json:"RaidCharacterId,omitempty"`
	BossCharacterId               []int64                `protobuf:"varint,8,rep,packed,name=BossCharacterId,proto3" json:"BossCharacterId,omitempty"`
	Difficulty                    string                 `protobuf:"bytes,9,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	DifficultyOpenCondition       bool                   `protobuf:"varint,10,opt,name=DifficultyOpenCondition,proto3" json:"DifficultyOpenCondition,omitempty"`
	MaxPlayerCount                int64                  `protobuf:"varint,11,opt,name=MaxPlayerCount,proto3" json:"MaxPlayerCount,omitempty"`
	RaidRoomLifeTime              int64                  `protobuf:"varint,12,opt,name=RaidRoomLifeTime,proto3" json:"RaidRoomLifeTime,omitempty"`
	BattleDuration                int64                  `protobuf:"varint,13,opt,name=BattleDuration,proto3" json:"BattleDuration,omitempty"`
	GroundId                      int64                  `protobuf:"varint,14,opt,name=GroundId,proto3" json:"GroundId,omitempty"`
	GroundDevName                 string                 `protobuf:"bytes,15,opt,name=GroundDevName,proto3" json:"GroundDevName,omitempty"`
	EnterTimeLine                 string                 `protobuf:"bytes,16,opt,name=EnterTimeLine,proto3" json:"EnterTimeLine,omitempty"`
	TacticEnvironment             string                 `protobuf:"bytes,17,opt,name=TacticEnvironment,proto3" json:"TacticEnvironment,omitempty"`
	DefaultClearScore             int64                  `protobuf:"varint,18,opt,name=DefaultClearScore,proto3" json:"DefaultClearScore,omitempty"`
	MaximumScore                  int64                  `protobuf:"varint,19,opt,name=MaximumScore,proto3" json:"MaximumScore,omitempty"`
	PerSecondMinusScore           int64                  `protobuf:"varint,20,opt,name=PerSecondMinusScore,proto3" json:"PerSecondMinusScore,omitempty"`
	HPPercentScore                int64                  `protobuf:"varint,21,opt,name=HPPercentScore,proto3" json:"HPPercentScore,omitempty"`
	MinimumAcquisitionScore       int64                  `protobuf:"varint,22,opt,name=MinimumAcquisitionScore,proto3" json:"MinimumAcquisitionScore,omitempty"`
	MaximumAcquisitionScore       int64                  `protobuf:"varint,23,opt,name=MaximumAcquisitionScore,proto3" json:"MaximumAcquisitionScore,omitempty"`
	RaidRewardGroupId             int64                  `protobuf:"varint,24,opt,name=RaidRewardGroupId,proto3" json:"RaidRewardGroupId,omitempty"`
	BattleReadyTimelinePath       []string               `protobuf:"bytes,25,rep,name=BattleReadyTimelinePath,proto3" json:"BattleReadyTimelinePath,omitempty"`
	BattleReadyTimelinePhaseStart []int64                `protobuf:"varint,26,rep,packed,name=BattleReadyTimelinePhaseStart,proto3" json:"BattleReadyTimelinePhaseStart,omitempty"`
	BattleReadyTimelinePhaseEnd   []int64                `protobuf:"varint,27,rep,packed,name=BattleReadyTimelinePhaseEnd,proto3" json:"BattleReadyTimelinePhaseEnd,omitempty"`
	VictoryTimelinePath           string                 `protobuf:"bytes,28,opt,name=VictoryTimelinePath,proto3" json:"VictoryTimelinePath,omitempty"`
	PhaseChangeTimelinePath       string                 `protobuf:"bytes,29,opt,name=PhaseChangeTimelinePath,proto3" json:"PhaseChangeTimelinePath,omitempty"`
	TimeLinePhase                 int64                  `protobuf:"varint,30,opt,name=TimeLinePhase,proto3" json:"TimeLinePhase,omitempty"`
	EnterScenarioKey              int64                  `protobuf:"varint,31,opt,name=EnterScenarioKey,proto3" json:"EnterScenarioKey,omitempty"`
	ClearScenarioKey              int64                  `protobuf:"varint,32,opt,name=ClearScenarioKey,proto3" json:"ClearScenarioKey,omitempty"`
	ShowSkillCard                 bool                   `protobuf:"varint,33,opt,name=ShowSkillCard,proto3" json:"ShowSkillCard,omitempty"`
	BossBGInfoKey                 int64                  `protobuf:"varint,34,opt,name=BossBGInfoKey,proto3" json:"BossBGInfoKey,omitempty"`
	EchelonExtensionType          string                 `protobuf:"bytes,35,opt,name=EchelonExtensionType,proto3" json:"EchelonExtensionType,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *RaidStageExcelTable) Reset() {
	*x = RaidStageExcelTable{}
	mi := &file_excel_server_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidStageExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidStageExcelTable) ProtoMessage() {}

func (x *RaidStageExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidStageExcelTable.ProtoReflect.Descriptor instead.
func (*RaidStageExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{44}
}

func (x *RaidStageExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RaidStageExcelTable) GetUseBossIndex() bool {
	if x != nil {
		return x.UseBossIndex
	}
	return false
}

func (x *RaidStageExcelTable) GetUseBossAIPhaseSync() bool {
	if x != nil {
		return x.UseBossAIPhaseSync
	}
	return false
}

func (x *RaidStageExcelTable) GetRaidBossGroup() string {
	if x != nil {
		return x.RaidBossGroup
	}
	return ""
}

func (x *RaidStageExcelTable) GetPortraitPath() string {
	if x != nil {
		return x.PortraitPath
	}
	return ""
}

func (x *RaidStageExcelTable) GetBGPath() string {
	if x != nil {
		return x.BGPath
	}
	return ""
}

func (x *RaidStageExcelTable) GetRaidCharacterId() int64 {
	if x != nil {
		return x.RaidCharacterId
	}
	return 0
}

func (x *RaidStageExcelTable) GetBossCharacterId() []int64 {
	if x != nil {
		return x.BossCharacterId
	}
	return nil
}

func (x *RaidStageExcelTable) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *RaidStageExcelTable) GetDifficultyOpenCondition() bool {
	if x != nil {
		return x.DifficultyOpenCondition
	}
	return false
}

func (x *RaidStageExcelTable) GetMaxPlayerCount() int64 {
	if x != nil {
		return x.MaxPlayerCount
	}
	return 0
}

func (x *RaidStageExcelTable) GetRaidRoomLifeTime() int64 {
	if x != nil {
		return x.RaidRoomLifeTime
	}
	return 0
}

func (x *RaidStageExcelTable) GetBattleDuration() int64 {
	if x != nil {
		return x.BattleDuration
	}
	return 0
}

func (x *RaidStageExcelTable) GetGroundId() int64 {
	if x != nil {
		return x.GroundId
	}
	return 0
}

func (x *RaidStageExcelTable) GetGroundDevName() string {
	if x != nil {
		return x.GroundDevName
	}
	return ""
}

func (x *RaidStageExcelTable) GetEnterTimeLine() string {
	if x != nil {
		return x.EnterTimeLine
	}
	return ""
}

func (x *RaidStageExcelTable) GetTacticEnvironment() string {
	if x != nil {
		return x.TacticEnvironment
	}
	return ""
}

func (x *RaidStageExcelTable) GetDefaultClearScore() int64 {
	if x != nil {
		return x.DefaultClearScore
	}
	return 0
}

func (x *RaidStageExcelTable) GetMaximumScore() int64 {
	if x != nil {
		return x.MaximumScore
	}
	return 0
}

func (x *RaidStageExcelTable) GetPerSecondMinusScore() int64 {
	if x != nil {
		return x.PerSecondMinusScore
	}
	return 0
}

func (x *RaidStageExcelTable) GetHPPercentScore() int64 {
	if x != nil {
		return x.HPPercentScore
	}
	return 0
}

func (x *RaidStageExcelTable) GetMinimumAcquisitionScore() int64 {
	if x != nil {
		return x.MinimumAcquisitionScore
	}
	return 0
}

func (x *RaidStageExcelTable) GetMaximumAcquisitionScore() int64 {
	if x != nil {
		return x.MaximumAcquisitionScore
	}
	return 0
}

func (x *RaidStageExcelTable) GetRaidRewardGroupId() int64 {
	if x != nil {
		return x.RaidRewardGroupId
	}
	return 0
}

func (x *RaidStageExcelTable) GetBattleReadyTimelinePath() []string {
	if x != nil {
		return x.BattleReadyTimelinePath
	}
	return nil
}

func (x *RaidStageExcelTable) GetBattleReadyTimelinePhaseStart() []int64 {
	if x != nil {
		return x.BattleReadyTimelinePhaseStart
	}
	return nil
}

func (x *RaidStageExcelTable) GetBattleReadyTimelinePhaseEnd() []int64 {
	if x != nil {
		return x.BattleReadyTimelinePhaseEnd
	}
	return nil
}

func (x *RaidStageExcelTable) GetVictoryTimelinePath() string {
	if x != nil {
		return x.VictoryTimelinePath
	}
	return ""
}

func (x *RaidStageExcelTable) GetPhaseChangeTimelinePath() string {
	if x != nil {
		return x.PhaseChangeTimelinePath
	}
	return ""
}

func (x *RaidStageExcelTable) GetTimeLinePhase() int64 {
	if x != nil {
		return x.TimeLinePhase
	}
	return 0
}

func (x *RaidStageExcelTable) GetEnterScenarioKey() int64 {
	if x != nil {
		return x.EnterScenarioKey
	}
	return 0
}

func (x *RaidStageExcelTable) GetClearScenarioKey() int64 {
	if x != nil {
		return x.ClearScenarioKey
	}
	return 0
}

func (x *RaidStageExcelTable) GetShowSkillCard() bool {
	if x != nil {
		return x.ShowSkillCard
	}
	return false
}

func (x *RaidStageExcelTable) GetBossBGInfoKey() int64 {
	if x != nil {
		return x.BossBGInfoKey
	}
	return 0
}

func (x *RaidStageExcelTable) GetEchelonExtensionType() string {
	if x != nil {
		return x.EchelonExtensionType
	}
	return ""
}

type CharacterStatExcelTable struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	CharacterId                 int64                  `protobuf:"varint,1,opt,name=CharacterId,proto3" json:"CharacterId,omitempty"`
	StabilityRate               int64                  `protobuf:"varint,2,opt,name=StabilityRate,proto3" json:"StabilityRate,omitempty"`
	StabilityPoint              int64                  `protobuf:"varint,3,opt,name=StabilityPoint,proto3" json:"StabilityPoint,omitempty"`
	AttackPower1                int64                  `protobuf:"varint,4,opt,name=AttackPower1,proto3" json:"AttackPower1,omitempty"`
	AttackPower100              int64                  `protobuf:"varint,5,opt,name=AttackPower100,proto3" json:"AttackPower100,omitempty"`
	MaxHP1                      int64                  `protobuf:"varint,6,opt,name=MaxHP1,proto3" json:"MaxHP1,omitempty"`
	MaxHP100                    int64                  `protobuf:"varint,7,opt,name=MaxHP100,proto3" json:"MaxHP100,omitempty"`
	DefensePower1               int64                  `protobuf:"varint,8,opt,name=DefensePower1,proto3" json:"DefensePower1,omitempty"`
	DefensePower100             int64                  `protobuf:"varint,9,opt,name=DefensePower100,proto3" json:"DefensePower100,omitempty"`
	HealPower1                  int64                  `protobuf:"varint,10,opt,name=HealPower1,proto3" json:"HealPower1,omitempty"`
	HealPower100                int64                  `protobuf:"varint,11,opt,name=HealPower100,proto3" json:"HealPower100,omitempty"`
	DodgePoint                  int64                  `protobuf:"varint,12,opt,name=DodgePoint,proto3" json:"DodgePoint,omitempty"`
	AccuracyPoint               int64                  `protobuf:"varint,13,opt,name=AccuracyPoint,proto3" json:"AccuracyPoint,omitempty"`
	CriticalPoint               int64                  `protobuf:"varint,14,opt,name=CriticalPoint,proto3" json:"CriticalPoint,omitempty"`
	CriticalResistPoint         int64                  `protobuf:"varint,15,opt,name=CriticalResistPoint,proto3" json:"CriticalResistPoint,omitempty"`
	CriticalDamageRate          int64                  `protobuf:"varint,16,opt,name=CriticalDamageRate,proto3" json:"CriticalDamageRate,omitempty"`
	CriticalDamageResistRate    int64                  `protobuf:"varint,17,opt,name=CriticalDamageResistRate,proto3" json:"CriticalDamageResistRate,omitempty"`
	BlockRate                   int64                  `protobuf:"varint,18,opt,name=BlockRate,proto3" json:"BlockRate,omitempty"`
	HealEffectivenessRate       int64                  `protobuf:"varint,19,opt,name=HealEffectivenessRate,proto3" json:"HealEffectivenessRate,omitempty"`
	OppressionPower             int64                  `protobuf:"varint,20,opt,name=OppressionPower,proto3" json:"OppressionPower,omitempty"`
	OppressionResist            int64                  `protobuf:"varint,21,opt,name=OppressionResist,proto3" json:"OppressionResist,omitempty"`
	DefensePenetration1         int64                  `protobuf:"varint,22,opt,name=DefensePenetration1,proto3" json:"DefensePenetration1,omitempty"`
	DefensePenetration100       int64                  `protobuf:"varint,23,opt,name=DefensePenetration100,proto3" json:"DefensePenetration100,omitempty"`
	DefensePenetrationResist1   int64                  `protobuf:"varint,24,opt,name=DefensePenetrationResist1,proto3" json:"DefensePenetrationResist1,omitempty"`
	DefensePenetrationResist100 int64                  `protobuf:"varint,25,opt,name=DefensePenetrationResist100,proto3" json:"DefensePenetrationResist100,omitempty"`
	EnhanceExplosionRate        int64                  `protobuf:"varint,26,opt,name=EnhanceExplosionRate,proto3" json:"EnhanceExplosionRate,omitempty"`
	EnhancePierceRate           int64                  `protobuf:"varint,27,opt,name=EnhancePierceRate,proto3" json:"EnhancePierceRate,omitempty"`
	EnhanceMysticRate           int64                  `protobuf:"varint,28,opt,name=EnhanceMysticRate,proto3" json:"EnhanceMysticRate,omitempty"`
	EnhanceSonicRate            int64                  `protobuf:"varint,29,opt,name=EnhanceSonicRate,proto3" json:"EnhanceSonicRate,omitempty"`
	EnhanceSiegeRate            int64                  `protobuf:"varint,30,opt,name=EnhanceSiegeRate,proto3" json:"EnhanceSiegeRate,omitempty"`
	EnhanceNormalRate           int64                  `protobuf:"varint,31,opt,name=EnhanceNormalRate,proto3" json:"EnhanceNormalRate,omitempty"`
	EnhanceLightArmorRate       int64                  `protobuf:"varint,32,opt,name=EnhanceLightArmorRate,proto3" json:"EnhanceLightArmorRate,omitempty"`
	EnhanceHeavyArmorRate       int64                  `protobuf:"varint,33,opt,name=EnhanceHeavyArmorRate,proto3" json:"EnhanceHeavyArmorRate,omitempty"`
	EnhanceUnarmedRate          int64                  `protobuf:"varint,34,opt,name=EnhanceUnarmedRate,proto3" json:"EnhanceUnarmedRate,omitempty"`
	EnhanceElasticArmorRate     int64                  `protobuf:"varint,35,opt,name=EnhanceElasticArmorRate,proto3" json:"EnhanceElasticArmorRate,omitempty"`
	EnhanceStructureRate        int64                  `protobuf:"varint,36,opt,name=EnhanceStructureRate,proto3" json:"EnhanceStructureRate,omitempty"`
	EnhanceNormalArmorRate      int64                  `protobuf:"varint,37,opt,name=EnhanceNormalArmorRate,proto3" json:"EnhanceNormalArmorRate,omitempty"`
	ExtendBuffDuration          int64                  `protobuf:"varint,38,opt,name=ExtendBuffDuration,proto3" json:"ExtendBuffDuration,omitempty"`
	ExtendDebuffDuration        int64                  `protobuf:"varint,39,opt,name=ExtendDebuffDuration,proto3" json:"ExtendDebuffDuration,omitempty"`
	ExtendCrowdControlDuration  int64                  `protobuf:"varint,40,opt,name=ExtendCrowdControlDuration,proto3" json:"ExtendCrowdControlDuration,omitempty"`
	AmmoCount                   int64                  `protobuf:"varint,41,opt,name=AmmoCount,proto3" json:"AmmoCount,omitempty"`
	AmmoCost                    int64                  `protobuf:"varint,42,opt,name=AmmoCost,proto3" json:"AmmoCost,omitempty"`
	IgnoreDelayCount            int64                  `protobuf:"varint,43,opt,name=IgnoreDelayCount,proto3" json:"IgnoreDelayCount,omitempty"`
	NormalAttackSpeed           int64                  `protobuf:"varint,44,opt,name=NormalAttackSpeed,proto3" json:"NormalAttackSpeed,omitempty"`
	Range                       int64                  `protobuf:"varint,45,opt,name=Range,proto3" json:"Range,omitempty"`
	InitialRangeRate            int64                  `protobuf:"varint,46,opt,name=InitialRangeRate,proto3" json:"InitialRangeRate,omitempty"`
	MoveSpeed                   int64                  `protobuf:"varint,47,opt,name=MoveSpeed,proto3" json:"MoveSpeed,omitempty"`
	SightPoint                  int64                  `protobuf:"varint,48,opt,name=SightPoint,proto3" json:"SightPoint,omitempty"`
	ActiveGauge                 int64                  `protobuf:"varint,49,opt,name=ActiveGauge,proto3" json:"ActiveGauge,omitempty"`
	GroggyGauge                 int64                  `protobuf:"varint,50,opt,name=GroggyGauge,proto3" json:"GroggyGauge,omitempty"`
	GroggyTime                  int64                  `protobuf:"varint,51,opt,name=GroggyTime,proto3" json:"GroggyTime,omitempty"`
	StrategyMobility            int64                  `protobuf:"varint,52,opt,name=StrategyMobility,proto3" json:"StrategyMobility,omitempty"`
	ActionCount                 int64                  `protobuf:"varint,53,opt,name=ActionCount,proto3" json:"ActionCount,omitempty"`
	StrategySightRange          int64                  `protobuf:"varint,54,opt,name=StrategySightRange,proto3" json:"StrategySightRange,omitempty"`
	DamageRatio                 int64                  `protobuf:"varint,55,opt,name=DamageRatio,proto3" json:"DamageRatio,omitempty"`
	DamagedRatio                int64                  `protobuf:"varint,56,opt,name=DamagedRatio,proto3" json:"DamagedRatio,omitempty"`
	DamageRatio2Increase        int64                  `protobuf:"varint,57,opt,name=DamageRatio2Increase,proto3" json:"DamageRatio2Increase,omitempty"`
	DamageRatio2Decrease        int64                  `protobuf:"varint,58,opt,name=DamageRatio2Decrease,proto3" json:"DamageRatio2Decrease,omitempty"`
	DamagedRatio2Increase       int64                  `protobuf:"varint,59,opt,name=DamagedRatio2Increase,proto3" json:"DamagedRatio2Increase,omitempty"`
	DamagedRatio2Decrease       int64                  `protobuf:"varint,60,opt,name=DamagedRatio2Decrease,proto3" json:"DamagedRatio2Decrease,omitempty"`
	ExDamagedRatioIncrease      int64                  `protobuf:"varint,61,opt,name=ExDamagedRatioIncrease,proto3" json:"ExDamagedRatioIncrease,omitempty"`
	ExDamagedRatioDecrease      int64                  `protobuf:"varint,62,opt,name=ExDamagedRatioDecrease,proto3" json:"ExDamagedRatioDecrease,omitempty"`
	EnhanceExDamageRate         int64                  `protobuf:"varint,63,opt,name=EnhanceExDamageRate,proto3" json:"EnhanceExDamageRate,omitempty"`
	ReduceExDamagedRate         int64                  `protobuf:"varint,64,opt,name=ReduceExDamagedRate,proto3" json:"ReduceExDamagedRate,omitempty"`
	HealRate                    int64                  `protobuf:"varint,65,opt,name=HealRate,proto3" json:"HealRate,omitempty"`
	HealLightArmorRate          int64                  `protobuf:"varint,66,opt,name=HealLightArmorRate,proto3" json:"HealLightArmorRate,omitempty"`
	HealHeavyArmorRate          int64                  `protobuf:"varint,67,opt,name=HealHeavyArmorRate,proto3" json:"HealHeavyArmorRate,omitempty"`
	HealUnarmedRate             int64                  `protobuf:"varint,68,opt,name=HealUnarmedRate,proto3" json:"HealUnarmedRate,omitempty"`
	HealElasticArmorRate        int64                  `protobuf:"varint,69,opt,name=HealElasticArmorRate,proto3" json:"HealElasticArmorRate,omitempty"`
	HealNormalArmorRate         int64                  `protobuf:"varint,70,opt,name=HealNormalArmorRate,proto3" json:"HealNormalArmorRate,omitempty"`
	HealedExplosionRate         int64                  `protobuf:"varint,71,opt,name=HealedExplosionRate,proto3" json:"HealedExplosionRate,omitempty"`
	HealedPierceRate            int64                  `protobuf:"varint,72,opt,name=HealedPierceRate,proto3" json:"HealedPierceRate,omitempty"`
	HealedMysticRate            int64                  `protobuf:"varint,73,opt,name=HealedMysticRate,proto3" json:"HealedMysticRate,omitempty"`
	HealedSonicRate             int64                  `protobuf:"varint,74,opt,name=HealedSonicRate,proto3" json:"HealedSonicRate,omitempty"`
	HealedNormalRate            int64                  `protobuf:"varint,75,opt,name=HealedNormalRate,proto3" json:"HealedNormalRate,omitempty"`
	StreetBattleAdaptation      string                 `protobuf:"bytes,76,opt,name=StreetBattleAdaptation,proto3" json:"StreetBattleAdaptation,omitempty"`
	OutdoorBattleAdaptation     string                 `protobuf:"bytes,77,opt,name=OutdoorBattleAdaptation,proto3" json:"OutdoorBattleAdaptation,omitempty"`
	IndoorBattleAdaptation      string                 `protobuf:"bytes,78,opt,name=IndoorBattleAdaptation,proto3" json:"IndoorBattleAdaptation,omitempty"`
	RegenCost                   int64                  `protobuf:"varint,79,opt,name=RegenCost,proto3" json:"RegenCost,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CharacterStatExcelTable) Reset() {
	*x = CharacterStatExcelTable{}
	mi := &file_excel_server_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterStatExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterStatExcelTable) ProtoMessage() {}

func (x *CharacterStatExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterStatExcelTable.ProtoReflect.Descriptor instead.
func (*CharacterStatExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{45}
}

func (x *CharacterStatExcelTable) GetCharacterId() int64 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *CharacterStatExcelTable) GetStabilityRate() int64 {
	if x != nil {
		return x.StabilityRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetStabilityPoint() int64 {
	if x != nil {
		return x.StabilityPoint
	}
	return 0
}

func (x *CharacterStatExcelTable) GetAttackPower1() int64 {
	if x != nil {
		return x.AttackPower1
	}
	return 0
}

func (x *CharacterStatExcelTable) GetAttackPower100() int64 {
	if x != nil {
		return x.AttackPower100
	}
	return 0
}

func (x *CharacterStatExcelTable) GetMaxHP1() int64 {
	if x != nil {
		return x.MaxHP1
	}
	return 0
}

func (x *CharacterStatExcelTable) GetMaxHP100() int64 {
	if x != nil {
		return x.MaxHP100
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDefensePower1() int64 {
	if x != nil {
		return x.DefensePower1
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDefensePower100() int64 {
	if x != nil {
		return x.DefensePower100
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealPower1() int64 {
	if x != nil {
		return x.HealPower1
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealPower100() int64 {
	if x != nil {
		return x.HealPower100
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDodgePoint() int64 {
	if x != nil {
		return x.DodgePoint
	}
	return 0
}

func (x *CharacterStatExcelTable) GetAccuracyPoint() int64 {
	if x != nil {
		return x.AccuracyPoint
	}
	return 0
}

func (x *CharacterStatExcelTable) GetCriticalPoint() int64 {
	if x != nil {
		return x.CriticalPoint
	}
	return 0
}

func (x *CharacterStatExcelTable) GetCriticalResistPoint() int64 {
	if x != nil {
		return x.CriticalResistPoint
	}
	return 0
}

func (x *CharacterStatExcelTable) GetCriticalDamageRate() int64 {
	if x != nil {
		return x.CriticalDamageRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetCriticalDamageResistRate() int64 {
	if x != nil {
		return x.CriticalDamageResistRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetBlockRate() int64 {
	if x != nil {
		return x.BlockRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealEffectivenessRate() int64 {
	if x != nil {
		return x.HealEffectivenessRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetOppressionPower() int64 {
	if x != nil {
		return x.OppressionPower
	}
	return 0
}

func (x *CharacterStatExcelTable) GetOppressionResist() int64 {
	if x != nil {
		return x.OppressionResist
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDefensePenetration1() int64 {
	if x != nil {
		return x.DefensePenetration1
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDefensePenetration100() int64 {
	if x != nil {
		return x.DefensePenetration100
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDefensePenetrationResist1() int64 {
	if x != nil {
		return x.DefensePenetrationResist1
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDefensePenetrationResist100() int64 {
	if x != nil {
		return x.DefensePenetrationResist100
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceExplosionRate() int64 {
	if x != nil {
		return x.EnhanceExplosionRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhancePierceRate() int64 {
	if x != nil {
		return x.EnhancePierceRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceMysticRate() int64 {
	if x != nil {
		return x.EnhanceMysticRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceSonicRate() int64 {
	if x != nil {
		return x.EnhanceSonicRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceSiegeRate() int64 {
	if x != nil {
		return x.EnhanceSiegeRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceNormalRate() int64 {
	if x != nil {
		return x.EnhanceNormalRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceLightArmorRate() int64 {
	if x != nil {
		return x.EnhanceLightArmorRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceHeavyArmorRate() int64 {
	if x != nil {
		return x.EnhanceHeavyArmorRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceUnarmedRate() int64 {
	if x != nil {
		return x.EnhanceUnarmedRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceElasticArmorRate() int64 {
	if x != nil {
		return x.EnhanceElasticArmorRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceStructureRate() int64 {
	if x != nil {
		return x.EnhanceStructureRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceNormalArmorRate() int64 {
	if x != nil {
		return x.EnhanceNormalArmorRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetExtendBuffDuration() int64 {
	if x != nil {
		return x.ExtendBuffDuration
	}
	return 0
}

func (x *CharacterStatExcelTable) GetExtendDebuffDuration() int64 {
	if x != nil {
		return x.ExtendDebuffDuration
	}
	return 0
}

func (x *CharacterStatExcelTable) GetExtendCrowdControlDuration() int64 {
	if x != nil {
		return x.ExtendCrowdControlDuration
	}
	return 0
}

func (x *CharacterStatExcelTable) GetAmmoCount() int64 {
	if x != nil {
		return x.AmmoCount
	}
	return 0
}

func (x *CharacterStatExcelTable) GetAmmoCost() int64 {
	if x != nil {
		return x.AmmoCost
	}
	return 0
}

func (x *CharacterStatExcelTable) GetIgnoreDelayCount() int64 {
	if x != nil {
		return x.IgnoreDelayCount
	}
	return 0
}

func (x *CharacterStatExcelTable) GetNormalAttackSpeed() int64 {
	if x != nil {
		return x.NormalAttackSpeed
	}
	return 0
}

func (x *CharacterStatExcelTable) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *CharacterStatExcelTable) GetInitialRangeRate() int64 {
	if x != nil {
		return x.InitialRangeRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetMoveSpeed() int64 {
	if x != nil {
		return x.MoveSpeed
	}
	return 0
}

func (x *CharacterStatExcelTable) GetSightPoint() int64 {
	if x != nil {
		return x.SightPoint
	}
	return 0
}

func (x *CharacterStatExcelTable) GetActiveGauge() int64 {
	if x != nil {
		return x.ActiveGauge
	}
	return 0
}

func (x *CharacterStatExcelTable) GetGroggyGauge() int64 {
	if x != nil {
		return x.GroggyGauge
	}
	return 0
}

func (x *CharacterStatExcelTable) GetGroggyTime() int64 {
	if x != nil {
		return x.GroggyTime
	}
	return 0
}

func (x *CharacterStatExcelTable) GetStrategyMobility() int64 {
	if x != nil {
		return x.StrategyMobility
	}
	return 0
}

func (x *CharacterStatExcelTable) GetActionCount() int64 {
	if x != nil {
		return x.ActionCount
	}
	return 0
}

func (x *CharacterStatExcelTable) GetStrategySightRange() int64 {
	if x != nil {
		return x.StrategySightRange
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDamageRatio() int64 {
	if x != nil {
		return x.DamageRatio
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDamagedRatio() int64 {
	if x != nil {
		return x.DamagedRatio
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDamageRatio2Increase() int64 {
	if x != nil {
		return x.DamageRatio2Increase
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDamageRatio2Decrease() int64 {
	if x != nil {
		return x.DamageRatio2Decrease
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDamagedRatio2Increase() int64 {
	if x != nil {
		return x.DamagedRatio2Increase
	}
	return 0
}

func (x *CharacterStatExcelTable) GetDamagedRatio2Decrease() int64 {
	if x != nil {
		return x.DamagedRatio2Decrease
	}
	return 0
}

func (x *CharacterStatExcelTable) GetExDamagedRatioIncrease() int64 {
	if x != nil {
		return x.ExDamagedRatioIncrease
	}
	return 0
}

func (x *CharacterStatExcelTable) GetExDamagedRatioDecrease() int64 {
	if x != nil {
		return x.ExDamagedRatioDecrease
	}
	return 0
}

func (x *CharacterStatExcelTable) GetEnhanceExDamageRate() int64 {
	if x != nil {
		return x.EnhanceExDamageRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetReduceExDamagedRate() int64 {
	if x != nil {
		return x.ReduceExDamagedRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealRate() int64 {
	if x != nil {
		return x.HealRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealLightArmorRate() int64 {
	if x != nil {
		return x.HealLightArmorRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealHeavyArmorRate() int64 {
	if x != nil {
		return x.HealHeavyArmorRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealUnarmedRate() int64 {
	if x != nil {
		return x.HealUnarmedRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealElasticArmorRate() int64 {
	if x != nil {
		return x.HealElasticArmorRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealNormalArmorRate() int64 {
	if x != nil {
		return x.HealNormalArmorRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealedExplosionRate() int64 {
	if x != nil {
		return x.HealedExplosionRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealedPierceRate() int64 {
	if x != nil {
		return x.HealedPierceRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealedMysticRate() int64 {
	if x != nil {
		return x.HealedMysticRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealedSonicRate() int64 {
	if x != nil {
		return x.HealedSonicRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetHealedNormalRate() int64 {
	if x != nil {
		return x.HealedNormalRate
	}
	return 0
}

func (x *CharacterStatExcelTable) GetStreetBattleAdaptation() string {
	if x != nil {
		return x.StreetBattleAdaptation
	}
	return ""
}

func (x *CharacterStatExcelTable) GetOutdoorBattleAdaptation() string {
	if x != nil {
		return x.OutdoorBattleAdaptation
	}
	return ""
}

func (x *CharacterStatExcelTable) GetIndoorBattleAdaptation() string {
	if x != nil {
		return x.IndoorBattleAdaptation
	}
	return ""
}

func (x *CharacterStatExcelTable) GetRegenCost() int64 {
	if x != nil {
		return x.RegenCost
	}
	return 0
}

type RaidStageRewardExcelTable struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	GroupId                          int64                  `protobuf:"varint,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	IsClearStageRewardHideInfo       bool                   `protobuf:"varint,2,opt,name=IsClearStageRewardHideInfo,proto3" json:"IsClearStageRewardHideInfo,omitempty"`
	ClearStageRewardProb             int64                  `protobuf:"varint,3,opt,name=ClearStageRewardProb,proto3" json:"ClearStageRewardProb,omitempty"`
	ClearStageRewardParcelType       string                 `protobuf:"bytes,4,opt,name=ClearStageRewardParcelType,proto3" json:"ClearStageRewardParcelType,omitempty"`
	ClearStageRewardParcelUniqueID   int64                  `protobuf:"varint,5,opt,name=ClearStageRewardParcelUniqueID,proto3" json:"ClearStageRewardParcelUniqueID,omitempty"`
	ClearStageRewardParcelUniqueName string                 `protobuf:"bytes,6,opt,name=ClearStageRewardParcelUniqueName,proto3" json:"ClearStageRewardParcelUniqueName,omitempty"`
	ClearStageRewardAmount           int64                  `protobuf:"varint,7,opt,name=ClearStageRewardAmount,proto3" json:"ClearStageRewardAmount,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *RaidStageRewardExcelTable) Reset() {
	*x = RaidStageRewardExcelTable{}
	mi := &file_excel_server_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidStageRewardExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidStageRewardExcelTable) ProtoMessage() {}

func (x *RaidStageRewardExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidStageRewardExcelTable.ProtoReflect.Descriptor instead.
func (*RaidStageRewardExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{46}
}

func (x *RaidStageRewardExcelTable) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *RaidStageRewardExcelTable) GetIsClearStageRewardHideInfo() bool {
	if x != nil {
		return x.IsClearStageRewardHideInfo
	}
	return false
}

func (x *RaidStageRewardExcelTable) GetClearStageRewardProb() int64 {
	if x != nil {
		return x.ClearStageRewardProb
	}
	return 0
}

func (x *RaidStageRewardExcelTable) GetClearStageRewardParcelType() string {
	if x != nil {
		return x.ClearStageRewardParcelType
	}
	return ""
}

func (x *RaidStageRewardExcelTable) GetClearStageRewardParcelUniqueID() int64 {
	if x != nil {
		return x.ClearStageRewardParcelUniqueID
	}
	return 0
}

func (x *RaidStageRewardExcelTable) GetClearStageRewardParcelUniqueName() string {
	if x != nil {
		return x.ClearStageRewardParcelUniqueName
	}
	return ""
}

func (x *RaidStageRewardExcelTable) GetClearStageRewardAmount() int64 {
	if x != nil {
		return x.ClearStageRewardAmount
	}
	return 0
}

type MissionExcelTable struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	Id                            int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Category                      string                 `protobuf:"bytes,2,opt,name=Category,proto3" json:"Category,omitempty"`
	Description                   int64                  `protobuf:"varint,3,opt,name=Description,proto3" json:"Description,omitempty"`
	ResetType                     string                 `protobuf:"bytes,4,opt,name=ResetType,proto3" json:"ResetType,omitempty"`
	ToastDisplayType              string                 `protobuf:"bytes,5,opt,name=ToastDisplayType,proto3" json:"ToastDisplayType,omitempty"`
	ToastImagePath                string                 `protobuf:"bytes,6,opt,name=ToastImagePath,proto3" json:"ToastImagePath,omitempty"`
	ViewFlag                      bool                   `protobuf:"varint,7,opt,name=ViewFlag,proto3" json:"ViewFlag,omitempty"`
	Limit                         bool                   `protobuf:"varint,8,opt,name=Limit,proto3" json:"Limit,omitempty"`
	StartDate                     string                 `protobuf:"bytes,9,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	EndDate                       string                 `protobuf:"bytes,10,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	EndDay                        int64                  `protobuf:"varint,11,opt,name=EndDay,proto3" json:"EndDay,omitempty"`
	StartableEndDate              string                 `protobuf:"bytes,12,opt,name=StartableEndDate,proto3" json:"StartableEndDate,omitempty"`
	DateAutoRefer                 string                 `protobuf:"bytes,13,opt,name=DateAutoRefer,proto3" json:"DateAutoRefer,omitempty"`
	DisplayOrder                  int64                  `protobuf:"varint,14,opt,name=DisplayOrder,proto3" json:"DisplayOrder,omitempty"`
	PreMissionId                  []int64                `protobuf:"varint,15,rep,packed,name=PreMissionId,proto3" json:"PreMissionId,omitempty"`
	AccountType                   string                 `protobuf:"bytes,16,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	AccountLevel                  int64                  `protobuf:"varint,17,opt,name=AccountLevel,proto3" json:"AccountLevel,omitempty"`
	ContentTags                   []string               `protobuf:"bytes,18,rep,name=ContentTags,proto3" json:"ContentTags,omitempty"`
	ShortcutUI                    []string               `protobuf:"bytes,19,rep,name=ShortcutUI,proto3" json:"ShortcutUI,omitempty"`
	ChallengeStageShortcut        int64                  `protobuf:"varint,20,opt,name=ChallengeStageShortcut,proto3" json:"ChallengeStageShortcut,omitempty"`
	CompleteConditionType         string                 `protobuf:"bytes,21,opt,name=CompleteConditionType,proto3" json:"CompleteConditionType,omitempty"`
	CompleteConditionCount        int64                  `protobuf:"varint,22,opt,name=CompleteConditionCount,proto3" json:"CompleteConditionCount,omitempty"`
	CompleteConditionParameter    []int64                `protobuf:"varint,23,rep,packed,name=CompleteConditionParameter,proto3" json:"CompleteConditionParameter,omitempty"`
	CompleteConditionParameterTag []string               `protobuf:"bytes,24,rep,name=CompleteConditionParameterTag,proto3" json:"CompleteConditionParameterTag,omitempty"`
	RewardIcon                    string                 `protobuf:"bytes,25,opt,name=RewardIcon,proto3" json:"RewardIcon,omitempty"`
	MissionRewardParcelType       []string               `protobuf:"bytes,26,rep,name=MissionRewardParcelType,proto3" json:"MissionRewardParcelType,omitempty"`
	MissionRewardParcelId         []int64                `protobuf:"varint,27,rep,packed,name=MissionRewardParcelId,proto3" json:"MissionRewardParcelId,omitempty"`
	MissionRewardAmount           []int64                `protobuf:"varint,28,rep,packed,name=MissionRewardAmount,proto3" json:"MissionRewardAmount,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *MissionExcelTable) Reset() {
	*x = MissionExcelTable{}
	mi := &file_excel_server_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissionExcelTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionExcelTable) ProtoMessage() {}

func (x *MissionExcelTable) ProtoReflect() protoreflect.Message {
	mi := &file_excel_server_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionExcelTable.ProtoReflect.Descriptor instead.
func (*MissionExcelTable) Descriptor() ([]byte, []int) {
	return file_excel_server_proto_rawDescGZIP(), []int{47}
}

func (x *MissionExcelTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MissionExcelTable) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MissionExcelTable) GetDescription() int64 {
	if x != nil {
		return x.Description
	}
	return 0
}

func (x *MissionExcelTable) GetResetType() string {
	if x != nil {
		return x.ResetType
	}
	return ""
}

func (x *MissionExcelTable) GetToastDisplayType() string {
	if x != nil {
		return x.ToastDisplayType
	}
	return ""
}

func (x *MissionExcelTable) GetToastImagePath() string {
	if x != nil {
		return x.ToastImagePath
	}
	return ""
}

func (x *MissionExcelTable) GetViewFlag() bool {
	if x != nil {
		return x.ViewFlag
	}
	return false
}

func (x *MissionExcelTable) GetLimit() bool {
	if x != nil {
		return x.Limit
	}
	return false
}

func (x *MissionExcelTable) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MissionExcelTable) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *MissionExcelTable) GetEndDay() int64 {
	if x != nil {
		return x.EndDay
	}
	return 0
}

func (x *MissionExcelTable) GetStartableEndDate() string {
	if x != nil {
		return x.StartableEndDate
	}
	return ""
}

func (x *MissionExcelTable) GetDateAutoRefer() string {
	if x != nil {
		return x.DateAutoRefer
	}
	return ""
}

func (x *MissionExcelTable) GetDisplayOrder() int64 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *MissionExcelTable) GetPreMissionId() []int64 {
	if x != nil {
		return x.PreMissionId
	}
	return nil
}

func (x *MissionExcelTable) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *MissionExcelTable) GetAccountLevel() int64 {
	if x != nil {
		return x.AccountLevel
	}
	return 0
}

func (x *MissionExcelTable) GetContentTags() []string {
	if x != nil {
		return x.ContentTags
	}
	return nil
}

func (x *MissionExcelTable) GetShortcutUI() []string {
	if x != nil {
		return x.ShortcutUI
	}
	return nil
}

func (x *MissionExcelTable) GetChallengeStageShortcut() int64 {
	if x != nil {
		return x.ChallengeStageShortcut
	}
	return 0
}

func (x *MissionExcelTable) GetCompleteConditionType() string {
	if x != nil {
		return x.CompleteConditionType
	}
	return ""
}

func (x *MissionExcelTable) GetCompleteConditionCount() int64 {
	if x != nil {
		return x.CompleteConditionCount
	}
	return 0
}

func (x *MissionExcelTable) GetCompleteConditionParameter() []int64 {
	if x != nil {
		return x.CompleteConditionParameter
	}
	return nil
}

func (x *MissionExcelTable) GetCompleteConditionParameterTag() []string {
	if x != nil {
		return x.CompleteConditionParameterTag
	}
	return nil
}

func (x *MissionExcelTable) GetRewardIcon() string {
	if x != nil {
		return x.RewardIcon
	}
	return ""
}

func (x *MissionExcelTable) GetMissionRewardParcelType() []string {
	if x != nil {
		return x.MissionRewardParcelType
	}
	return nil
}

func (x *MissionExcelTable) GetMissionRewardParcelId() []int64 {
	if x != nil {
		return x.MissionRewardParcelId
	}
	return nil
}

func (x *MissionExcelTable) GetMissionRewardAmount() []int64 {
	if x != nil {
		return x.MissionRewardAmount
	}
	return nil
}

var File_excel_server_proto protoreflect.FileDescriptor

var file_excel_server_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x20, 0x0a, 0x05,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x1a,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x4c, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x61, 0x0a,
	0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x5b, 0x0a, 0x18, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x63, 0x68, 0x65, 0x6c,
	0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x18, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x63, 0x68, 0x65,
	0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x0e, 0x53, 0x68, 0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68,
	0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x53, 0x68,
	0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52,
	0x0b, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x6d, 0x0a, 0x1e,
	0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1e, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x1a, 0x41,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x1a, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x55,
	0x0a, 0x16, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x16, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x11, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x58, 0x0a,
	0x17, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x17,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x5e, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x19, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x1c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x40, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x61, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1a, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x17, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x55, 0x0a, 0x16, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x16,
	0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65,
	0x65, 0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x15, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x53, 0x63,
	0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x17, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x4c, 0x0a, 0x13,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x17, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x18, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x18, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x4c, 0x0a, 0x13, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x46, 0x75, 0x72, 0x6e,
	0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x49, 0x0a, 0x12, 0x43, 0x61, 0x66, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x12, 0x43, 0x61, 0x66, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x18, 0x43, 0x61,
	0x66, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x18, 0x43,
	0x61, 0x66, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x49, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x52, 0x15, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x64, 0x0a, 0x1b, 0x57,
	0x65, 0x65, 0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x1b, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x5b, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x65, 0x61, 0x72, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x65, 0x61, 0x72,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x12, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x47, 0x65, 0x61, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x58, 0x0a, 0x17, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x17, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x12, 0x64, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x52, 0x1b, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x58, 0x0a, 0x17, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x17, 0x41, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x19, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x19, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x15, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x1d, 0x41, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x1d, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x17, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x17, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a,
	0x18, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x75,
	0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x52, 0x18, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x61, 0x0a, 0x1a, 0x52, 0x61,
	0x69, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x1a, 0x52, 0x61, 0x69, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x64, 0x0a,
	0x1b, 0x52, 0x61, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1b, 0x52, 0x61, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x52, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x52, 0x61,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x58, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x17, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x19, 0x52,
	0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x19, 0x52, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x11, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x66, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x22, 0xce, 0x03, 0x0a, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x45, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x45, 0x78, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xd1, 0x07, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x76,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x76, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x75, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x6f, 0x73,
	0x74, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x52, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x4e, 0x50, 0x43, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x4e, 0x50, 0x43, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x61, 0x78,
	0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x75, 0x6d,
	0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4a, 0x75, 0x6d,
	0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x49, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x49, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x70, 0x42, 0x61, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x48, 0x70, 0x42, 0x61, 0x72, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x58, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x58, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x63, 0x68, 0x6c, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x63, 0x68, 0x6c, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x4d,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x73, 0x73, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x54, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x0e, 0x53, 0x68,
	0x6f, 0x70, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x53, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x12, 0x30, 0x0a, 0x13,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x4d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x37,
	0x0a, 0x17, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x75, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x75, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x42, 0x75, 0x79, 0x57, 0x68, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x42, 0x75, 0x79, 0x57, 0x68, 0x65, 0x6e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x53,
	0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xd6, 0x09, 0x0a, 0x12, 0x53, 0x68,
	0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x44,
	0x69, 0x6d, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x53,
	0x6f, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x44, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x12, 0x34, 0x0a, 0x15,
	0x53, 0x68, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x68, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72,
	0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x72, 0x63, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73,
	0x53, 0x68, 0x6f, 0x70, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x70, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x68,
	0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x32, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x33, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x33, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x34, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x35, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x35, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x36, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x36, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x37, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x37, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x38, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x38, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x39, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x39, 0x12, 0x30, 0x0a, 0x13,
	0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x31, 0x30, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x30, 0x12, 0x30,
	0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x31, 0x31, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x53, 0x68, 0x6f,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x31,
	0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x31, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x53,
	0x68, 0x6f, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x31, 0x32, 0x22, 0xf0, 0x09, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x70,
	0x72, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x2c,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x55,
	0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x4d, 0x61,
	0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d,
	0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x54, 0x69,
	0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x43, 0x61, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x54, 0x69, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x54, 0x69, 0x65, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x69, 0x65, 0x72, 0x30, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x30, 0x12, 0x2c, 0x0a,
	0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65,
	0x72, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x31, 0x12, 0x2c, 0x0a, 0x11, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x32,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x32, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x61, 0x78, 0x47, 0x69, 0x66, 0x74, 0x54, 0x61, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x47, 0x69, 0x66, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x61, 0x63, 0x68, 0x61, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xab, 0x06, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74,
	0x63, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x41, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x41, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x54,
	0x65, 0x78, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6d, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x63, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x45,
	0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x63, 0x6f,
	0x6e, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65,
	0x6d, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x4a, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x4a, 0x70, 0x12,
	0x26, 0x0a, 0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x4b,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x42,
	0x47, 0x50, 0x61, 0x74, 0x68, 0x4b, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x6c, 0x70, 0x61, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x44, 0x69, 0x73, 0x6c, 0x70, 0x61,
	0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x45, 0x6d, 0x62, 0x6c,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xc8, 0x03, 0x0a, 0x1e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x72,
	0x69, 0x70, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x72, 0x69, 0x70, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbe,
	0x03, 0x0a, 0x1a, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x50,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x1b, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1b, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x78,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x4e, 0x65, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x22,
	0xde, 0x05, 0x0a, 0x16, 0x47, 0x75, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x61, 0x62, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x61, 0x62, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f,
	0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x38,
	0x0a, 0x17, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x17, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xbd, 0x0c, 0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x48, 0x69,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1a, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x44, 0x65,
	0x66, 0x65, 0x61, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x49, 0x73, 0x44, 0x65, 0x66, 0x65, 0x61, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x42, 0x61, 0x63, 0x6b,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x42, 0x61, 0x63,
	0x6b, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17,
	0x49, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x49,
	0x73, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4e, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x62, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4e, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x65, 0x65, 0x64,
	0x43, 0x6c, 0x75, 0x62, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x62,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d,
	0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x66, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x4c,
	0x6f, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x45, 0x63, 0x68, 0x65, 0x6c,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x63,
	0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0xb1, 0x02, 0x0a, 0x17, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x14,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x2a,
	0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x22, 0x81, 0x04, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x30, 0x30, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31,
	0x30, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x61, 0x78, 0x48, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x4d, 0x61, 0x78, 0x48, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x48,
	0x50, 0x31, 0x30, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x48,
	0x50, 0x31, 0x30, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x48, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31,
	0x30, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x31, 0x30, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61,
	0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61,
	0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x86, 0x08, 0x0a, 0x1c, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x54, 0x69, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x47, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x54, 0x69, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x47, 0x65, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x52, 0x6f, 0x6f,
	0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x4d, 0x6f, 0x76,
	0x65, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x49, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x3a, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x78,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x55, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x78,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x54, 0x53, 0x41, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x53, 0x41, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x18, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x45,
	0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x19, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x75, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x19, 0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x75, 0x74, 0x49, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3c, 0x0a, 0x19, 0x45,
	0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19,
	0x45, 0x78, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x18, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x12, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x93, 0x09, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x65, 0x6d, 0x79,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x50, 0x43,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x4e, 0x50, 0x43, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4e, 0x50, 0x43, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4e,
	0x50, 0x43, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42,
	0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x45, 0x6e, 0x65, 0x6d, 0x79,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x43, 0x6f, 0x6f, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x50, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4e,
	0x50, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4e, 0x50, 0x43, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4e, 0x50, 0x43, 0x43, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x41, 0x74, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x41, 0x74, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x36, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55,
	0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x16, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x62, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70, 0x49, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x69, 0x70, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x54, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0xdd, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x73, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x73,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43,
	0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xd3, 0x09, 0x0a, 0x17, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x12, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x63, 0x68, 0x65, 0x6c,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x6b,
	0x53, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x53, 0x74,
	0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x53,
	0x74, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x75, 0x72, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x53, 0x74, 0x61,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x75, 0x72, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4d, 0x61, 0x70, 0x42, 0x47, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4d, 0x61,
	0x70, 0x42, 0x47, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78,
	0x54, 0x75, 0x72, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x54,
	0x75, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53,
	0x6b, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x6b, 0x69, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x61, 0x63, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78,
	0x70, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x63, 0x68,
	0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xda, 0x03,
	0x0a, 0x16, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x78,
	0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x49, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x49, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x54, 0x61, 0x63, 0x74,
	0x69, 0x63, 0x53, 0x6b, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73,
	0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x70, 0x22, 0x9b, 0x06, 0x0a, 0x15, 0x57,
	0x65, 0x65, 0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x75, 0x6e,
	0x67, 0x65, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x6c,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x50, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x45, 0x78, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x12, 0x34, 0x0a, 0x15,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x45, 0x78, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x66, 0x66, 0x49,
	0x44, 0x18, 0x12, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75,
	0x66, 0x66, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x06, 0x0a, 0x17, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50,
	0x72, 0x65, 0x76, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3e,
	0x0a, 0x1a, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4c,
	0x0a, 0x21, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72,
	0x47, 0x6f, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x32, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x53, 0x74, 0x61, 0x72, 0x47, 0x6f, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x70,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16,
	0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x50, 0x6c,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x50, 0x41, 0x75, 0x74, 0x6f,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x41, 0x50, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x9d, 0x05, 0x0a, 0x13, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x57, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x57, 0x65, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x54, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x65, 0x78, 0x74,
	0x54, 0x69, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x65, 0x72, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x65, 0x72, 0x30, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x30, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69,
	0x65, 0x72, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x31, 0x12, 0x2c, 0x0a, 0x11,
	0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72,
	0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x32, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x68, 0x69, 0x66, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xe3, 0x04, 0x0a, 0x17, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x07, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x46, 0x65,
	0x65, 0x64, 0x45, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x55, 0x70, 0x46, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x55, 0x70, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70,
	0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x46, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x55, 0x70, 0x46, 0x65, 0x65, 0x64, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x46, 0x65,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x30,
	0x0a, 0x13, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x70, 0x0a, 0x18, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45,
	0x78, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x69, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x22, 0xd8, 0x0c, 0x0a, 0x13, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x5f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x53, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x69, 0x7a, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x75, 0x62, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x53, 0x75, 0x62, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x61, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x61, 0x62, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x64, 0x70, 0x49, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x64, 0x70,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72,
	0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x69, 0x73, 0x69, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x56, 0x69, 0x73, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x56, 0x69, 0x73, 0x69, 0x74, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x56, 0x69, 0x73, 0x69, 0x74, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x30, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65,
	0x72, 0x30, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x31,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x65, 0x72, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x65, 0x72, 0x32, 0x12, 0x32,
	0x0a, 0x14, 0x53, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x61, 0x66, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x35, 0x0a, 0x16, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x46, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x21, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x46,
	0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x16, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x58, 0x12, 0x36, 0x0a, 0x16, 0x46, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x59, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x46, 0x75, 0x72, 0x6e, 0x69,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x59, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x61, 0x66, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x43, 0x61, 0x66, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x61, 0x66, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x18, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x43, 0x61, 0x66, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x43, 0x61, 0x66, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x43,
	0x61, 0x66, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x6b, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x61, 0x66, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x43, 0x61, 0x66, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xa8, 0x03,
	0x0a, 0x12, 0x43, 0x61, 0x66, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x4d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x4d, 0x61,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x61,
	0x66, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x43, 0x61, 0x66, 0x65, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x1b,
	0x43, 0x61, 0x66, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54,
	0x61, 0x67, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x65, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x1b, 0x43, 0x61, 0x66, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x61, 0x67, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x65, 0x70, 0x12, 0x38,
	0x0a, 0x17, 0x43, 0x61, 0x66, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x61, 0x67, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x17, 0x43, 0x61, 0x66, 0x65, 0x56, 0x69, 0x73, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x61, 0x67, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0xf2, 0x02, 0x0a, 0x18, 0x43, 0x61, 0x66,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x61, 0x66, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x3a, 0x0a, 0x18, 0x43, 0x61, 0x66, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x43, 0x61, 0x66, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x43, 0x61, 0x66, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x43,
	0x61, 0x66, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x50, 0x61, 0x72, 0x63, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1f, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x50, 0x61, 0x72,
	0x63, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x22, 0x81, 0x02,
	0x0a, 0x15, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x67, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x42, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f,
	0x6e, 0x22, 0xf3, 0x02, 0x0a, 0x1b, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x17, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x49, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x17, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65,
	0x66, 0x61, 0x62, 0x50, 0x61, 0x74, 0x68, 0x22, 0x5e, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x78, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x45, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x22, 0x9c, 0x04, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x65, 0x61, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4e, 0x65, 0x78, 0x74, 0x54,
	0x69, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12,
	0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12,
	0x4d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x61, 0x67, 0x73,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x63,
	0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x50, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x73, 0x55, 0x6e, 0x6e, 0x65,
	0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x49, 0x73, 0x55, 0x6e, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x73, 0x0a, 0x17, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x6e, 0x6b, 0x53, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x74, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x74, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x22, 0xa5, 0x02, 0x0a, 0x19, 0x41, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x22,
	0x89, 0x02, 0x0a, 0x15, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x10, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x22, 0x69, 0x0a, 0x1d, 0x41,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x22, 0xbf, 0x06, 0x0a, 0x17, 0x41, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x74, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x12, 0x2c, 0x0a, 0x11,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x45, 0x78, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x45, 0x78, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x62, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x73, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x08, 0x52, 0x16, 0x49, 0x73, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x18, 0x53, 0x63, 0x68,
	0x6f, 0x6f, 0x6c, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x67, 0x12,
	0x2a, 0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x63, 0x65, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22,
	0xd8, 0x03, 0x0a, 0x1a, 0x52, 0x61, 0x69, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x69, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x61, 0x69, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x14,
	0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x47, 0x61, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x47, 0x61, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x61, 0x75,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x18, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x61, 0x75,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0xc9, 0x03, 0x0a, 0x1b, 0x52,
	0x61, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x52,
	0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x16, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x12, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95, 0x0c, 0x0a, 0x13, 0x52, 0x61, 0x69, 0x64, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x41, 0x49, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x55, 0x73, 0x65, 0x42, 0x6f, 0x73, 0x73, 0x41, 0x49, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x61, 0x69, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x61, 0x69, 0x64, 0x42,
	0x6f, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x47, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x47,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x61, 0x69, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x52,
	0x61, 0x69, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x61,
	0x69, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x52, 0x61, 0x69, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x4c, 0x69,
	0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x47, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4d, 0x69,
	0x6e, 0x75, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x50, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x48, 0x50, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x4d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x17, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x1d,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x1d, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x45, 0x6e,
	0x64, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1b, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6f, 0x73, 0x73, 0x42, 0x47, 0x49, 0x6e,
	0x66, 0x6f, 0x4b, 0x65, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x42, 0x6f, 0x73,
	0x73, 0x42, 0x47, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x63,
	0x68, 0x65, 0x6c, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x63, 0x68, 0x65, 0x6c, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcd,
	0x1b, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x12, 0x26,
	0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x30, 0x30,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x31, 0x30, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x48, 0x50, 0x31,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x48, 0x50, 0x31, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x61, 0x78, 0x48, 0x50, 0x31, 0x30, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x4d, 0x61, 0x78, 0x48, 0x50, 0x31, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31,
	0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x31, 0x30, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x30, 0x30, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x65,
	0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x48, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x65,
	0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x30, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x31, 0x30, 0x30, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x69, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x69, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x48, 0x65, 0x61, 0x6c, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x48, 0x65, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x4f, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4f, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x4f, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x6e,
	0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x31, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50,
	0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x30, 0x30, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x6e, 0x65,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x30, 0x30, 0x12, 0x3c, 0x0a, 0x19, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x31, 0x12, 0x40, 0x0a, 0x1b, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x69, 0x73, 0x74, 0x31, 0x30, 0x30, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x31, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x69, 0x65, 0x72, 0x63, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x45, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x69, 0x65, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x63, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x79, 0x73, 0x74, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x6e,
	0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x69, 0x65, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x65, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x45,
	0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x6d,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x48, 0x65, 0x61, 0x76, 0x79, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x65,
	0x61, 0x76, 0x79, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x55, 0x6e, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x41, 0x72,
	0x6d, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x45,
	0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x41, 0x72, 0x6d,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x72, 0x6d, 0x6f, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x45, 0x6e, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x62, 0x75,
	0x66, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x62, 0x75, 0x66, 0x66, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x43, 0x72, 0x6f, 0x77, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6d, 0x6d, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x6d, 0x6d, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x6d, 0x6d, 0x6f, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x6d, 0x6d, 0x6f, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x53, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x75, 0x67, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x47, 0x72, 0x6f, 0x67, 0x67, 0x79, 0x47, 0x61, 0x75, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x67, 0x67, 0x79, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x67, 0x67, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x67, 0x67, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x53, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x32, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x32, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x32, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x45, 0x78, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x45, 0x78, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x45, 0x78, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x78, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x45, 0x78, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x45, 0x78, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x65,
	0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x48, 0x65,
	0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x6d,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x48, 0x65,
	0x61, 0x76, 0x79, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x76, 0x79, 0x41, 0x72, 0x6d,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x55, 0x6e,
	0x61, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x48, 0x65, 0x61, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x48, 0x65, 0x61, 0x6c, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x41,
	0x72, 0x6d, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x48, 0x65, 0x61, 0x6c, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x41, 0x72, 0x6d, 0x6f, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x72, 0x6d,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x6f,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c,
	0x65, 0x64, 0x50, 0x69, 0x65, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x50, 0x69, 0x65, 0x72, 0x63, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x4d, 0x79,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x65,
	0x64, 0x53, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x65,
	0x61, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x17, 0x4f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x4f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x6e, 0x64, 0x6f,
	0x6f, 0x72, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x49, 0x6e, 0x64, 0x6f, 0x6f, 0x72,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x4f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xb5,
	0x03, 0x0a, 0x19, 0x52, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x49, 0x73, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x49, 0x73, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x44, 0x12, 0x4a, 0x0a, 0x20, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x08, 0x0a, 0x11, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x61, 0x73,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f,
	0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x56, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x56, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x79, 0x12, 0x2a,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x55, 0x49, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x55, 0x49,
	0x12, 0x36, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_excel_server_proto_rawDescOnce sync.Once
	file_excel_server_proto_rawDescData = file_excel_server_proto_rawDesc
)

func file_excel_server_proto_rawDescGZIP() []byte {
	file_excel_server_proto_rawDescOnce.Do(func() {
		file_excel_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_excel_server_proto_rawDescData)
	})
	return file_excel_server_proto_rawDescData
}

var file_excel_server_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_excel_server_proto_goTypes = []any{
	(*Excel)(nil),                          // 0: proto.Excel
	(*CafeInfoExcelTableInfo)(nil),         // 1: proto.CafeInfoExcelTableInfo
	(*DefaultCharacterExcelTable)(nil),     // 2: proto.DefaultCharacterExcelTable
	(*CharacterExcelTable)(nil),            // 3: proto.CharacterExcelTable
	(*DefaultFurnitureExcelTable)(nil),     // 4: proto.DefaultFurnitureExcelTable
	(*DefaultEchelonExcelTable)(nil),       // 5: proto.DefaultEchelonExcelTable
	(*ShopExcelTable)(nil),                 // 6: proto.ShopExcelTable
	(*ShopInfoExcelTable)(nil),             // 7: proto.ShopInfoExcelTable
	(*ItemExcelTable)(nil),                 // 8: proto.ItemExcelTable
	(*EmblemExcel)(nil),                    // 9: proto.EmblemExcel
	(*AcademyFavorScheduleExcelTable)(nil), // 10: proto.AcademyFavorScheduleExcelTable
	(*AcademyMessangerExcelTable)(nil),     // 11: proto.AcademyMessangerExcelTable
	(*GuideMissionExcelTable)(nil),         // 12: proto.GuideMissionExcelTable
	(*ScenarioModeExcel)(nil),              // 13: proto.ScenarioModeExcel
	(*ScenarioModeRewardExcel)(nil),        // 14: proto.ScenarioModeRewardExcel
	(*CharacterWeaponExcelTable)(nil),      // 15: proto.CharacterWeaponExcelTable
	(*CharacterSkillListExcelTable)(nil),   // 16: proto.CharacterSkillListExcelTable
	(*SkillExcelTable)(nil),                // 17: proto.SkillExcelTable
	(*RecipeIngredientExcelTable)(nil),     // 18: proto.RecipeIngredientExcelTable
	(*CampaignStageExcelTable)(nil),        // 19: proto.CampaignStageExcelTable
	(*CampaignUnitExcelTable)(nil),         // 20: proto.CampaignUnitExcelTable
	(*WeekDungeonExcelTable)(nil),          // 21: proto.WeekDungeonExcelTable
	(*SchoolDungeonStageExcel)(nil),        // 22: proto.SchoolDungeonStageExcel
	(*AccountLevelExcel)(nil),              // 23: proto.AccountLevelExcel
	(*EquipmentExcelTable)(nil),            // 24: proto.EquipmentExcelTable
	(*EquipmentStatExcelTable)(nil),        // 25: proto.EquipmentStatExcelTable
	(*EquipmentLevelExcelTable)(nil),       // 26: proto.EquipmentLevelExcelTable
	(*FurnitureExcelTable)(nil),            // 27: proto.FurnitureExcelTable
	(*CafeRankExcelTable)(nil),             // 28: proto.CafeRankExcelTable
	(*CafeProductionExcelTable)(nil),       // 29: proto.CafeProductionExcelTable
	(*IdCardBackgroundExcel)(nil),          // 30: proto.IdCardBackgroundExcel
	(*WeekDungeonRewardExcelTable)(nil),    // 31: proto.WeekDungeonRewardExcelTable
	(*CharacterLevelExcelTable)(nil),       // 32: proto.CharacterLevelExcelTable
	(*CharacterGearExcel)(nil),             // 33: proto.CharacterGearExcel
	(*CharacterPotentialExcel)(nil),        // 34: proto.CharacterPotentialExcel
	(*CharacterPotentialStatExcel)(nil),    // 35: proto.CharacterPotentialStatExcel
	(*AcademyTicketExcelTable)(nil),        // 36: proto.AcademyTicketExcelTable
	(*AcademyLocationExcelTable)(nil),      // 37: proto.AcademyLocationExcelTable
	(*AcademyZoneExcelTable)(nil),          // 38: proto.AcademyZoneExcelTable
	(*AcademyLocationRankExcelTable)(nil),  // 39: proto.AcademyLocationRankExcelTable
	(*AcademyRewardExcelTable)(nil),        // 40: proto.AcademyRewardExcelTable
	(*SchoolDungeonRewardExcel)(nil),       // 41: proto.SchoolDungeonRewardExcel
	(*RaidSeasonManageExcelTable)(nil),     // 42: proto.RaidSeasonManageExcelTable
	(*RaidRankingRewardExcelTable)(nil),    // 43: proto.RaidRankingRewardExcelTable
	(*RaidStageExcelTable)(nil),            // 44: proto.RaidStageExcelTable
	(*CharacterStatExcelTable)(nil),        // 45: proto.CharacterStatExcelTable
	(*RaidStageRewardExcelTable)(nil),      // 46: proto.RaidStageRewardExcelTable
	(*MissionExcelTable)(nil),              // 47: proto.MissionExcelTable
}
var file_excel_server_proto_depIdxs = []int32{
	1,  // 0: proto.Excel.CafeInfoExcelTableInfo:type_name -> proto.CafeInfoExcelTableInfo
	2,  // 1: proto.Excel.DefaultCharacterExcelTable:type_name -> proto.DefaultCharacterExcelTable
	3,  // 2: proto.Excel.CharacterExcelTable:type_name -> proto.CharacterExcelTable
	4,  // 3: proto.Excel.DefaultFurnitureExcelTable:type_name -> proto.DefaultFurnitureExcelTable
	5,  // 4: proto.Excel.DefaultEchelonExcelTable:type_name -> proto.DefaultEchelonExcelTable
	6,  // 5: proto.Excel.ShopExcelTable:type_name -> proto.ShopExcelTable
	7,  // 6: proto.Excel.ShopInfoExcelTable:type_name -> proto.ShopInfoExcelTable
	8,  // 7: proto.Excel.ItemExcelTable:type_name -> proto.ItemExcelTable
	9,  // 8: proto.Excel.EmblemExcel:type_name -> proto.EmblemExcel
	10, // 9: proto.Excel.AcademyFavorScheduleExcelTable:type_name -> proto.AcademyFavorScheduleExcelTable
	11, // 10: proto.Excel.AcademyMessangerExcelTable:type_name -> proto.AcademyMessangerExcelTable
	12, // 11: proto.Excel.GuideMissionExcelTable:type_name -> proto.GuideMissionExcelTable
	13, // 12: proto.Excel.ScenarioModeExcel:type_name -> proto.ScenarioModeExcel
	14, // 13: proto.Excel.ScenarioModeRewardExcel:type_name -> proto.ScenarioModeRewardExcel
	15, // 14: proto.Excel.CharacterWeaponExcelTable:type_name -> proto.CharacterWeaponExcelTable
	16, // 15: proto.Excel.CharacterSkillListExcelTable:type_name -> proto.CharacterSkillListExcelTable
	17, // 16: proto.Excel.SkillExcelTable:type_name -> proto.SkillExcelTable
	18, // 17: proto.Excel.RecipeIngredientExcelTable:type_name -> proto.RecipeIngredientExcelTable
	19, // 18: proto.Excel.CampaignStageExcelTable:type_name -> proto.CampaignStageExcelTable
	20, // 19: proto.Excel.CampaignUnitExcelTable:type_name -> proto.CampaignUnitExcelTable
	21, // 20: proto.Excel.WeekDungeonExcelTable:type_name -> proto.WeekDungeonExcelTable
	22, // 21: proto.Excel.SchoolDungeonStageExcel:type_name -> proto.SchoolDungeonStageExcel
	23, // 22: proto.Excel.AccountLevelExcel:type_name -> proto.AccountLevelExcel
	24, // 23: proto.Excel.EquipmentExcelTable:type_name -> proto.EquipmentExcelTable
	25, // 24: proto.Excel.EquipmentStatExcelTable:type_name -> proto.EquipmentStatExcelTable
	26, // 25: proto.Excel.EquipmentLevelExcelTable:type_name -> proto.EquipmentLevelExcelTable
	27, // 26: proto.Excel.FurnitureExcelTable:type_name -> proto.FurnitureExcelTable
	28, // 27: proto.Excel.CafeRankExcelTable:type_name -> proto.CafeRankExcelTable
	29, // 28: proto.Excel.CafeProductionExcelTable:type_name -> proto.CafeProductionExcelTable
	30, // 29: proto.Excel.IdCardBackgroundExcel:type_name -> proto.IdCardBackgroundExcel
	31, // 30: proto.Excel.WeekDungeonRewardExcelTable:type_name -> proto.WeekDungeonRewardExcelTable
	32, // 31: proto.Excel.CharacterLevelExcelTable:type_name -> proto.CharacterLevelExcelTable
	33, // 32: proto.Excel.CharacterGearExcel:type_name -> proto.CharacterGearExcel
	34, // 33: proto.Excel.CharacterPotentialExcel:type_name -> proto.CharacterPotentialExcel
	35, // 34: proto.Excel.CharacterPotentialStatExcel:type_name -> proto.CharacterPotentialStatExcel
	36, // 35: proto.Excel.AcademyTicketExcelTable:type_name -> proto.AcademyTicketExcelTable
	37, // 36: proto.Excel.AcademyLocationExcelTable:type_name -> proto.AcademyLocationExcelTable
	38, // 37: proto.Excel.AcademyZoneExcelTable:type_name -> proto.AcademyZoneExcelTable
	39, // 38: proto.Excel.AcademyLocationRankExcelTable:type_name -> proto.AcademyLocationRankExcelTable
	40, // 39: proto.Excel.AcademyRewardExcelTable:type_name -> proto.AcademyRewardExcelTable
	41, // 40: proto.Excel.SchoolDungeonRewardExcel:type_name -> proto.SchoolDungeonRewardExcel
	42, // 41: proto.Excel.RaidSeasonManageExcelTable:type_name -> proto.RaidSeasonManageExcelTable
	43, // 42: proto.Excel.RaidRankingRewardExcelTable:type_name -> proto.RaidRankingRewardExcelTable
	44, // 43: proto.Excel.RaidStageExcelTable:type_name -> proto.RaidStageExcelTable
	45, // 44: proto.Excel.CharacterStatExcelTable:type_name -> proto.CharacterStatExcelTable
	46, // 45: proto.Excel.RaidStageRewardExcelTable:type_name -> proto.RaidStageRewardExcelTable
	47, // 46: proto.Excel.MissionExcelTable:type_name -> proto.MissionExcelTable
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_excel_server_proto_init() }
func file_excel_server_proto_init() {
	if File_excel_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_excel_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_excel_server_proto_goTypes,
		DependencyIndexes: file_excel_server_proto_depIdxs,
		MessageInfos:      file_excel_server_proto_msgTypes,
	}.Build()
	File_excel_server_proto = out.File
	file_excel_server_proto_rawDesc = nil
	file_excel_server_proto_goTypes = nil
	file_excel_server_proto_depIdxs = nil
}
